var N = null;var searchIndex = {};
searchIndex["aho_corasick"]={"doc":"An implementation of the Aho-Corasick string search algorithm.","items":[[3,"Match","aho_corasick","Records a match in the search text.",N,N],[12,"pati","","The pattern index.",0,N],[12,"start","","The starting byte offset of the match in the search text.",0,N],[12,"end","","The ending byte offset of the match in the search text.",0,N],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",N,N],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",N,N],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",N,N],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",N,N],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",N,N],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",N,N],[3,"Dense","","State transitions that can be stored either sparsely or densely.",N,N],[3,"Sparse","","State transitions that are always sparse.",N,N],[11,"clone","","",0,[[["self"]],["match"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"eq","","",0,[[["self"],["match"]],["bool"]]],[11,"ne","","",0,[[["self"],["match"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["match"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"next","","",2,[[["self"]],["option",["result"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","",3,[[["self"]],["option",["match"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["result"]]]],[11,"clone","","",5,[[["self"]],["fullacautomaton"]]],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing Aho-Corasick automaton.",5,[[["acautomaton"]],["fullacautomaton"]]],[11,"next_state","","",5,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",5,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",5,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",5,N],[11,"patterns","","",5,N],[11,"pattern","","",5,[[["self"],["usize"]],["p"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[6,"StateIdx","","The integer type used for the state index.",N,N],[8,"Automaton","","An abstraction over automatons and their corresponding iterators. The type parameter `P` is the type of the pattern that was used to construct this Automaton.",N,N],[10,"next_state","","Return the next state given the current state and next character.",6,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[10,"has_match","","Return true if and only if the given state and current pattern index indicate a match.",6,[[["self"],["stateidx"],["usize"]],["bool"]]],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,N],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,N],[10,"pattern","","Returns the pattern indexed at `i`.",6,[[["self"],["usize"]],["p"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]],[8,"Transitions","","An abstraction over state transition strategies.",N,N],[10,"new","","Return a new state at the given depth.",7,[[["u32"]],["self"]]],[10,"goto","","Return the next state index given the next character.",7,[[["self"],["u8"]],["stateidx"]]],[10,"set_goto","","Set the next state index for the character given.",7,[[["self"],["u8"],["stateidx"]]]],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,[[["self"]],["usize"]]],[11,"for_each_transition","","Iterates over each state",7,[[["self"],["f"]]]],[11,"for_each_ok_transition","","Iterates over each non-fail state",7,[[["self"],["f"]]]],[11,"clone","","",8,[[["self"]],["acautomaton"]]],[11,"new","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton",["dense"]]]],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,[[["i"]],["acautomaton"]]],[11,"into_full","","Build out the entire automaton into a single matrix.",8,[[["self"]],["fullacautomaton"]]],[11,"next_state","","",8,[[["self"],["stateidx"],["u8"]],["stateidx"]]],[11,"get_match","","",8,[[["self"],["stateidx"],["usize"],["usize"]],["match"]]],[11,"has_match","","",8,[[["self"],["stateidx"],["usize"]],["bool"]]],[11,"start_bytes","","",8,N],[11,"patterns","","",8,N],[11,"pattern","","",8,[[["self"],["usize"]],["p"]]],[11,"clone","","",9,[[["self"]],["dense"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,[[["u32"]],["dense"]]],[11,"goto","","",9,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",9,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",9,[[["self"]],["usize"]]],[11,"for_each_transition","","",9,[[["self"],["f"]]]],[11,"for_each_ok_transition","","",9,[[["self"],["f"]]]],[11,"clone","","",10,[[["self"]],["sparse"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["u32"]],["sparse"]]],[11,"goto","","",10,[[["self"],["u8"]],["stateidx"]]],[11,"set_goto","","",10,[[["self"],["u8"],["stateidx"]]]],[11,"heap_bytes","","",10,[[["self"]],["usize"]]],[11,"from_iter","","Create an automaton from an iterator of strings.",8,[[["t"]],["acautomaton"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"len","","Return the number of patterns in the automaton.",6,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the automaton has no patterns.",6,[[["self"]],["bool"]]],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,[[["self"],["q"]],["matches"]]],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,[[["self"],["q"]],["matchesoverlapping"]]],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatches"]]],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,[[["self"],["r"]],["streammatchesoverlapping"]]]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["ansi_term"]={"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"Prefix","ansi_term","Like `ANSIString`, but only displays the style prefix.",N,N],[3,"Infix","","Like `ANSIString`, but only displays the difference between two styles.",N,N],[3,"Suffix","","Like `ANSIString`, but only displays the style suffix.",N,N],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",N,N],[12,"foreground","","The style's foreground colour, if it has one.",0,N],[12,"background","","The style's background colour, if it has one.",0,N],[12,"is_bold","","Whether this style is bold.",0,N],[12,"is_dimmed","","Whether this style is dimmed.",0,N],[12,"is_italic","","Whether this style is italic.",0,N],[12,"is_underline","","Whether this style is underlined.",0,N],[12,"is_blink","","Whether this style is blinking.",0,N],[12,"is_reverse","","Whether this style has reverse colours.",0,N],[12,"is_hidden","","Whether this style is hidden.",0,N],[12,"is_strikethrough","","Whether this style is struckthrough.",0,N],[3,"ANSIGenericString","","An `ANSIGenericString` includes a generic string type and a `Style` to display that string.  `ANSIString` and `ANSIByteString` are aliases for this type on `str` and `[u8]`, respectively.",N,N],[3,"ANSIGenericStrings","","A set of `ANSIGenericString`s collected together, in order to be written with a minimum of control characters.",N,N],[12,"0","","",1,N],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[4,"Color","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",N,N],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",2,N],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",2,N],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",2,N],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",2,N],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",2,N],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",2,N],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",2,N],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",2,N],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",2,N],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",2,N],[5,"ANSIStrings","","A function to construct an `ANSIStrings` instance.",N,N],[5,"ANSIByteStrings","","A function to construct an `ANSIByteStrings` instance.",N,N],[11,"clone","","",3,[[["self"]],["prefix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["infix"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["suffix"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"prefix","","The prefix for this style.",0,[[["self"]],["prefix"]]],[11,"infix","","The infix between this style and another.",0,[[["self"],["style"]],["infix"]]],[11,"suffix","","The suffix for this style.",0,[[["self"]],["suffix"]]],[11,"prefix","","The prefix for this colour.",2,[[["self"]],["prefix"]]],[11,"infix","","The infix between this colour and another.",2,[[["self"],["colour"]],["infix"]]],[11,"suffix","","The suffix for this colour.",2,[[["self"]],["suffix"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["style"]],["bool"]]],[11,"ne","","",0,[[["self"],["style"]],["bool"]]],[11,"clone","","",0,[[["self"]],["style"]]],[11,"new","","Creates a new Style with no differences.",0,[[],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",0,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",0,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",0,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",0,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",0,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",0,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the hidden property set.",0,[[["self"]],["style"]]],[11,"fg","","Returns a `Style` with the foreground colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",0,[[["self"],["colour"]],["style"]]],[11,"is_plain","","Return true if this `Style` has no actual styles, and can be written without any control characters.",0,[[["self"]],["bool"]]],[11,"default","","Returns a style with no properties set. Formatting text using this style returns the exact same text.",0,[[],["style"]]],[11,"eq","","",2,[[["self"],["colour"]],["bool"]]],[11,"ne","","",2,[[["self"],["colour"]],["bool"]]],[11,"clone","","",2,[[["self"]],["colour"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"normal","","Return a `Style` with the foreground colour set to this colour.",2,[[["self"]],["style"]]],[11,"bold","","Returns a `Style` with the bold property set.",2,[[["self"]],["style"]]],[11,"dimmed","","Returns a `Style` with the dimmed property set.",2,[[["self"]],["style"]]],[11,"italic","","Returns a `Style` with the italic property set.",2,[[["self"]],["style"]]],[11,"underline","","Returns a `Style` with the underline property set.",2,[[["self"]],["style"]]],[11,"blink","","Returns a `Style` with the blink property set.",2,[[["self"]],["style"]]],[11,"reverse","","Returns a `Style` with the reverse property set.",2,[[["self"]],["style"]]],[11,"hidden","","Returns a `Style` with the hidden property set.",2,[[["self"]],["style"]]],[11,"strikethrough","","Returns a `Style` with the strikethrough property set.",2,[[["self"]],["style"]]],[11,"on","","Returns a `Style` with the background colour property set.",2,[[["self"],["colour"]],["style"]]],[11,"from","","You can turn a `Colour` into a `Style` with the foreground colour set with the `From` trait.",0,[[["colour"]],["style"]]],[11,"eq","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"ne","","",6,[[["self"],["ansigenericstring"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["ansigenericstring"]]],[11,"from","","",6,[[["i"]],["ansigenericstring"]]],[11,"deref","","",6,[[["self"]],["s"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",0,[[["self"],["i"]],["ansigenericstring"]]],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don’t have to use `Blue.normal()` just to get blue text.",2,[[["self"],["i"]],["ansigenericstring"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[6,"ANSIString","","An ANSI String is a string coupled with the `Style` to display it in a terminal.",N,N],[6,"ANSIByteString","","An `ANSIByteString` represents a formatted series of bytes.  Use `ANSIByteString` when styling text with an unknown encoding.",N,N],[6,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",N,N],[6,"ANSIByteStrings","","A set of `ANSIByteString`s collected together, in order to be written with a minimum of control characters.",N,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write an `ANSIByteString` to an `io::Write`.  This writes the escape sequences for the associated `Style` around the bytes.",8,[[["self"],["w"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"write_to","","Write `ANSIByteStrings` to an `io::Write`.  This writes the minimal escape sequences for the associated `Style`s around each set of bytes.",10,[[["self"],["w"]],["result"]]]],"paths":[[3,"Style"],[3,"ANSIGenericStrings"],[4,"Colour"],[3,"Prefix"],[3,"Infix"],[3,"Suffix"],[3,"ANSIGenericString"],[6,"ANSIString"],[6,"ANSIByteString"],[6,"ANSIStrings"],[6,"ANSIByteStrings"]]};
searchIndex["atty"]={"doc":"atty is a simple utility that answers one question > is this a tty?","items":[[4,"Stream","atty","possible stream sources",N,N],[13,"Stdout","","",0,N],[13,"Stderr","","",0,N],[13,"Stdin","","",0,N],[5,"is","","returns true if this is a tty",N,[[["stream"]],["bool"]]],[5,"isnt","","returns true if this is not a tty",N,[[["stream"]],["bool"]]],[11,"clone","","",0,[[["self"]],["stream"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[4,"Stream"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["byteorder"]={"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[6,"BE","","A type alias for [`BigEndian`].",N,N],[6,"LE","","A type alias for [`LittleEndian`].",N,N],[6,"NetworkEndian","","Defines network byte order serialization.",N,N],[6,"NativeEndian","","Defines system native-endian serialization.",N,N],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",N,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",N,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",2,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",2,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",2,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",2,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,N],[11,"clone","","",3,[[["self"]],["bigendian"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"hash","","",3,N],[11,"cmp","","",3,[[["self"],["bigendian"]],["ordering"]]],[11,"eq","","",3,[[["self"],["bigendian"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"default","","",3,[[],["bigendian"]]],[11,"clone","","",4,[[["self"]],["littleendian"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"hash","","",4,N],[11,"cmp","","",4,[[["self"],["littleendian"]],["ordering"]]],[11,"eq","","",4,[[["self"],["littleendian"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"default","","",4,[[],["littleendian"]]],[11,"read_u16","","",3,N],[11,"read_u32","","",3,N],[11,"read_u64","","",3,N],[11,"read_uint","","",3,N],[11,"write_u16","","",3,N],[11,"write_u32","","",3,N],[11,"write_u64","","",3,N],[11,"write_uint","","",3,N],[11,"read_u16_into","","",3,N],[11,"read_u32_into","","",3,N],[11,"read_u64_into","","",3,N],[11,"write_u16_into","","",3,N],[11,"write_u32_into","","",3,N],[11,"write_u64_into","","",3,N],[11,"from_slice_u16","","",3,N],[11,"from_slice_u32","","",3,N],[11,"from_slice_u64","","",3,N],[11,"from_slice_f32","","",3,N],[11,"from_slice_f64","","",3,N],[11,"read_u16","","",4,N],[11,"read_u32","","",4,N],[11,"read_u64","","",4,N],[11,"read_uint","","",4,N],[11,"write_u16","","",4,N],[11,"write_u32","","",4,N],[11,"write_u64","","",4,N],[11,"write_uint","","",4,N],[11,"read_u16_into","","",4,N],[11,"read_u32_into","","",4,N],[11,"read_u64_into","","",4,N],[11,"write_u16_into","","",4,N],[11,"write_u32_into","","",4,N],[11,"write_u64_into","","",4,N],[11,"from_slice_u16","","",4,N],[11,"from_slice_u32","","",4,N],[11,"from_slice_u64","","",4,N],[11,"from_slice_f32","","",4,N],[11,"from_slice_f64","","",4,N],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,[[["self"]],["result",["u8"]]]],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,[[["self"]],["result",["i8"]]]],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,[[["self"]],["result",["u16"]]]],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,[[["self"]],["result",["i16"]]]],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,[[["self"]],["result",["u32"]]]],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,[[["self"]],["result",["i32"]]]],[11,"read_u48","","Reads an unsigned 48 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i48","","Reads a signed 48 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,[[["self"]],["result",["u64"]]]],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,[[["self"]],["result",["i64"]]]],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["u64"]]]],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,[[["self"],["usize"]],["result",["i64"]]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f32"]]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,[[["self"]],["result",["f64"]]]],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,N],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,N],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,N],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,N],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,N],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,N],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f32_into_unchecked","","DEPRECATED.",0,N],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,N],[11,"read_f64_into_unchecked","","DEPRECATED.",0,N],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,[[["self"],["u8"]],["result"]]],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,[[["self"],["i8"]],["result"]]],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,[[["self"],["u16"]],["result"]]],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,[[["self"],["i16"]],["result"]]],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,[[["self"],["u32"]],["result"]]],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,[[["self"],["i32"]],["result"]]],[11,"write_u48","","Writes an unsigned 48 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i48","","Writes a signed 48 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,[[["self"],["u64"]],["result"]]],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,[[["self"],["i64"]],["result"]]],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,[[["self"],["u64"],["usize"]],["result"]]],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,[[["self"],["i64"],["usize"]],["result"]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,[[["self"],["f64"]],["result"]]]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["bytes"]={"doc":"Provides abstractions for working with bytes.","items":[[8,"ByteOrder","bytes","`ByteOrder` describes types that can serialize integers as bytes.",N,N],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,N],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,N],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,N],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,N],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,N],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,N],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,N],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",0,N],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,N],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.",0,N],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,N],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,N],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,N],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,N],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,N],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,N],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,N],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,N],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",0,N],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,N],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,N],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,N],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,N],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,N],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,N],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",0,N],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",0,N],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,N],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,N],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,N],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,N],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,N],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,N],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,N],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,N],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,N],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",0,N],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",0,N],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",0,N],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",0,N],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",0,N],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",0,N],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",0,N],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",0,N],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",0,N],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",0,N],[4,"BigEndian","","Defines big-endian serialization.",N,N],[4,"LittleEndian","","Defines little-endian serialization.",N,N],[3,"Bytes","","A reference counted contiguous slice of memory.",N,N],[3,"BytesMut","","A unique reference to a contiguous slice of memory.",N,N],[0,"buf","","Utilities for working with buffers.",N,N],[3,"Chain","bytes::buf","A `Chain` sequences two buffers.",N,N],[3,"Iter","","Iterator over the bytes contained by the buffer.",N,N],[3,"Reader","","A `Buf` adapter which implements `io::Read` for the inner value.",N,N],[3,"Take","","A `Buf` adapter which limits the bytes read from an underlying buffer.",N,N],[3,"Writer","","A `BufMut` adapter which implements `io::Write` for the inner value.",N,N],[11,"from_buf","bytes","",1,[[["t"]],["self"]]],[11,"from_buf","","",2,[[["t"]],["self"]]],[11,"fmt","bytes::buf","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Chain` sequencing the provided values.",3,[[["t"],["u"]],["chain"]]],[11,"first_ref","","Gets a reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"first_mut","","Gets a mutable reference to the first underlying `Buf`.",3,[[["self"]],["t"]]],[11,"last_ref","","Gets a reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"last_mut","","Gets a mutable reference to the last underlying `Buf`.",3,[[["self"]],["u"]]],[11,"into_inner","","Consumes this `Chain`, returning the underlying values.",3,N],[11,"remaining","","",3,[[["self"]],["usize"]]],[11,"bytes","","",3,N],[11,"advance","","",3,[[["self"],["usize"]]]],[11,"bytes_vec","","",3,N],[11,"remaining_mut","","",3,[[["self"]],["usize"]]],[11,"bytes_mut","","",3,N],[11,"advance_mut","","",3,[[["self"],["usize"]]]],[11,"bytes_vec_mut","","",3,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Iter`, returning the underlying value.",4,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",4,[[["self"]],["t"]]],[11,"next","","",4,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",4,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",5,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Reader`, returning the underlying value.",5,[[["self"]],["b"]]],[11,"read","","",5,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Consumes this `Take`, returning the underlying value.",6,[[["self"]],["t"]]],[11,"get_ref","","Gets a reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying `Buf`.",6,[[["self"]],["t"]]],[11,"limit","","Returns the maximum number of bytes that can be read.",6,[[["self"]],["usize"]]],[11,"set_limit","","Sets the maximum number of bytes that can be read.",6,[[["self"],["usize"]]]],[11,"remaining","","",6,[[["self"]],["usize"]]],[11,"bytes","","",6,N],[11,"advance","","",6,[[["self"],["usize"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Gets a reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"get_mut","","Gets a mutable reference to the underlying `BufMut`.",7,[[["self"]],["b"]]],[11,"into_inner","","Consumes this `Writer`, returning the underlying value.",7,[[["self"]],["b"]]],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"FromBuf","","Conversion from a [`Buf`]",N,N],[10,"from_buf","","Creates a value from a buffer.",10,[[["t"]],["self"]]],[8,"IntoBuf","","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"with_capacity","bytes","Creates a new `Bytes` with the specified capacity.",1,[[["usize"]],["bytes"]]],[11,"new","","Creates a new empty `Bytes`.",1,[[],["bytes"]]],[11,"from_static","","Creates a new `Bytes` from a static slice.",1,N],[11,"len","","Returns the number of bytes contained in this `Bytes`.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",1,[[["self"]],["bool"]]],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",1,[[["self"],["usize"],["usize"]],["bytes"]]],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",1,[[["self"],["usize"]],["bytes"]]],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",1,[[["self"],["usize"]],["bytes"]]],[11,"slice_ref","","Returns a slice of self that is equivalent to the given `subset`.",1,N],[11,"split_off","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"split_to","","Splits the bytes into two at the given index.",1,[[["self"],["usize"]],["bytes"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",1,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",1,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",1,[[["self"]]]],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",1,[[["self"]],["result",["bytesmut","bytes"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",1,N],[11,"into_buf","","",1,N],[11,"clone","","",1,[[["self"]],["bytes"]]],[11,"as_ref","","",1,N],[11,"deref","","",1,N],[11,"from","","",1,[[["bytesmut"]],["bytes"]]],[11,"from","","",1,[[["vec",["u8"]]],["bytes"]]],[11,"from","","",1,[[["string"]],["bytes"]]],[11,"from","","",1,N],[11,"from","","",1,[[["str"]],["bytes"]]],[11,"from_iter","","",2,[[["t"]],["self"]]],[11,"from_iter","","",1,[[["t"]],["self"]]],[11,"eq","","",1,[[["self"],["bytes"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["bytes"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["bytes"]],["ordering"]]],[11,"default","","",1,[[],["bytes"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"borrow","","",1,N],[11,"into_iter","","",1,N],[11,"extend","","",1,[[["self"],["t"]]]],[11,"extend","","",1,[[["self"],["t"]]]],[11,"with_capacity","","Creates a new `BytesMut` with the specified capacity.",2,[[["usize"]],["bytesmut"]]],[11,"new","","Creates a new `BytesMut` with default capacity.",2,[[],["bytesmut"]]],[11,"len","","Returns the number of bytes contained in this `BytesMut`.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the `BytesMut` has a length of 0.",2,[[["self"]],["bool"]]],[11,"capacity","","Returns the number of bytes the `BytesMut` can hold without reallocating.",2,[[["self"]],["usize"]]],[11,"freeze","","Converts `self` into an immutable `Bytes`.",2,[[["self"]],["bytes"]]],[11,"split_off","","Splits the bytes into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"take","","Removes the bytes from the current view, returning them in a new `BytesMut` handle.",2,[[["self"]],["bytesmut"]]],[11,"split_to","","Splits the buffer into two at the given index.",2,[[["self"],["usize"]],["bytesmut"]]],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,[[["self"],["usize"]]]],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",2,[[["self"],["usize"]]]],[11,"clear","","Clears the buffer, removing all data.",2,[[["self"]]]],[11,"resize","","Resizes the buffer so that `len` is equal to `new_len`.",2,[[["self"],["usize"],["u8"]]]],[11,"set_len","","Sets the length of the buffer.",2,[[["self"],["usize"]]]],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the given `BytesMut`.",2,[[["self"],["usize"]]]],[11,"extend_from_slice","","Appends given bytes to this object.",2,N],[11,"unsplit","","Combine splitted BytesMut objects back as contiguous.",2,[[["self"],["bytesmut"]]]],[11,"remaining_mut","","",2,[[["self"]],["usize"]]],[11,"advance_mut","","",2,[[["self"],["usize"]]]],[11,"bytes_mut","","",2,N],[11,"put_slice","","",2,N],[11,"put_u8","","",2,[[["self"],["u8"]]]],[11,"put_i8","","",2,[[["self"],["i8"]]]],[11,"into_buf","","",2,N],[11,"as_ref","","",2,N],[11,"deref","","",2,N],[11,"as_mut","","",2,N],[11,"deref_mut","","",2,N],[11,"from","","",2,[[["vec",["u8"]]],["bytesmut"]]],[11,"from","","",2,[[["string"]],["bytesmut"]]],[11,"from","","",2,N],[11,"from","","",2,[[["str"]],["bytesmut"]]],[11,"from","","",2,[[["bytes"]],["bytesmut"]]],[11,"eq","","",2,[[["self"],["bytesmut"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["bytesmut"]],["option",["ordering"]]]],[11,"cmp","","",2,[[["self"],["bytesmut"]],["ordering"]]],[11,"default","","",2,[[],["bytesmut"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"hash","","",2,[[["self"],["h"]]]],[11,"borrow","","",2,N],[11,"borrow_mut","","",2,N],[11,"write_str","","",2,[[["self"],["str"]],["result"]]],[11,"write_fmt","","",2,[[["self"],["arguments"]],["result"]]],[11,"clone","","",2,[[["self"]],["bytesmut"]]],[11,"into_iter","","",2,N],[11,"extend","","",2,[[["self"],["t"]]]],[11,"extend","","",2,[[["self"],["t"]]]],[11,"eq","","",2,N],[11,"partial_cmp","","",2,N],[11,"eq","","",2,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,N],[11,"partial_cmp","","",1,N],[11,"eq","","",1,[[["self"],["str"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["str"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["vec"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["vec"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["string"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["string"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["t"]],["option",["ordering"]]]],[11,"eq","","",1,[[["self"],["bytesmut"]],["bool"]]],[11,"eq","","",2,[[["self"],["bytes"]],["bool"]]],[8,"Buf","","Read bytes from a buffer.",N,N],[10,"remaining","","Returns the number of bytes between the current position and the end of the buffer.",8,[[["self"]],["usize"]]],[10,"bytes","","Returns a slice starting at the current position and of length between 0 and `Buf::remaining()`.",8,N],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[10,"advance","bytes","Advance the internal cursor of the Buf",8,[[["self"],["usize"]]]],[11,"has_remaining","bytes::buf","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[8,"BufMut","bytes","A trait for values that provide sequential write access to bytes.",N,N],[10,"remaining_mut","","Returns the number of bytes that can be written from the current position until the end of the buffer is reached.",9,[[["self"]],["usize"]]],[10,"advance_mut","","Advance the internal cursor of the BufMut",9,[[["self"],["usize"]]]],[11,"has_remaining_mut","bytes::buf","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[10,"bytes_mut","bytes","Returns a mutable slice starting at the current BufMut position and of length between 0 and `BufMut::remaining_mut()`.",9,N],[11,"bytes_vec_mut","bytes::buf","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]],[8,"IntoBuf","bytes","Conversion into a `Buf`",N,N],[16,"Buf","","The `Buf` type that `self` is being converted into",11,N],[10,"into_buf","","Creates a `Buf` from a value.",11,N],[11,"clone","","",12,[[["self"]],["bigendian"]]],[11,"clone","","",13,[[["self"]],["littleendian"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","","",12,[[["self"],["bigendian"]],["option",["ordering"]]]],[11,"partial_cmp","","",13,[[["self"],["littleendian"]],["option",["ordering"]]]],[11,"cmp","","",12,[[["self"],["bigendian"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["littleendian"]],["ordering"]]],[11,"default","","",13,[[],["littleendian"]]],[11,"default","","",12,[[],["bigendian"]]],[11,"hash","","",12,N],[11,"hash","","",13,N],[11,"read_u16","","",13,N],[11,"read_u32","","",13,N],[11,"read_u64","","",13,N],[11,"read_uint","","",13,N],[11,"write_u16","","",13,N],[11,"write_u32","","",13,N],[11,"write_u64","","",13,N],[11,"write_uint","","",13,N],[11,"read_u16_into","","",13,N],[11,"read_u32_into","","",13,N],[11,"read_u64_into","","",13,N],[11,"write_u16_into","","",13,N],[11,"write_u32_into","","",13,N],[11,"write_u64_into","","",13,N],[11,"from_slice_u16","","",13,N],[11,"from_slice_u32","","",13,N],[11,"from_slice_u64","","",13,N],[11,"from_slice_f32","","",13,N],[11,"from_slice_f64","","",13,N],[11,"read_u16","","",12,N],[11,"read_u32","","",12,N],[11,"read_u64","","",12,N],[11,"read_uint","","",12,N],[11,"write_u16","","",12,N],[11,"write_u32","","",12,N],[11,"write_u64","","",12,N],[11,"write_uint","","",12,N],[11,"read_u16_into","","",12,N],[11,"read_u32_into","","",12,N],[11,"read_u64_into","","",12,N],[11,"write_u16_into","","",12,N],[11,"write_u32_into","","",12,N],[11,"write_u64_into","","",12,N],[11,"from_slice_u16","","",12,N],[11,"from_slice_u32","","",12,N],[11,"from_slice_u64","","",12,N],[11,"from_slice_f32","","",12,N],[11,"from_slice_f64","","",12,N],[11,"eq","","",12,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",13,[[["self"],["littleendian"]],["bool"]]],[11,"bytes_vec","bytes::buf","Fills `dst` with potentially multiple slices starting at `self`'s current position.",8,N],[11,"has_remaining","","Returns true if there are any more bytes to consume",8,[[["self"]],["bool"]]],[11,"copy_to_slice","","Copies bytes from `self` into `dst`.",8,N],[11,"get_u8","","Gets an unsigned 8 bit integer from `self`.",8,[[["self"]],["u8"]]],[11,"get_i8","","Gets a signed 8 bit integer from `self`.",8,[[["self"]],["i8"]]],[11,"get_u16_be","","Gets an unsigned 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_u16_le","","Gets an unsigned 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u16"]]],[11,"get_i16_be","","Gets a signed 16 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_i16_le","","Gets a signed 16 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i16"]]],[11,"get_u32_be","","Gets an unsigned 32 bit integer from `self` in the big-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_u32_le","","Gets an unsigned 32 bit integer from `self` in the little-endian byte order.",8,[[["self"]],["u32"]]],[11,"get_i32_be","","Gets a signed 32 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_i32_le","","Gets a signed 32 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i32"]]],[11,"get_u64_be","","Gets an unsigned 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_u64_le","","Gets an unsigned 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["u64"]]],[11,"get_i64_be","","Gets a signed 64 bit integer from `self` in big-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_i64_le","","Gets a signed 64 bit integer from `self` in little-endian byte order.",8,[[["self"]],["i64"]]],[11,"get_uint_be","","Gets an unsigned n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_uint_le","","Gets an unsigned n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["u64"]]],[11,"get_int_be","","Gets a signed n-byte integer from `self` in big-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_int_le","","Gets a signed n-byte integer from `self` in little-endian byte order.",8,[[["self"],["usize"]],["i64"]]],[11,"get_f32_be","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f32_le","","Gets an IEEE754 single-precision (4 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f32"]]],[11,"get_f64_be","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in big-endian byte order.",8,[[["self"]],["f64"]]],[11,"get_f64_le","","Gets an IEEE754 double-precision (8 bytes) floating point number from `self` in little-endian byte order.",8,[[["self"]],["f64"]]],[11,"collect","","Transforms a `Buf` into a concrete buffer.",8,[[["self"]],["b"]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes from `self`.",8,[[["self"],["usize"]],["take"]]],[11,"chain","","Creates an adaptor which will chain this buffer with another.",8,[[["self"],["u"]],["chain"]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Buf`.",8,[[["self"]],["self"]]],[11,"reader","","Creates an adaptor which implements the `Read` trait for `self`.",8,[[["self"]],["reader"]]],[11,"iter","","Returns an iterator over the bytes contained by the buffer.",8,[[["self"]],["iter"]]],[11,"has_remaining_mut","","Returns true if there is space in `self` for more bytes.",9,[[["self"]],["bool"]]],[11,"bytes_vec_mut","","Fills `dst` with potentially multiple mutable slices starting at `self`'s current position.",9,N],[11,"put","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,[[["self"],["t"]]]],[11,"put_slice","","Transfer bytes into `self` from `src` and advance the cursor by the number of bytes written.",9,N],[11,"put_u8","","Writes an unsigned 8 bit integer to `self`.",9,[[["self"],["u8"]]]],[11,"put_i8","","Writes a signed 8 bit integer to `self`.",9,[[["self"],["i8"]]]],[11,"put_u16_be","","Writes an unsigned 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_u16_le","","Writes an unsigned 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["u16"]]]],[11,"put_i16_be","","Writes a signed 16 bit integer to `self` in big-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_i16_le","","Writes a signed 16 bit integer to `self` in little-endian byte order.",9,[[["self"],["i16"]]]],[11,"put_u32_be","","Writes an unsigned 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_u32_le","","Writes an unsigned 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["u32"]]]],[11,"put_i32_be","","Writes a signed 32 bit integer to `self` in big-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_i32_le","","Writes a signed 32 bit integer to `self` in little-endian byte order.",9,[[["self"],["i32"]]]],[11,"put_u64_be","","Writes an unsigned 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_u64_le","","Writes an unsigned 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["u64"]]]],[11,"put_i64_be","","Writes a signed 64 bit integer to `self` in the big-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_i64_le","","Writes a signed 64 bit integer to `self` in little-endian byte order.",9,[[["self"],["i64"]]]],[11,"put_uint_be","","Writes an unsigned n-byte integer to `self` in big-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_uint_le","","Writes an unsigned n-byte integer to `self` in the little-endian byte order.",9,[[["self"],["u64"],["usize"]]]],[11,"put_int_be","","Writes a signed n-byte integer to `self` in big-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_int_le","","Writes a signed n-byte integer to `self` in little-endian byte order.",9,[[["self"],["i64"],["usize"]]]],[11,"put_f32_be","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f32_le","","Writes  an IEEE754 single-precision (4 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f32"]]]],[11,"put_f64_be","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in big-endian byte order.",9,[[["self"],["f64"]]]],[11,"put_f64_le","","Writes  an IEEE754 double-precision (8 bytes) floating point number to `self` in little-endian byte order.",9,[[["self"],["f64"]]]],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `BufMut`.",9,[[["self"]],["self"]]],[11,"writer","","Creates an adaptor which implements the `Write` trait for `self`.",9,[[["self"]],["writer"]]]],"paths":[[8,"ByteOrder"],[3,"Bytes"],[3,"BytesMut"],[3,"Chain"],[3,"Iter"],[3,"Reader"],[3,"Take"],[3,"Writer"],[8,"Buf"],[8,"BufMut"],[8,"FromBuf"],[8,"IntoBuf"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["clap"]={"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",N,N],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",N,N],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",N,N],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",N,N],[3,"SubCommand","","The abstract representation of a command line subcommand.",N,N],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",N,N],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",N,N],[3,"Error","","Command Line Argument Parser Error",N,N],[12,"message","","Formatted error message",0,N],[12,"kind","","The type of error",0,N],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,N],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]",N,N],[13,"Required","","The argument must be used",1,N],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,N],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,N],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,N],[13,"Hidden","","The argument should not be shown in help text",1,N],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,N],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimiter",1,N],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,N],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,N],[13,"HidePossibleValues","","Hides the possible values from the help string",1,N],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,N],[13,"RequireEquals","","Require options use `--option=val` syntax",1,N],[13,"Last","","Specifies that the arg is the last positional argument and may be accessed early via `--` syntax",1,N],[13,"HideDefaultValue","","Hides the default value from the help string",1,N],[13,"CaseInsensitive","","Makes `Arg::possible_values` case insensitive",1,N],[13,"HideEnvValues","","Hides ENV values in the help message",1,N],[13,"HiddenShortHelp","","The argument should not be shown in short help text",1,N],[13,"HiddenLongHelp","","The argument should not be shown in long help text",1,N],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",N,N],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should not be treated as an error. This is the default behavior of `clap`.",2,N],[13,"AllArgsOverrideSelf","","Essentially sets [`Arg::overrides_with(\"itself\")`] for all arguments.",2,N],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument values, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,N],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,N],[13,"AllowMissingPositional","","Allows one to implement two styles of CLIs where positionals can be used out of order.",2,N],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,N],[13,"ArgsNegateSubcommands","","Specifies that use of a valid [argument] negates [subcommands] being used after. By default `clap` allows arguments between subcommands such as `<cmd> [cmd_args] <cmd2> [cmd2_args] <cmd3> [cmd3_args]`. This setting disables that functionality and says that arguments can only follow the final subcommand. For instance using this setting makes only the following invocations possible:",2,N],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,N],[13,"ColoredHelp","","Uses colorized help messages.",2,N],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,N],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,N],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,N],[13,"DontCollapseArgsInUsage","","Disables the automatic collapsing of positional args into `[ARGS]` inside the usage string",2,N],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,N],[13,"DisableHelpSubcommand","","Disables the `help` subcommand",2,N],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application does have a version flag)",2,N],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,N],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independent version strings from their parents.)",2,N],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,N],[13,"HidePossibleValuesInHelp","","Tells `clap` not to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,N],[13,"InferSubcommands","","Tries to match unknown args to partial [`subcommands`] or their [aliases]. For example to match a subcommand named `test`, one could use `t`, `te`, `tes`, and `test`.",2,N],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,N],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,N],[13,"PropagateGlobalValuesDown","","DEPRECATED: This setting is no longer required in order to propagate values up or down",2,N],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,N],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,N],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,N],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,N],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,N],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,N],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands do have version flags.)",2,N],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,N],[4,"ErrorKind","","Command line argument parser kind of error",N,N],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,N],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,N],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,N],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'suggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,N],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,N],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,N],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,N],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,N],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,N],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,N],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,N],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,N],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,N],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,N],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,N],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,N],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,N],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,N],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,N],[13,"Format","","Represents a [Format error] (which is a part of [`Display`]). Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,N],[4,"Shell","","Describes which shell to produce a completions file for",N,N],[13,"Bash","","Generates a .bash completion file for the Bourne Again SHell (BASH)",4,N],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,N],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,N],[13,"PowerShell","","Generates a completion file for PowerShell",4,N],[13,"Elvish","","Generates a completion file for Elvish",4,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["appsettings"]],["bool"]]],[11,"clone","","",2,[[["self"]],["appsettings"]]],[11,"from_str","","",2,[[["str"]],["result"]]],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,[[["s"]],["self"]]],[11,"get_name","","Get the name of the app",5,[[["self"]],["str"]]],[11,"get_bin_name","","Get the name of the binary",5,[[["self"]],["option",["str"]]]],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,[[["s"]],["self"]]],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,[[["self"],["s"]],["self"]]],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely necessary, such as when the binary name for your application is misleading, or perhaps not how the user should invoke your program.",5,[[["self"],["s"]],["self"]]],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information with `-h`.",5,[[["self"],["s"]],["self"]]],[11,"long_about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"name","","Sets the program's name. This will be displayed when displaying help information.",5,[[["self"],["s"]],["self"]]],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed after the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,[[["self"],["s"]],["self"]]],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed before the auto-generated help information. This is often used for header information.",5,[[["self"],["s"]],["self"]]],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information with `-V`.",5,[[["self"],["s"]],["self"]]],[11,"long_version","","Sets a string of the version number to be displayed when displaying version or help information with `--version`.",5,[[["self"],["s"]],["self"]]],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,[[["self"],["s"]],["self"]]],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,[[["self"],["s"]],["self"]]],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"help_message","","Sets the help text for the auto-generated `help` argument.",5,[[["self"],["s"]],["self"]]],[11,"version_message","","Sets the help text for the auto-generated `version` argument.",5,[[["self"],["s"]],["self"]]],[11,"template","","Sets the help template to be used, overriding the default format.",5,[[["self"],["s"]],["self"]]],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,[[["self"],["appsettings"]],["self"]]],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,N],[11,"global_setting","","Enables a single setting that is propagated down through all child [`SubCommand`]s.",5,[[["self"],["appsettings"]],["self"]]],[11,"global_settings","","Enables multiple settings which are propagated down through all child [`SubCommand`]s.",5,N],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,[[["self"],["appsettings"]],["self"]]],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,N],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,[[["self"],["usize"]],["self"]]],[11,"arg","","Adds an [argument] to the list of valid possibilities.",5,[[["self"],["a"]],["self"]]],[11,"args","","Adds multiple [arguments] to the list of valid possibilities",5,N],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,[[["self"],["str"]],["self"]]],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,N],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,N],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and only one) argument from that group must be present at runtime.",5,[[["self"],["arggroup"]],["self"]]],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,N],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilities. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,[[["self"],["app"]],["self"]]],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilities by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,[[["self"],["i"]],["self"]]],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values are allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,[[["self"],["usize"]],["self"]]],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `-h` to request the help message",5,[[["self"]],["clapresult"]]],[11,"print_long_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`] using the same method as if someone ran `--help` to request the help message",5,[[["self"]],["clapresult"]]],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `-h`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_help","","Writes the full help message to the user to a [`io::Write`] object in the same method as if the user ran `--help`",5,[[["self"],["w"]],["clapresult"]]],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object as if the user ran `-V`.",5,[[["self"],["w"]],["clapresult"]]],[11,"write_long_version","","Writes the version message to the user to a [`io::Write`] object",5,[[["self"],["w"]],["clapresult"]]],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,[[["self"],["s"],["shell"],["t"]]]],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,[[["self"],["s"],["shell"],["w"]]]],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,[[["self"]],["argmatches"]]],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,[[["self"]],["clapresult",["argmatches"]]]],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,[[["self"],["i"]],["argmatches"]]],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which does consume `self`.",5,[[["self"],["i"]],["clapresult",["argmatches"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"default","","",6,[[],["arg"]]],[11,"clone","","",6,[[["self"]],["arg"]]],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,[[["str"]],["self"]]],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,[[["str"]],["self"]]],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,[[["self"],["s"]],["self"]]],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,[[["self"],["str"]],["self"]]],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,[[["self"],["s"]],["self"]]],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,N],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,[[["self"],["s"]],["self"]]],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,N],[11,"help","","Sets the short help text of the argument that will be displayed to the user when they print the help information with `-h`. Typically, this is a short (one line) description of the arg.",6,[[["self"],["str"]],["self"]]],[11,"long_help","","Sets the long help text of the argument that will be displayed to the user when they print the help information with `--help`. Typically this a more detailed (multi-line) message that describes the arg.",6,[[["self"],["str"]],["self"]]],[11,"last","","Specifies that this arg is the last, or final, positional argument (i.e. has the highest index) and is only able to be accessed via the `--` syntax (i.e. `$ prog args -- last_arg`). Even, if no other arguments are left to parse, if the user omits the `--` syntax they will receive an [`UnknownArgument`] error. Setting an argument to `.last(true)` also allows one to access this arg early using the `--` syntax. Accessing an arg early, even with the `--` syntax is otherwise not possible.",6,[[["self"],["bool"]],["self"]]],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"require_equals","","Requires that options use the `--option=val` syntax (i.e. an equals between the option and associated value) Default: `false`",6,[[["self"],["bool"]],["self"]]],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,[[["self"],["bool"]],["self"]]],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,[[["self"],["str"]],["self"]]],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,N],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless at least one of these other arguments are present).",6,N],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,N],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,[[["self"],["str"]],["self"]]],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime last \"wins\")",6,N],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument must be present.",6,[[["self"],["str"]],["self"]]],[11,"requires_if","","Allows a conditional requirement. The requirement will only become valid if this arg's value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"requires_ifs","","Allows multiple conditional requirements. The requirement will only become valid if this arg's value equals `val`.",6,N],[11,"required_if","","Allows specifying that an argument is [required] conditionally. The requirement will only become valid if the specified `arg`'s value equals `val`.",6,[[["self"],["str"],["str"]],["self"]]],[11,"required_ifs","","Allows specifying that an argument is [required] based on multiple conditions. The conditions are set up in a `(arg, val)` style tuple. The requirement will only become valid if one of the specified `arg`'s value equals it's corresponding `val`.",6,N],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments must be present.",6,N],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,[[["self"],["bool"]],["self"]]],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,[[["self"],["bool"]],["self"]]],[11,"hide_default_value","","Specifies if the default value of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show default value)",6,[[["self"],["bool"]],["self"]]],[11,"index","","Specifies the index of a positional argument starting at 1.",6,[[["self"],["u64"]],["self"]]],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,[[["self"],["bool"]],["self"]]],[11,"value_terminator","","Specifies a value that stops parsing multiple values of a give argument. By default when one sets [`multiple(true)`] on an argument, clap will continue parsing values for that argument until it reaches another valid argument, or one of the other more specific settings for multiple values is used (such as [`min_values`], [`max_values`] or [`number_of_values`]).",6,[[["self"],["str"]],["self"]]],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,[[["self"],["bool"]],["self"]]],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,[[["self"],["bool"]],["self"]]],[11,"hidden","","Hides an argument from help message output.",6,[[["self"],["bool"]],["self"]]],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,N],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,[[["self"],["str"]],["self"]]],[11,"case_insensitive","","When used with [`Arg::possible_values`] it allows the argument value to pass validation even if the case differs from that of the specified `possible_value`.",6,[[["self"],["bool"]],["self"]]],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,[[["self"],["str"]],["self"]]],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,N],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,[[["self"],["f"]],["self"]]],[11,"validator_os","","Works identically to Validator but is intended to be used with values that could contain non UTF-8 formatted strings.",6,[[["self"],["f"]],["self"]]],[11,"max_values","","Specifies the maximum number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,[[["self"],["u64"]],["self"]]],[11,"min_values","","Specifies the minimum number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,[[["self"],["u64"]],["self"]]],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,[[["self"],["bool"]],["self"]]],[11,"require_delimiter","","Specifies that multiple values may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,[[["self"],["bool"]],["self"]]],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,[[["self"],["str"]],["self"]]],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are not used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,N],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is not used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,[[["self"],["str"]],["self"]]],[11,"default_value","","Specifies the value of the argument when not specified at runtime.",6,[[["self"],["str"]],["self"]]],[11,"default_value_os","","Provides a default value in the exact same manner as [`Arg::default_value`] only using [`OsStr`]s instead. [`Arg::default_value`]: ./struct.Arg.html#method.default_value [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["osstr"]],["self"]]],[11,"default_value_if","","Specifies the value of the argument if `arg` has been used at runtime. If `val` is set to `None`, `arg` only needs to be present. If `val` is set to `\"some-val\"` then `arg` must be present at runtime and have the value `val`.",6,[[["self"],["str"],["option",["str"]],["str"]],["self"]]],[11,"default_value_if_os","","Provides a conditional default value in the exact same manner as [`Arg::default_value_if`] only using [`OsStr`]s instead. [`Arg::default_value_if`]: ./struct.Arg.html#method.default_value_if [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,[[["self"],["str"],["option",["osstr"]],["osstr"]],["self"]]],[11,"default_value_ifs","","Specifies multiple values and conditions in the same manner as [`Arg::default_value_if`]. The method takes a slice of tuples in the `(arg, Option<val>, default)` format.",6,N],[11,"default_value_ifs_os","","Provides multiple conditional default values in the exact same manner as [`Arg::default_value_ifs`] only using [`OsStr`]s instead. [`Arg::default_value_ifs`]: ./struct.Arg.html#method.default_value_ifs [`OsStr`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html",6,N],[11,"env","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment, if available. If it is not present in the environment, then default rules will apply.",6,[[["self"],["str"]],["self"]]],[11,"env_os","","Specifies that if the value is not passed in as an argument, that it should be retrieved from the environment if available in the exact same manner as [`Arg::env`] only using [`OsStr`]s instead.",6,[[["self"],["osstr"]],["self"]]],[11,"hide_env_values","","@TODO @p2 @docs @release: write docs",6,[[["self"],["bool"]],["self"]]],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,[[["self"],["bool"]],["self"]]],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values are allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,[[["self"],["usize"]],["self"]]],[11,"raw","","Indicates that all parameters passed after this should not be parsed individually, but rather passed in their entirety. It is worth noting that setting this requires all values to come after a `--` to indicate they should all be captured. For example:",6,[[["self"],["bool"]],["self"]]],[11,"hidden_short_help","","Hides an argument from short help message output.",6,[[["self"],["bool"]],["self"]]],[11,"hidden_long_help","","Hides an argument from long help message output.",6,[[["self"],["bool"]],["self"]]],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["bool"]]],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,[[["self"],["argsettings"]],["self"]]],[11,"from","","",6,[[["arg"]],["self"]]],[11,"eq","","",6,[[["self"],["arg"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["argmatches"]]],[11,"default","","",7,[[],["self"]]],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,[[["self"],["s"]],["option",["str"]]]],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["cow"]]]],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osstr"]]]],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,[[["self"],["s"]],["option",["values"]]]],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,[[["self"],["s"]],["option",["vec"]]]],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,[[["self"],["s"]],["option",["osvalues"]]]],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,[[["self"],["s"]],["bool"]]],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,[[["self"],["s"]],["u64"]]],[11,"index_of","","Gets the starting index of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["usize"]]]],[11,"indices_of","","Gets all indices of the argument in respect to all other arguments. Indices are similar to argv indices, but are not exactly 1:1.",7,[[["self"],["s"]],["option",["indices"]]]],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,[[["self"],["s"]],["option",["argmatches"]]]],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,[[["self"]],["option",["str"]]]],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,N],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,[[["self"]],["str"]]],[11,"clone","","",8,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option",["str"]]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option",["str"]]]],[11,"default","","",8,[[],["self"]]],[11,"clone","","",9,[[["self"]],["osvalues"]]],[11,"next","","",9,[[["self"]],["option",["osstr"]]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option",["osstr"]]]],[11,"default","","",9,[[],["self"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["subcommand"]]],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,[[["str"]],["app"]]],[11,"default","","",11,[[],["arggroup"]]],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,[[["str"]],["self"]]],[11,"arg","","Adds an [argument] to this group by name",11,[[["self"],["str"]],["self"]]],[11,"args","","Adds multiple [arguments] to this group by name",11,N],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,[[["self"],["bool"]],["self"]]],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group must be present at runtime (unless conflicting with another argument).",11,[[["self"],["bool"]],["self"]]],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,[[["self"],["str"]],["self"]]],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,N],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,[[["self"],["str"]],["self"]]],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must not be present when one of the arguments from this group are used.",11,N],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"from","","",11,[[["arggroup"]],["self"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["argsettings"]],["bool"]]],[11,"clone","","",1,[[["self"]],["argsettings"]]],[11,"from_str","","",1,[[["str"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["errorkind"]]],[11,"eq","","",3,[[["self"],["errorkind"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"use_stderr","","Should the message be written to `stdout` or not",0,[[["self"]],["bool"]]],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,N],[11,"with_description","","Create an error with a custom description.",0,[[["str"],["errorkind"]],["self"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["shell"]]],[11,"variants","","A list of possible variants in `&'static str` form",4,N],[11,"from_str","","",4,[[["str"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[6,"Result","","Short hand for [`Result`] type",N,N],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",N,N],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",N,N],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",N,N],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",N,N],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",N,N],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",N,N],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as `MAJOR.MINOR.PATCH_PKGVERSION_PRE`",N,N],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time in the form: `\"author1 lastname <author1@example.com>:author2 lastname <author2@example.com>\"`",N,N],[14,"crate_description","","Allows you to pull the description from your Cargo.toml at compile time.",N,N],[14,"crate_name","","Allows you to pull the name from your Cargo.toml at compile time.",N,N],[14,"app_from_crate","","Allows you to build the `App` instance from your Cargo.toml at compile time.",N,N],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the associated parsing runtime cost.",N,N]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["config"]={"doc":"Config organizes hierarchical or layered configurations for Rust applications.","items":[[3,"Config","config","A prioritized configuration repository. It maintains a set of configuration sources, fetches values to populate those, and provides them according to the source's priority.",N,N],[12,"cache","","Root of the cached configuration.",0,N],[3,"Environment","","",N,N],[3,"File","","",N,N],[3,"Value","","A configuration value.",N,N],[12,"kind","","Underlying kind of the configuration value.",1,N],[4,"ConfigError","","Represents all possible errors that can occur when working with configuration.",N,N],[13,"Frozen","","Configuration is frozen and no further mutations can be made.",2,N],[13,"NotFound","","Configuration property was not found",2,N],[13,"PathParse","","Configuration path could not be parsed.",2,N],[13,"FileParse","","Configuration could not be parsed from file.",2,N],[12,"uri","config::ConfigError","The URI used to access the file (if not loaded from a string). Example: `/path/to/config.json`",2,N],[12,"cause","","The captured error from attempting to parse the file in its desired format. This is the actual error object from the library used for the parsing.",2,N],[13,"Type","config","Value could not be converted into the requested type.",2,N],[12,"origin","config::ConfigError","The URI that references the source that the value came from. Example: `/path/to/config.json` or `Environment` or `etcd://localhost`",2,N],[12,"unexpected","","What we found when parsing the value",2,N],[12,"expected","","What was expected when parsing the value",2,N],[12,"key","","The key in the configuration hash of this value (if available where the error is generated).",2,N],[13,"Message","config","Custom message",2,N],[13,"Foreign","","Unadorned error from a foreign origin.",2,N],[4,"FileFormat","","",N,N],[13,"Toml","","TOML (parsed with toml)",3,N],[13,"Json","","JSON (parsed with serde_json)",3,N],[13,"Yaml","","YAML (parsed with yaml_rust)",3,N],[13,"Hjson","","HJSON (parsed with serde_hjson)",3,N],[13,"Ini","","INI (parsed with rust_ini)",3,N],[11,"default","","",0,[[],["config"]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[],["self"]]],[11,"merge","","Merge in a configuration property source.",0,[[["self"],["t"]],["result",["config","configerror"]]]],[11,"refresh","","Refresh the configuration cache with fresh data from added sources.",0,[[["self"]],["result",["config","configerror"]]]],[11,"set_default","","",0,[[["self"],["str"],["t"]],["result",["config","configerror"]]]],[11,"set","","",0,[[["self"],["str"],["t"]],["result",["config","configerror"]]]],[11,"get","","",0,[[["self"],["str"]],["result",["configerror"]]]],[11,"get_str","","",0,[[["self"],["str"]],["result",["string","configerror"]]]],[11,"get_int","","",0,[[["self"],["str"]],["result",["i64","configerror"]]]],[11,"get_float","","",0,[[["self"],["str"]],["result",["f64","configerror"]]]],[11,"get_bool","","",0,[[["self"],["str"]],["result",["bool","configerror"]]]],[11,"get_table","","",0,[[["self"],["str"]],["result",["hashmap","configerror"]]]],[11,"get_array","","",0,[[["self"],["str"]],["result",["vec","configerror"]]]],[11,"try_into","","Attempt to deserialize the entire configuration into the requested type.",0,[[["self"]],["result",["configerror"]]]],[11,"try_from","","Attempt to deserialize the entire configuration into the requested type.",0,[[["t"]],["result",["configerror"]]]],[11,"deserialize","","",0,[[["self"]],["result",["configerror"]]]],[11,"clone_into_box","","",0,[[["self"]],["box",["source"]]]],[11,"collect","","",0,[[["self"]],["result",["hashmap","configerror"]]]],[11,"deserialize_any","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_bool","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i8","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i16","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i32","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i64","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u8","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u16","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u32","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u64","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f32","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f64","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_str","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_string","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_option","","",1,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_newtype_struct","","",1,[[["self"],["str"],["v"]],["result",["configerror"]]]],[11,"deserialize_char","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",1,N],[11,"deserialize_unit","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",1,N],[11,"deserialize_identifier","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",1,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",1,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",1,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple","","",1,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["configerror"]]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"clone","","",4,[[["self"]],["environment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","",4,[[],["self"]]],[11,"with_prefix","","",4,[[["str"]],["self"]]],[11,"prefix","","",4,[[["self"],["str"]],["self"]]],[11,"separator","","",4,[[["self"],["str"]],["self"]]],[11,"ignore_empty","","",4,[[["self"],["bool"]],["self"]]],[11,"default","","",4,[[],["environment"]]],[11,"clone_into_box","","",4,[[["self"]],["box",["source"]]]],[11,"collect","","",4,[[["self"]],["result",["hashmap","configerror"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["error"]]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"custom","","",2,[[["t"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["fileformat"]]],[11,"eq","","",3,[[["self"],["fileformat"]],["bool"]]],[11,"hash","","",3,N],[11,"clone","","",5,[[["self"]],["file"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",5,[[["str"],["fileformat"]],["self"]]],[11,"new","","",5,[[["str"],["fileformat"]],["self"]]],[11,"with_name","","Given the basename of a file, will attempt to locate a file by setting its extension to a registered format.",5,[[["str"]],["self"]]],[11,"from","","",5,[[["path"]],["self"]]],[11,"from","","",5,[[["pathbuf"]],["self"]]],[11,"format","","",5,[[["self"],["fileformat"]],["self"]]],[11,"required","","",5,[[["self"],["bool"]],["self"]]],[11,"clone_into_box","","",5,[[["self"]],["box",["source"]]]],[11,"collect","","",5,[[["self"]],["result",["hashmap","configerror"]]]],[11,"default","","",1,[[],["value"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["value"]]],[11,"eq","","",1,[[["self"],["value"]],["bool"]]],[11,"ne","","",1,[[["self"],["value"]],["bool"]]],[11,"new","","Create a new value instance that will remember its source uri.",1,[[["option",["string"]],["v"]],["self"]]],[11,"try_into","","Attempt to deserialize this value into the requested type.",1,[[["self"]],["result",["configerror"]]]],[11,"into_bool","","Returns `self` as a bool, if possible.",1,[[["self"]],["result",["bool","configerror"]]]],[11,"into_int","","Returns `self` into an i64, if possible.",1,[[["self"]],["result",["i64","configerror"]]]],[11,"into_float","","Returns `self` into a f64, if possible.",1,[[["self"]],["result",["f64","configerror"]]]],[11,"into_str","","Returns `self` into a str, if possible.",1,[[["self"]],["result",["string","configerror"]]]],[11,"into_array","","Returns `self` into an array, if possible",1,[[["self"]],["result",["vec","configerror"]]]],[11,"into_table","","If the `Value` is a Table, returns the associated Map.",1,[[["self"]],["result",["hashmap","configerror"]]]],[11,"deserialize","","",1,[[["d"]],["result",["value"]]]],[11,"from","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[8,"Source","","Describes a generic source of configuration properties.",N,N],[10,"clone_into_box","","",6,[[["self"]],["box",["source"]]]],[10,"collect","","Collect all configuration properties available from this source and return a HashMap.",6,[[["self"]],["result",["hashmap","configerror"]]]],[11,"collect_to","","",6,[[["self"],["value"]],["result",["configerror"]]]],[11,"collect_to","","",6,[[["self"],["value"]],["result",["configerror"]]]]],"paths":[[3,"Config"],[3,"Value"],[4,"ConfigError"],[4,"FileFormat"],[3,"Environment"],[3,"File"],[8,"Source"]]};
searchIndex["crossbeam_utils"]={"doc":"","items":[[3,"CachePadded","crossbeam_utils","Pads `T` to the length of a cache line.",N,N],[11,"clone","","",0,[[["self"]],["cachepadded"]]],[11,"default","","",0,[[],["cachepadded"]]],[11,"new","","Pads a value to the length of a cache line.",0,[[["t"]],["cachepadded"]]],[11,"deref","","",0,[[["self"]],["t"]]],[11,"deref_mut","","",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["t"]],["self"]]],[0,"thread","","",N,N],[3,"Scope","crossbeam_utils::thread","",N,N],[3,"ScopedJoinHandle","","A handle to a scoped thread",N,N],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",N,N],[5,"spawn_unchecked","","Like `std::thread::spawn`, but without the closure bounds.",N,[[["f"]],["joinhandle"]]],[5,"builder_spawn_unchecked","","Like `std::thread::Builder::spawn`, but without the closure bounds.",N,[[["builder"],["f"]],["result",["joinhandle"]]]],[5,"scope","","Create a new `scope`, for deferred destructors.",N,[[["f"]],["r"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"defer","","Schedule code to be executed when exiting the scope.",1,[[["self"],["f"]]]],[11,"spawn","","Create a scoped thread.",1,[[["self"],["f"]],["scopedjoinhandle"]]],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",1,[[["self"]],["scopedthreadbuilder"]]],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",3,[[["self"],["string"]],["scopedthreadbuilder"]]],[11,"stack_size","","Sets the size of the stack for the new thread.",3,[[["self"],["usize"]],["scopedthreadbuilder"]]],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",3,[[["self"],["f"]],["result",["scopedjoinhandle"]]]],[11,"join","","Join the scoped thread, returning the result it produced.",2,[[["self"]],["result"]]],[11,"thread","","Get the underlying thread handle.",2,[[["self"]],["thread"]]],[11,"drop","","",1,[[["self"]]]],[8,"AtomicConsume","crossbeam_utils","Trait which allows reading from an atomic type with \"consume\" ordering.",N,N],[16,"Val","","Type returned by `load_consume`.",4,N],[10,"load_consume","","Loads a value from the atomic using a \"consume\" memory ordering.",4,N]],"paths":[[3,"CachePadded"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"],[8,"AtomicConsume"]]};
searchIndex["ds2"]={"doc":"","items":[[0,"dataflow","ds2","",N,N],[0,"topology","ds2::dataflow","",N,N],[3,"Operator","ds2::dataflow::topology","",N,N],[12,"id","","",0,N],[12,"name","","",0,N],[12,"instances","","",0,N],[12,"rates","","",0,N],[12,"optimal_parallelism_per_epoch","","",0,N],[3,"Flow","","",N,N],[3,"Topology","","",N,N],[12,"logical_graph","","",1,N],[12,"dictionary","","",1,N],[12,"channel_dictionary","","",1,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","",0,[[["str"],["str"],["operatorinstances"]],["self"]]],[11,"new","","",1,[[],["self"]]],[11,"add_unique_node","","Adds an operator/node to the topology and returns its internal index. If the node exists, it simply returns its index",1,[[["self"],["str"],["str"],["u32"]],["nodeindex"]]],[11,"add_unique_edge","","Adds an edge/channel to the topology if it does not exist",1,[[["self"],["nodeindex"],["nodeindex"]]]],[11,"get_sources_idx","","Returns the internal indexes of all source operators/nodes in the topology",1,[[["self"]],["hashset",["nodeindex"]]]],[11,"clear_rates","","Clears all rate information",1,[[["self"]]]],[11,"clear","","Clears everything",1,[[["self"]]]],[11,"get_configuration","","Retrieves the current dataflow configuration",1,[[["self"],["bool"]],["vec"]]],[11,"set_configuration","","Sets the dataflow configuration",1,[[["self"],["vec"]]]],[11,"print","","Prints the topology to standard output",1,[[["self"]]]],[0,"parse","ds2::dataflow","",N,N],[5,"create_flink_topology","ds2::dataflow::parse","Parses a Flink dataflow from a CSV file and creates a topology",N,[[["path"]],["topology"]]],[5,"read_flink_rates","","Parses rates of Flink operators from a CSV file and stores them in a topology",N,[[["path"],["topology"],["option",["path"]],["bool"]]]],[5,"update_flink_rates","","Parses rates of Flink operators from a CSV file and updates a topology",N,[[["path"],["topology"],["epoch"]]]],[5,"create_heron_topology","","Parses a Heron dataflow from a CSV file and creates a topology",N,[[["path"]],["topology"]]],[5,"read_heron_rates","","Parses rates of Heron operators from a CSV file and stores them in a topology",N,[[["path"],["topology"],["option",["path"]],["option",["path"]],["bool"]]]],[5,"create_timely_topology","","Parses a Timely dataflow from a Timely log file and returns a topology",N,[[["path"]],["topology"]]],[5,"read_timely_rates","","Parses rates of Timely operators from a CSV file and stores them in a topology",N,[[["path"],["topology"],["option",["path"]],["bool"]]]],[5,"set_source_rates","","Sets the true output rates of source operators to the values given in a CSV file",N,[[["path"],["topology"],["bool"]]]],[6,"Timestamp","ds2::dataflow","",N,N],[6,"Epoch","","",N,N],[6,"OperatorId","","",N,N],[6,"ChannelId","","",N,N],[6,"WorkerId","","",N,N],[6,"OperatorInstanceId","","",N,N],[6,"OperatorInstances","","",N,N],[6,"Rate","","",N,N],[6,"Log","","",N,N],[6,"Rates","","",N,N],[0,"policy","ds2","",N,N],[0,"scaling","ds2::policy","",N,N],[5,"as_vec","ds2::policy::scaling","Converts a dataflow configuration `conf` to a vector of pairs `(OperatorId,OperatorInstances)`",N,[[["string"]],["vec"]]],[5,"evaluate_scaling_policy","","Evaluates the scaling model on a topology with collected metrics",N,[[["topology"],["f64"],["f64"],["bool"]],["string"]]],[5,"evaluate_scaling_policy_at_epoch","","Evaluates the scaling model on a topology with collected metrics for a given epoch",N,[[["topology"],["f64"],["f64"],["epoch"],["bool"]],["string"]]]],"paths":[[3,"Operator"],[3,"Topology"]]};
searchIndex["filetime"]={"doc":"Timestamps for files in Rust","items":[[3,"FileTime","filetime","A helper structure to represent a timestamp for a file.",N,N],[5,"set_file_times","","Set the last access and modification times for a file on the filesystem.",N,[[["p"],["filetime"],["filetime"]],["result"]]],[5,"set_symlink_file_times","","Set the last access and modification times for a file on the filesystem. This function does not follow symlink.",N,[[["p"],["filetime"],["filetime"]],["result"]]],[11,"eq","","",0,[[["self"],["filetime"]],["bool"]]],[11,"ne","","",0,[[["self"],["filetime"]],["bool"]]],[11,"cmp","","",0,[[["self"],["filetime"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["filetime"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["filetime"]],["bool"]]],[11,"le","","",0,[[["self"],["filetime"]],["bool"]]],[11,"gt","","",0,[[["self"],["filetime"]],["bool"]]],[11,"ge","","",0,[[["self"],["filetime"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["filetime"]]],[11,"hash","","",0,N],[11,"zero","","Creates a new timestamp representing a 0 time.",0,[[],["filetime"]]],[11,"from_unix_time","","Creates a new instance of `FileTime` with a number of seconds and nanoseconds relative to the Unix epoch, 1970-01-01T00:00:00Z.",0,[[["i64"],["u32"]],["filetime"]]],[11,"from_last_modification_time","","Creates a new timestamp from the last modification time listed in the specified metadata.",0,[[["metadata"]],["filetime"]]],[11,"from_last_access_time","","Creates a new timestamp from the last access time listed in the specified metadata.",0,[[["metadata"]],["filetime"]]],[11,"from_creation_time","","Creates a new timestamp from the creation time listed in the specified metadata.",0,[[["metadata"]],["option",["filetime"]]]],[11,"from_system_time","","Creates a new timestamp from the given SystemTime.",0,[[["systemtime"]],["filetime"]]],[11,"seconds","","Returns the whole number of seconds represented by this timestamp.",0,[[["self"]],["i64"]]],[11,"unix_seconds","","Returns the whole number of seconds represented by this timestamp, relative to the Unix epoch start of January 1, 1970.",0,[[["self"]],["i64"]]],[11,"nanoseconds","","Returns the nanosecond precision of this timestamp.",0,[[["self"]],["u32"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"FileTime"]]};
searchIndex["fixedbitset"]={"doc":"`FixedBitSet` is a simple fixed size set of bits.","items":[[3,"FixedBitSet","fixedbitset","`FixedBitSet` is a simple fixed size set of bits that each can be enabled (1 / true) or disabled (0 / false).",N,N],[3,"Difference","","An iterator producing elements in the difference of two sets.",N,N],[3,"Intersection","","An iterator producing elements in the intersection of two sets.",N,N],[3,"Union","","An iterator producing elements in the union of two sets.",N,N],[3,"Ones","","An  iterator producing the indices of the set bit in a set.",N,N],[8,"IndexRange","","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[11,"start","","Start index (inclusive)",0,[[["self"]],["option"]]],[11,"end","","End index (exclusive)",0,[[["self"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["fixedbitset"]],["bool"]]],[11,"ne","","",1,[[["self"],["fixedbitset"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["fixedbitset"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["fixedbitset"]],["bool"]]],[11,"le","","",1,[[["self"],["fixedbitset"]],["bool"]]],[11,"gt","","",1,[[["self"],["fixedbitset"]],["bool"]]],[11,"ge","","",1,[[["self"],["fixedbitset"]],["bool"]]],[11,"cmp","","",1,[[["self"],["fixedbitset"]],["ordering"]]],[11,"hash","","",1,N],[11,"default","","",1,[[],["fixedbitset"]]],[11,"with_capacity","","Create a new FixedBitSet with a specific number of bits, all initially clear.",1,[[["usize"]],["self"]]],[11,"grow","","Grow capacity to bits, all new bits initialized to zero",1,[[["self"],["usize"]]]],[11,"len","","Return the length of the `FixedBitSet` in bits.",1,[[["self"]],["usize"]]],[11,"contains","","Return true if the bit is enabled in the FixedBitSet, false otherwise.",1,[[["self"],["usize"]],["bool"]]],[11,"clear","","Clear all bits.",1,[[["self"]]]],[11,"insert","","Enable `bit`.",1,[[["self"],["usize"]]]],[11,"put","","Enable `bit`, and return its previous value.",1,[[["self"],["usize"]],["bool"]]],[11,"set","","Panics if bit is out of bounds.",1,[[["self"],["usize"],["bool"]]]],[11,"copy_bit","","Copies boolean value from specified bit to the specified bit.",1,[[["self"],["usize"],["usize"]]]],[11,"count_ones","","Count the number of set bits in the given bit range.",1,[[["self"],["t"]],["usize"]]],[11,"set_range","","Sets every bit in the given range to the given state (`enabled`)",1,[[["self"],["t"],["bool"]]]],[11,"insert_range","","Enables every bit in the given range.",1,[[["self"],["t"]]]],[11,"as_slice","","View the bitset as a slice of `u32` blocks",1,N],[11,"as_mut_slice","","View the bitset as a mutable slice of `u32` blocks. Writing past the bitlength in the last will cause `contains` to return potentially incorrect results for bits past the bitlength.",1,N],[11,"ones","","Iterates over all enabled bits.",1,[[["self"]],["ones"]]],[11,"intersection","","Returns a lazy iterator over the intersection of two `FixedBitSet`s",1,[[["self"],["fixedbitset"]],["intersection"]]],[11,"union","","Returns a lazy iterator over the union of two `FixedBitSet`s.",1,[[["self"],["fixedbitset"]],["union"]]],[11,"difference","","Returns a lazy iterator over the difference of two `FixedBitSet`s. The difference of `a` and `b` is the elements of `a` which are not in `b`.",1,[[["self"],["fixedbitset"]],["difference"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"index","","",1,[[["self"],["usize"]],["bool"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"start","","Start index (inclusive)",0,[[["self"]],["option"]]],[11,"end","","End index (exclusive)",0,[[["self"]],["option"]]]],"paths":[[8,"IndexRange"],[3,"FixedBitSet"],[3,"Difference"],[3,"Intersection"],[3,"Union"],[3,"Ones"]]};
searchIndex["futures"]={"doc":"Zero-cost Futures in Rust","items":[[4,"Async","futures","Return type of future, indicating whether a value is ready or not.",N,N],[13,"Ready","","Represents that a value is immediately ready.",0,N],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",0,N],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",N,N],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",1,N],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",1,N],[11,"clone","","",0,[[["self"]],["async"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["async"]],["bool"]]],[11,"ne","","",0,[[["self"],["async"]],["bool"]]],[11,"map","","Change the success value of this `Async` with the closure provided",0,[[["self"],["f"]],["async"]]],[11,"is_ready","","Returns whether this is `Async::Ready`",0,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["async"]]],[11,"clone","","",1,[[["self"]],["asyncsink"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"ne","","",1,[[["self"],["asyncsink"]],["bool"]]],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",1,[[["self"],["f"]],["asyncsink"]]],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",1,[[["self"]],["bool"]]],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",1,[[["self"]],["bool"]]],[0,"future","","Futures",N,N],[3,"Empty","futures::future","A future which is never resolved.",N,N],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",N,N],[3,"PollFn","","A future which adapts a function returning `Poll`.",N,N],[3,"FutureResult","","A future representing a value that is immediately ready.",N,N],[3,"LoopFn","","A future implementing a tail-recursive loop.",N,N],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",N,N],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",N,N],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",N,N],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",N,N],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",N,N],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",N,N],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",N,N],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",N,N],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",N,N],[3,"Map","","Future for the `map` combinator, changing the type of a future.",N,N],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",N,N],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",N,N],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",N,N],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",N,N],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",N,N],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",N,N],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",N,N],[3,"Inspect","","Do something with the item of a future, passing it on.",N,N],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",N,N],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",N,N],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",N,N],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",N,N],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",N,N],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",N,N],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",N,N],[4,"Loop","","The status of a `loop_fn` loop.",N,N],[13,"Break","","Indicates that the loop has completed with output `T`.",2,N],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",2,N],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",N,N],[13,"A","","First branch of the type",3,N],[13,"B","","Second branch of the type",3,N],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",N,N],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",4,N],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",4,N],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",N,[[],["empty"]]],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",N,[[["f"]],["lazy"]]],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"result","","Creates a new \"leaf future\" which will resolve with the given result.",N,[[["result"]],["futureresult"]]],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",N,[[["t"]],["futureresult"]]],[5,"err","","Creates a \"leaf future\" from an immediate value of a failed computation.",N,[[["e"]],["futureresult"]]],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",N,[[["s"],["f"]],["loopfn"]]],[5,"join_all","","Creates a future which represents a collection of the results of the futures given.",N,[[["i"]],["joinall"]]],[5,"select_all","","Creates a new future which will select over a list of futures.",N,[[["i"]],["selectall"]]],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",N,[[["i"]],["selectok"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["futureresult"]]],[11,"poll","","",8,[[["self"]],["poll"]]],[11,"from","","",8,[[["result"]],["self"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"poll","","",9,[[["self"]],["poll"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"poll","","",10,[[["self"]],["poll"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"poll","","",11,[[["self"]],["poll"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","","",12,[[["self"]],["poll",["option"]]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"is_done","","Returns whether the underlying future has finished or not.",13,[[["self"]],["bool"]]],[11,"poll","","",13,[[["self"]],["poll"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"poll","","",14,[[["self"]],["poll",["option"]]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"poll","","",15,[[["self"]],["poll"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"poll","","",16,[[["self"]],["poll"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"poll","","",17,[[["self"]],["poll"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"poll","","",18,[[["self"]],["poll"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"poll","","",19,[[["self"]],["poll"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"poll","","",20,[[["self"]],["poll"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"poll","","",21,[[["self"]],["poll"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"poll","","",22,[[["self"]],["poll"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"poll","","",23,[[["self"]],["poll"]]],[11,"poll","","",24,[[["self"]],["poll"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"poll","","",25,[[["self"]],["poll"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"poll","","",26,[[["self"]],["poll"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","Splits out the homogeneous type from an either of tuples.",3,N],[11,"poll","","",3,[[["self"]],["poll"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"poll","","",27,[[["self"]],["poll"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"poll","","",28,[[["self"]],["poll"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"poll","","",29,[[["self"]],["poll"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"poll","","",30,[[["self"]],["poll"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"poll","","",31,[[["self"]],["poll"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",32,[[["self"]],["option",["result"]]]],[11,"poll","","",32,[[["self"]],["poll"]]],[11,"clone","","",32,[[["self"]],["self"]]],[11,"drop","","",32,[[["self"]]]],[11,"clone","","",33,[[["self"]],["shareditem"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"deref","","",33,[[["self"]],["t"]]],[11,"clone","","",34,[[["self"]],["sharederror"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"deref","","",34,[[["self"]],["e"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"description","","",34,[[["self"]],["str"]]],[11,"cause","","",34,[[["self"]],["option",["error"]]]],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",N,N],[16,"Item","","The type of value that this future will resolved with if it is successful.",35,N],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",35,N],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",35,[[["self"]],["poll"]]],[11,"wait","","Block the current thread until this future is resolved.",35,[[["self"]],["result"]]],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",35,[[["self"],["f"]],["map"]]],[11,"map_err","","Map this future's error to a different error, returning a new future.",35,[[["self"],["f"]],["maperr"]]],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",35,[[["self"]],["fromerr"]]],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",35,[[["self"],["f"]],["then"]]],[11,"and_then","","Execute another future after this one has resolved successfully.",35,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Execute another future if this one resolves with an error.",35,[[["self"],["f"]],["orelse"]]],[11,"select","","Waits for either one of two futures to complete.",35,[[["self"],["b"]],["select"]]],[11,"select2","","Waits for either one of two differently-typed futures to complete.",35,[[["self"],["b"]],["select2"]]],[11,"join","","Joins the result of two futures, waiting for them both to complete.",35,[[["self"],["b"]],["join"]]],[11,"join3","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"]],["join3"]]],[11,"join4","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"]],["join4"]]],[11,"join5","","Same as `join`, but with more futures.",35,[[["self"],["b"],["c"],["d"],["e"]],["join5"]]],[11,"into_stream","","Convert this future into a single element stream.",35,[[["self"]],["intostream"]]],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",35,[[["self"]],["flatten"]]],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",35,[[["self"]],["flattenstream"]]],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",35,[[["self"]],["fuse"]]],[11,"inspect","","Do something with the item of a future, passing it on.",35,[[["self"],["f"]],["inspect"]]],[11,"catch_unwind","","Catches unwinding panics while polling the future.",35,[[["self"]],["catchunwind"]]],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",35,[[["self"]],["shared"]]],[8,"IntoFuture","","Class of types which can be converted into a future.",N,N],[16,"Future","","The future that this type can be converted into.",36,N],[16,"Item","","The item that the future may resolve with.",36,N],[16,"Error","","The error that the future may resolve with.",36,N],[10,"into_future","","Consumes this object and produces a future.",36,N],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",N,N],[16,"Future","","The future for the conversion.",37,N],[16,"Error","","Possible errors during conversion.",37,N],[10,"future_from","","Consume the given value, beginning the conversion.",37,N],[8,"Executor","","A trait for types which can spawn fresh futures.",N,N],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",38,[[["self"],["f"]],["result",["executeerror"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["executeerrorkind"]]],[11,"eq","","",4,[[["self"],["executeerrorkind"]],["bool"]]],[11,"new","","Create a new `ExecuteError`",39,[[["executeerrorkind"],["f"]],["executeerror"]]],[11,"kind","","Returns the associated reason for the error",39,[[["self"]],["executeerrorkind"]]],[11,"into_future","","Consumes self and returns the original future that was spawned.",39,[[["self"]],["f"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[0,"stream","futures","Asynchronous streams",N,N],[3,"Iter","futures::stream","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",N,N],[3,"Repeat","","Stream that produces the same element repeatedly.",N,N],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",N,N],[3,"Chain","","An adapter for chaining the output of two streams.",N,N],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",N,N],[3,"Empty","","A stream which contains no elements.",N,N],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",N,N],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",N,N],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",N,N],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",N,N],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",N,N],[3,"FromErr","","A stream combinator to change the error type of a stream.",N,N],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",N,N],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",N,N],[3,"Inspect","","Do something with the items of a stream, passing it on.",N,N],[3,"InspectErr","","Do something with the error of a stream, passing it on.",N,N],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",N,N],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",N,N],[3,"Merge","","An adapter for merging the output of two streams.",N,N],[3,"Once","","A stream which emits single element and then EOF.",N,N],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",N,N],[3,"Peekable","","A `Stream` that implements a `peek` method.",N,N],[3,"PollFn","","A stream which adapts a function returning `Poll`.",N,N],[3,"Select","","An adapter for merging the output of two streams.",N,N],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",N,N],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",N,N],[3,"Take","","A stream combinator which returns a maximum number of elements.",N,N],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",N,N],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",N,N],[3,"Unfold","","A stream which creates futures, polls them and return their result",N,N],[3,"Zip","","An adapter for merging the output of two streams.",N,N],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",N,N],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",N,N],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",N,N],[3,"Chunks","","An adaptor that chunks up elements in a vector.",N,N],[3,"Collect","","A future which collects all of the values of a stream into a vector.",N,N],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",N,N],[3,"SplitStream","","A `Stream` part of the split pair",N,N],[3,"SplitSink","","A `Sink` part of the split pair",N,N],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",N,N],[12,"0","","",40,N],[12,"1","","",40,N],[3,"FuturesOrdered","","An unbounded queue of futures.",N,N],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",N,N],[13,"First","","An item from the first stream",41,N],[13,"Second","","An item from the second stream",41,N],[13,"Both","","Items from both streams",41,N],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iter"]]],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",N,[[["i"]],["iterok"]]],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",N,[[["j"]],["iterresult"]]],[5,"repeat","","Create a stream which produces the same item repeatedly.",N,[[["t"]],["repeat"]]],[5,"empty","","Creates a stream which contains no elements.",N,[[],["empty"]]],[5,"once","","Creates a stream of single element",N,[[["result"]],["once"]]],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",N,[[["f"]],["pollfn"]]],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",N,[[["t"],["f"]],["unfold"]]],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresordered"]]],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",N,[[["i"]],["futuresunordered"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"poll","","",42,[[["self"]],["poll",["option"]]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"poll","","",43,[[["self"]],["poll",["option"]]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"poll","","",44,[[["self"]],["poll",["option"]]]],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"poll","","",45,[[["self"]],["poll",["option"]]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,[[["self"]],["s"]]],[11,"start_send","","",46,N],[11,"poll_complete","","",46,[[["self"]],["poll"]]],[11,"close","","",46,[[["self"]],["poll"]]],[11,"poll","","",46,[[["self"]],["poll",["option"]]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"poll","","",47,[[["self"]],["poll",["option"]]]],[11,"fmt","","",48,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",48,[[["self"]],["poll"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["fmtresult"]]],[11,"poll","","",49,[[["self"]],["poll"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"poll","","",50,[[["self"]],["poll",["option"]]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",51,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",51,[[["self"]],["s"]]],[11,"start_send","","",51,N],[11,"poll_complete","","",51,[[["self"]],["poll"]]],[11,"close","","",51,[[["self"]],["poll"]]],[11,"poll","","",51,[[["self"]],["poll",["option"]]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,[[["self"]],["s"]]],[11,"start_send","","",52,N],[11,"poll_complete","","",52,[[["self"]],["poll"]]],[11,"close","","",52,[[["self"]],["poll"]]],[11,"poll","","",52,[[["self"]],["poll",["option"]]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,[[["self"]],["s"]]],[11,"start_send","","",53,N],[11,"poll_complete","","",53,[[["self"]],["poll"]]],[11,"close","","",53,[[["self"]],["poll"]]],[11,"poll","","",53,[[["self"]],["poll",["option"]]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"poll","","",54,[[["self"]],["poll"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"poll","","",55,[[["self"]],["poll"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",56,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",56,[[["self"]],["s"]]],[11,"poll","","",56,[[["self"]],["poll",["option"]]]],[11,"start_send","","",56,N],[11,"poll_complete","","",56,[[["self"]],["poll"]]],[11,"close","","",56,[[["self"]],["poll"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",57,N],[11,"poll_complete","","",57,[[["self"]],["poll"]]],[11,"close","","",57,[[["self"]],["poll"]]],[11,"poll","","",57,[[["self"]],["poll",["option"]]]],[11,"is_done","","Returns whether the underlying stream has finished or not.",57,[[["self"]],["bool"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,[[["self"]],["s"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,[[["self"]],["option"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,[[["self"]],["option"]]],[11,"poll","","",58,[[["self"]],["poll"]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,[[["self"]],["s"]]],[11,"start_send","","",59,N],[11,"poll_complete","","",59,[[["self"]],["poll"]]],[11,"close","","",59,[[["self"]],["poll"]]],[11,"poll","","",59,[[["self"]],["poll",["option"]]]],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,[[["self"]],["s"]]],[11,"start_send","","",60,N],[11,"poll_complete","","",60,[[["self"]],["poll"]]],[11,"close","","",60,[[["self"]],["poll"]]],[11,"poll","","",60,[[["self"]],["poll",["option"]]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,[[["self"]],["s"]]],[11,"start_send","","",61,N],[11,"poll_complete","","",61,[[["self"]],["poll"]]],[11,"close","","",61,[[["self"]],["poll"]]],[11,"poll","","",61,[[["self"]],["poll",["option"]]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,[[["self"]],["s"]]],[11,"start_send","","",62,N],[11,"poll_complete","","",62,[[["self"]],["poll"]]],[11,"close","","",62,[[["self"]],["poll"]]],[11,"poll","","",62,[[["self"]],["poll",["option"]]]],[11,"fmt","","",63,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"poll","","",63,[[["self"]],["poll",["option"]]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"poll","","",64,[[["self"]],["poll",["option"]]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",65,N],[11,"poll_complete","","",65,[[["self"]],["poll"]]],[11,"close","","",65,[[["self"]],["poll"]]],[11,"poll","","",65,[[["self"]],["poll",["option"]]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",66,N],[11,"poll_complete","","",66,[[["self"]],["poll"]]],[11,"close","","",66,[[["self"]],["poll"]]],[11,"poll","","",66,[[["self"]],["poll",["option"]]]],[11,"peek","","Peek retrieves a reference to the next item in the stream.",66,[[["self"]],["poll",["option"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"poll","","",67,[[["self"]],["poll",["option"]]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"poll","","",68,[[["self"]],["poll",["option"]]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",69,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",69,[[["self"]],["s"]]],[11,"start_send","","",69,N],[11,"poll_complete","","",69,[[["self"]],["poll"]]],[11,"close","","",69,[[["self"]],["poll"]]],[11,"poll","","",69,[[["self"]],["poll",["option"]]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",70,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",70,[[["self"]],["s"]]],[11,"start_send","","",70,N],[11,"poll_complete","","",70,[[["self"]],["poll"]]],[11,"close","","",70,[[["self"]],["poll"]]],[11,"poll","","",70,[[["self"]],["poll",["option"]]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",71,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",71,[[["self"]],["s"]]],[11,"start_send","","",71,N],[11,"poll_complete","","",71,[[["self"]],["poll"]]],[11,"close","","",71,[[["self"]],["poll"]]],[11,"poll","","",71,[[["self"]],["poll",["option"]]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",72,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",72,[[["self"]],["s"]]],[11,"start_send","","",72,N],[11,"poll_complete","","",72,[[["self"]],["poll"]]],[11,"close","","",72,[[["self"]],["poll"]]],[11,"poll","","",72,[[["self"]],["poll",["option"]]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",73,N],[11,"poll_complete","","",73,[[["self"]],["poll"]]],[11,"close","","",73,[[["self"]],["poll"]]],[11,"poll","","",73,[[["self"]],["poll",["option"]]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"poll","","",74,[[["self"]],["poll",["option"]]]],[11,"fmt","","",75,[[["self"],["formatter"]],["result"]]],[11,"poll","","",75,[[["self"]],["poll",["option"]]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",76,[[["self"]],["option"]]],[11,"poll","","",76,[[["self"]],["poll"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",77,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",77,[[["self"]],["s"]]],[11,"start_send","","",77,N],[11,"poll_complete","","",77,[[["self"]],["poll"]]],[11,"close","","",77,[[["self"]],["poll"]]],[11,"poll","","",77,[[["self"]],["poll",["option"]]]],[11,"fmt","","",78,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",78,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",78,[[["self"]],["s"]]],[11,"poll","","",78,[[["self"]],["poll",["option"]]]],[11,"start_send","","",78,N],[11,"poll_complete","","",78,[[["self"]],["poll"]]],[11,"close","","",78,[[["self"]],["poll"]]],[11,"fmt","","",79,[[["self"],["formatter"]],["result"]]],[11,"poll","","",79,[[["self"]],["poll",["option"]]]],[11,"fmt","","",80,[[["self"],["formatter"]],["result"]]],[11,"start_send","","",80,N],[11,"poll_complete","","",80,[[["self"]],["poll"]]],[11,"close","","",80,[[["self"]],["poll"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",80,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",80,[[["self"]],["s"]]],[11,"poll","","",80,[[["self"]],["poll",["option"]]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"poll","","",81,[[["self"]],["poll",["vec"]]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",82,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",82,[[["self"]],["s"]]],[11,"next","","",82,[[["self"]],["option"]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",83,[[["self"],["splitsink"]],["result",["reuniteerror"]]]],[11,"poll","","",83,[[["self"]],["poll",["option"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result"]]],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",84,[[["self"],["splitstream"]],["result",["reuniteerror"]]]],[11,"start_send","","",84,N],[11,"poll_complete","","",84,[[["self"]],["poll"]]],[11,"close","","",84,[[["self"]],["poll"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"description","","",40,[[["self"]],["str"]]],[0,"futures_unordered","","An unbounded set of futures.",N,N],[3,"FuturesUnordered","futures::stream::futures_unordered","An unbounded set of futures.",N,N],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",N,N],[11,"new","","Constructs a new, empty `FuturesUnordered`",85,[[],["futuresunordered"]]],[11,"len","","Returns the number of futures contained in the set.",85,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no futures",85,[[["self"]],["bool"]]],[11,"push","","Push a future into the set.",85,[[["self"],["t"]]]],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",85,[[["self"]],["itermut"]]],[11,"poll","","",85,[[["self"]],["poll",["option"]]]],[11,"fmt","","",85,[[["self"],["formatter"]],["result"]]],[11,"drop","","",85,[[["self"]]]],[11,"from_iter","","",85,[[["t"]],["self"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"next","","",86,[[["self"]],["option"]]],[11,"size_hint","","",86,N],[11,"new","futures::stream","Constructs a new, empty `FuturesOrdered`",87,[[],["futuresordered"]]],[11,"len","","Returns the number of futures contained in the queue.",87,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the queue contains no futures",87,[[["self"]],["bool"]]],[11,"push","","Push a future into the queue.",87,[[["self"],["t"]]]],[11,"poll","","",87,[[["self"]],["poll",["option"]]]],[11,"fmt","","",87,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",87,[[["t"]],["self"]]],[8,"Stream","","A stream of values, not all of which may have been produced yet.",N,N],[16,"Item","","The type of item this stream will yield on success.",88,N],[16,"Error","","The type of error this stream may generate.",88,N],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",88,[[["self"]],["poll",["option"]]]],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",88,[[["self"]],["wait"]]],[11,"into_future","","Converts this stream into a `Future`.",88,[[["self"]],["streamfuture"]]],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",88,[[["self"],["f"]],["map"]]],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",88,[[["self"],["f"]],["maperr"]]],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",88,[[["self"],["f"]],["filter"]]],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",88,[[["self"],["f"]],["filtermap"]]],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",88,[[["self"],["f"]],["then"]]],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",88,[[["self"],["f"]],["andthen"]]],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",88,[[["self"],["f"]],["orelse"]]],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",88,[[["self"]],["collect"]]],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat2"]]],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",88,[[["self"]],["concat"]]],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",88,[[["self"],["t"],["f"]],["fold"]]],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",88,[[["self"]],["flatten"]]],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",88,[[["self"],["p"]],["takewhile"]]],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",88,[[["self"],["f"]],["foreach"]]],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",88,[[["self"]],["fromerr"]]],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",88,[[["self"],["u64"]],["take"]]],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",88,[[["self"],["u64"]],["skip"]]],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",88,[[["self"]],["fuse"]]],[11,"by_ref","","Borrows a stream, rather than consuming it.",88,[[["self"]],["self"]]],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",88,[[["self"]],["catchunwind"]]],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",88,[[["self"],["usize"]],["buffered"]]],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",88,[[["self"],["usize"]],["bufferunordered"]]],[11,"merge","","An adapter for merging the output of two streams.",88,[[["self"],["s"]],["merge"]]],[11,"zip","","An adapter for zipping two streams together.",88,[[["self"],["s"]],["zip"]]],[11,"chain","","Adapter for chaining two stream.",88,[[["self"],["s"]],["chain"]]],[11,"peekable","","Creates a new stream which exposes a `peek` method.",88,[[["self"]],["peekable"]]],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",88,[[["self"],["usize"]],["chunks"]]],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",88,[[["self"],["s"]],["select"]]],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",88,[[["self"],["s"]],["forward"]]],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",88,N],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspect"]]],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",88,[[["self"],["f"]],["inspecterr"]]],[0,"sink","futures","Asynchronous sinks",N,N],[3,"Buffer","futures::sink","Sink for the `Sink::buffer` combinator, which buffers up to some fixed number of values when the underlying sink is unable to accept them.",N,N],[3,"Wait","","A sink combinator which converts an asynchronous sink to a blocking sink.",N,N],[3,"With","","Sink for the `Sink::with` combinator, chaining a computation to run prior to pushing a value into the underlying sink.",N,N],[3,"WithFlatMap","","Sink for the `Sink::with_flat_map` combinator, chaining a computation that returns an iterator to run prior to pushing a value into the underlying sink",N,N],[3,"Flush","","Future for the `Sink::flush` combinator, which polls the sink until all data has been flushed.",N,N],[3,"Send","","Future for the `Sink::send` combinator, which sends a value to a sink and then waits until the sink has fully flushed.",N,N],[3,"SendAll","","Future for the `Sink::send_all` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",N,N],[3,"SinkMapErr","","Sink for the `Sink::sink_map_err` combinator.",N,N],[3,"SinkFromErr","","A sink combinator to change the error type of a sink.",N,N],[3,"Fanout","","Sink that clones incoming items and forwards them to two sinks at the same time.",N,N],[11,"clone","","",89,[[["self"]],["with"]]],[11,"fmt","","",89,[[["self"],["formatter"]],["result"]]],[11,"poll","","",89,[[["self"]],["poll",["option"]]]],[11,"get_ref","","Get a shared reference to the inner sink.",89,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",89,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",89,[[["self"]],["s"]]],[11,"start_send","","",89,N],[11,"poll_complete","","",89,[[["self"]],["poll"]]],[11,"close","","",89,[[["self"]],["poll"]]],[11,"fmt","","",90,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",90,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",90,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",90,[[["self"]],["s"]]],[11,"poll","","",90,[[["self"]],["poll",["option"]]]],[11,"start_send","","",90,N],[11,"poll_complete","","",90,[[["self"]],["poll"]]],[11,"close","","",90,[[["self"]],["poll"]]],[11,"fmt","","",91,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",91,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",91,[[["self"]],["s"]]],[11,"into_inner","","Consume the `Flush` and return the inner sink.",91,[[["self"]],["s"]]],[11,"poll","","",91,[[["self"]],["poll"]]],[11,"clone","","",92,[[["self"]],["sinkfromerr"]]],[11,"fmt","","",92,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",92,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",92,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",92,[[["self"]],["s"]]],[11,"start_send","","",92,N],[11,"poll_complete","","",92,[[["self"]],["poll"]]],[11,"close","","",92,[[["self"]],["poll"]]],[11,"poll","","",92,[[["self"]],["poll",["option"]]]],[11,"fmt","","",93,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",93,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",93,[[["self"]],["s"]]],[11,"poll","","",93,[[["self"]],["poll"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"poll","","",94,[[["self"]],["poll"]]],[11,"clone","","",95,[[["self"]],["sinkmaperr"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",95,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",95,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",95,[[["self"]],["s"]]],[11,"start_send","","",95,N],[11,"poll_complete","","",95,[[["self"]],["poll"]]],[11,"close","","",95,[[["self"]],["poll"]]],[11,"poll","","",95,[[["self"]],["poll",["option"]]]],[11,"into_inner","","Consumes this combinator, returning the underlying sinks.",96,N],[11,"fmt","","",96,[[["self"],["formatter"]],["fmtresult"]]],[11,"start_send","","",96,N],[11,"poll_complete","","",96,[[["self"]],["poll"]]],[11,"close","","",96,[[["self"]],["poll"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"get_ref","","Get a shared reference to the inner sink.",97,[[["self"]],["s"]]],[11,"get_mut","","Get a mutable reference to the inner sink.",97,[[["self"]],["s"]]],[11,"into_inner","","Consumes this combinator, returning the underlying sink.",97,[[["self"]],["s"]]],[11,"poll","","",97,[[["self"]],["poll",["option"]]]],[11,"start_send","","",97,N],[11,"poll_complete","","",97,[[["self"]],["poll"]]],[11,"close","","",97,[[["self"]],["poll"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"send","","Sends a value to this sink, blocking the current thread until it's able to do so.",98,N],[11,"flush","","Flushes any buffered data in this sink, blocking the current thread until it's entirely flushed.",98,[[["self"]],["result"]]],[11,"close","","Close this sink, blocking the current thread until it's entirely closed.",98,[[["self"]],["result"]]],[6,"BoxSink","","A type alias for `Box<Sink + Send>`",N,N],[8,"Sink","","A `Sink` is a value into which other values can be sent, asynchronously.",N,N],[16,"SinkItem","","The type of value that the sink accepts.",99,N],[16,"SinkError","","The type of value produced by the sink when an error occurs.",99,N],[10,"start_send","","Begin the process of sending a value to the sink.",99,N],[10,"poll_complete","","Flush all output from this sink, if necessary.",99,[[["self"]],["poll"]]],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",99,[[["self"]],["poll"]]],[11,"wait","","Creates a new object which will produce a synchronous sink.",99,[[["self"]],["wait"]]],[11,"with","","Composes a function in front of the sink.",99,[[["self"],["f"]],["with"]]],[11,"with_flat_map","","Composes a function in front of the sink.",99,[[["self"],["f"]],["withflatmap"]]],[11,"sink_map_err","","Transforms the error returned by the sink.",99,[[["self"],["f"]],["sinkmaperr"]]],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",99,[[["self"]],["sinkfromerr"]]],[11,"buffer","","Adds a fixed-size buffer to the current sink.",99,[[["self"],["usize"]],["buffer"]]],[11,"fanout","","Fanout items to multiple sinks.",99,[[["self"],["s"]],["fanout"]]],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",99,[[["self"]],["flush"]]],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",99,N],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",99,[[["self"],["s"]],["sendall"]]],[0,"task","futures","Tasks used to drive a future computation",N,N],[3,"Task","futures::task","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",N,N],[3,"AtomicTask","","A synchronization primitive for task notification.",N,N],[3,"LocalKey","","A key for task-local data stored in a future's task.",N,N],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",N,N],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",N,[[],["task"]]],[5,"init","","Initialize the `futures` task system.",N,N],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",N,[[["unparkevent"],["f"]],["r"]]],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",N,N],[10,"insert","","Insert the given ID into the set",100,[[["self"],["usize"]]]],[0,"executor","futures","Executors",N,N],[3,"Spawn","futures::executor","Representation of a spawned future/stream.",N,N],[3,"NotifyHandle","","A `NotifyHandle` is the core value through which notifications are routed in the `futures` crate.",N,N],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",N,[[["t"]],["spawn"]]],[5,"with_notify","","Sets the `NotifyHandle` of the current task for the duration of the provided closure.",N,[[["t"],["usize"],["f"]],["r"]]],[8,"Notify","","A trait which represents a sink of notifications that a future is ready to make progress.",N,N],[10,"notify","","Indicates that an associated future and/or task are ready to make progress.",101,[[["self"],["usize"]]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[8,"UnsafeNotify","","An unsafe trait for implementing custom forms of memory management behind a `Task`.",N,N],[10,"clone_raw","","Creates a new `NotifyHandle` from this instance of `UnsafeNotify`.",102,[[["self"]],["notifyhandle"]]],[10,"drop_raw","","Drops this instance of `UnsafeNotify`, deallocating resources associated with it.",102,[[["self"]]]],[0,"sync","futures","Future-aware synchronization",N,N],[3,"BiLock","futures::sync","A type of futures-powered synchronization primitive which is a mutex between two possible owners.",N,N],[3,"BiLockGuard","","Returned RAII guard from the `poll_lock` method.",N,N],[3,"BiLockAcquire","","Future returned by `BiLock::lock` which will resolve when the lock is acquired.",N,N],[3,"BiLockAcquired","","Resolved value of the `BiLockAcquire<T>` future.",N,N],[0,"oneshot","","A one-shot, futures-aware channel",N,N],[3,"Receiver","futures::sync::oneshot","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"Sender","","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Canceled","","Error returned from a `Receiver<T>` whenever the corresponding `Sender<T>` is dropped.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Execute` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",104,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",104,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",104,[[["self"]],["bool"]]],[11,"drop","","",104,[[["self"]]]],[11,"clone","","",105,[[["self"]],["canceled"]]],[11,"eq","","",105,[[["self"],["canceled"]],["bool"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",105,[[["self"],["formatter"]],["result"]]],[11,"description","","",105,[[["self"]],["str"]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",103,[[["self"]]]],[11,"try_recv","","Attempts to receive a message outside of the context of a task.",103,[[["self"]],["result",["option","canceled"]]]],[11,"poll","","",103,[[["self"]],["poll",["canceled"]]]],[11,"drop","","",103,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",106,[[["self"]]]],[11,"poll","","",106,[[["self"]],["poll"]]],[11,"fmt","","",106,[[["self"],["formatter"]],["result"]]],[11,"drop","","",106,[[["self"]]]],[11,"poll","","",107,[[["self"]],["poll"]]],[11,"fmt","","",107,[[["self"],["formatter"]],["result"]]],[11,"drop","","",107,[[["self"]]]],[0,"mpsc","futures::sync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure.",N,N],[3,"Sender","futures::sync::mpsc","The transmission end of a channel which is used to send values.",N,N],[3,"UnboundedSender","","The transmission end of a channel which is used to send values.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedReceiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"TrySendError","","Error type returned from `try_send`",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait with bounded capacity.",N,N],[5,"unbounded","","Creates an in-memory channel implementation of the `Stream` trait with unbounded capacity.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",108,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",109,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",110,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",111,[[["self"],["formatter"]],["result"]]],[11,"clone","","",112,[[["self"]],["senderror"]]],[11,"eq","","",112,[[["self"],["senderror"]],["bool"]]],[11,"ne","","",112,[[["self"],["senderror"]],["bool"]]],[11,"clone","","",113,[[["self"]],["trysenderror"]]],[11,"eq","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"ne","","",113,[[["self"],["trysenderror"]],["bool"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",112,[[["self"],["formatter"]],["result"]]],[11,"description","","",112,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",112,[[["self"]],["t"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result"]]],[11,"description","","",113,[[["self"]],["str"]]],[11,"is_full","","Returns true if this error is a result of the channel being full",113,[[["self"]],["bool"]]],[11,"is_disconnected","","Returns true if this error is a result of the receiver being dropped",113,[[["self"]],["bool"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",113,[[["self"]],["t"]]],[11,"try_send","","Attempts to send a message on this `Sender<T>` without blocking.",108,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"poll_ready","","Polls the channel to determine if there is guaranteed to be capacity to send at least one item without waiting.",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",108,[[["self"]],["bool"]]],[11,"start_send","","",108,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",108,[[["self"]],["poll",["senderror"]]]],[11,"close","","",108,[[["self"]],["poll",["senderror"]]]],[11,"is_closed","","Returns whether this channel is closed without needing a context.",109,[[["self"]],["bool"]]],[11,"unbounded_send","","Sends the provided message along this channel.",109,[[["self"],["t"]],["result",["senderror"]]]],[11,"start_send","","",109,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",109,[[["self"]],["poll",["senderror"]]]],[11,"close","","",109,[[["self"]],["poll",["senderror"]]]],[11,"clone","","",109,[[["self"]],["unboundedsender"]]],[11,"clone","","",108,[[["self"]],["sender"]]],[11,"drop","","",108,[[["self"]]]],[11,"close","","Closes the receiving half",110,[[["self"]]]],[11,"poll","","",110,[[["self"]],["poll",["option"]]]],[11,"drop","","",110,[[["self"]]]],[11,"close","","Closes the receiving half",111,[[["self"]]]],[11,"poll","","",111,[[["self"]],["poll",["option"]]]],[11,"poll","","",114,[[["self"]],["poll",["option"]]]],[11,"fmt","","",114,[[["self"],["formatter"]],["result"]]],[11,"poll","","",115,[[["self"]],["poll"]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result"]]],[11,"fmt","futures::sync","",116,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `BiLock` protecting the provided data.",116,N],[11,"poll_lock","","Attempt to acquire this lock, returning `NotReady` if it can't be acquired.",116,[[["self"]],["async",["bilockguard"]]]],[11,"lock","","Perform a \"blocking lock\" of this lock, consuming this lock handle and returning a future to the acquired lock.",116,[[["self"]],["bilockacquire"]]],[11,"reunite","","Attempts to put the two \"halves\" of a `BiLock<T>` back together and recover the original value. Succeeds only if the two `BiLock<T>`s originated from the same call to `BiLock::new`.",116,[[["self"],["self"]],["result",["reuniteerror"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result"]]],[11,"deref","","",117,[[["self"]],["t"]]],[11,"deref_mut","","",117,[[["self"]],["t"]]],[11,"drop","","",117,[[["self"]]]],[11,"fmt","","",118,[[["self"],["formatter"]],["result"]]],[11,"poll","","",118,[[["self"]],["poll",["bilockacquired"]]]],[11,"fmt","","",119,[[["self"],["formatter"]],["result"]]],[11,"unlock","","Recovers the original `BiLock<T>`, unlocking this lock.",119,[[["self"]],["bilock"]]],[11,"deref","","",119,[[["self"]],["t"]]],[11,"deref_mut","","",119,[[["self"]],["t"]]],[11,"drop","","",119,[[["self"]]]],[0,"unsync","futures","Future-aware single-threaded synchronization",N,N],[0,"mpsc","futures::unsync","A multi-producer, single-consumer, futures-aware, FIFO queue with back pressure, for use communicating between tasks on the same thread.",N,N],[3,"Sender","futures::unsync::mpsc","The transmission end of a channel.",N,N],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",N,N],[3,"UnboundedSender","","The transmission end of an unbounded channel.",N,N],[3,"UnboundedReceiver","","The receiving end of an unbounded channel.",N,N],[3,"SendError","","Error type for sending, used when the receiving end of a channel is dropped",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Executor` instances must be able to execute for `spawn`.",N,N],[5,"channel","","Creates a bounded in-memory channel with buffered storage.",N,N],[5,"unbounded","","Creates an unbounded in-memory channel with buffered storage.",N,N],[5,"spawn","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream.",N,[[["s"],["e"],["usize"]],["spawnhandle"]]],[5,"spawn_unbounded","","Spawns a `stream` onto the instance of `Executor` provided, `executor`, returning a handle representing the remote stream, with unbounded buffering.",N,[[["s"],["e"]],["spawnhandle"]]],[11,"fmt","","",120,[[["self"],["formatter"]],["result"]]],[11,"clone","","",120,[[["self"]],["self"]]],[11,"start_send","","",120,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",120,[[["self"]],["poll",["senderror"]]]],[11,"close","","",120,[[["self"]],["poll",["senderror"]]]],[11,"drop","","",120,[[["self"]]]],[11,"fmt","","",121,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",121,[[["self"]]]],[11,"poll","","",121,[[["self"]],["poll",["option"]]]],[11,"drop","","",121,[[["self"]]]],[11,"fmt","","",122,[[["self"],["formatter"]],["result"]]],[11,"clone","","",122,[[["self"]],["self"]]],[11,"start_send","","",122,[[["self"],["t"]],["startsend",["senderror"]]]],[11,"poll_complete","","",122,[[["self"]],["poll",["senderror"]]]],[11,"close","","",122,[[["self"]],["poll",["senderror"]]]],[11,"unbounded_send","","Sends the provided message along this channel.",122,[[["self"],["t"]],["result",["senderror"]]]],[11,"fmt","","",123,[[["self"],["formatter"]],["result"]]],[11,"close","","Closes the receiving half",123,[[["self"]]]],[11,"poll","","",123,[[["self"]],["poll",["option"]]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",124,[[["self"],["formatter"]],["result"]]],[11,"description","","",124,[[["self"]],["str"]]],[11,"into_inner","","Returns the message that was attempted to be sent but failed.",124,[[["self"]],["t"]]],[11,"poll","","",125,[[["self"]],["poll",["option"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result"]]],[11,"poll","","",126,[[["self"]],["poll"]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result"]]],[0,"oneshot","futures::unsync","A one-shot, futures-aware channel",N,N],[3,"Sender","futures::unsync::oneshot","Represents the completion half of a oneshot through which the result of a computation is signaled.",N,N],[3,"Receiver","","A future representing the completion of a computation happening elsewhere in memory.",N,N],[3,"SpawnHandle","","Handle returned from the `spawn` function.",N,N],[3,"Execute","","Type of future which `Spawn` instances below must be able to spawn.",N,N],[5,"channel","","Creates a new futures-aware, one-shot channel.",N,N],[5,"spawn","","Spawns a `future` onto the instance of `Executor` provided, `executor`, returning a handle representing the completion of the future.",N,[[["f"],["e"]],["spawnhandle"]]],[5,"spawn_fn","","Spawns a function `f` onto the `Spawn` instance provided `s`.",N,[[["f"],["e"]],["spawnhandle"]]],[11,"fmt","","",127,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",128,[[["self"],["formatter"]],["result"]]],[11,"send","","Completes this oneshot with a successful result.",127,[[["self"],["t"]],["result"]]],[11,"poll_cancel","","Polls this `Sender` half to detect whether the `Receiver` this has paired with has gone away.",127,[[["self"]],["poll"]]],[11,"is_canceled","","Tests to see whether this `Sender`'s corresponding `Receiver` has gone away.",127,[[["self"]],["bool"]]],[11,"drop","","",127,[[["self"]]]],[11,"close","","Gracefully close this receiver, preventing sending any future messages.",128,[[["self"]]]],[11,"poll","","",128,[[["self"]],["poll"]]],[11,"drop","","",128,[[["self"]]]],[11,"forget","","Drop this future without canceling the underlying future.",129,[[["self"]]]],[11,"poll","","",129,[[["self"]],["poll"]]],[11,"fmt","","",129,[[["self"],["formatter"]],["result"]]],[11,"poll","","",130,[[["self"]],["poll"]]],[11,"fmt","","",130,[[["self"],["formatter"]],["result"]]],[0,"prelude","futures","A \"prelude\" for crates using the `futures` crate.",N,N],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",N,N],[6,"StartSend","","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details.",N,N],[14,"try_ready","","A macro for extracting the successful type of a `Poll<T, E>`.",N,N],[14,"task_local","","A macro to create a `static` of type `LocalKey`",N,N],[11,"new","futures::task","Create an `AtomicTask` initialized with the given `Task`",131,[[],["atomictask"]]],[11,"register","","Registers the current task to be notified on calls to `notify`.",131,[[["self"]]]],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",131,[[["self"],["task"]]]],[11,"notify","","Notifies the task that last called `register`.",131,[[["self"]]]],[11,"default","","",131,[[],["self"]]],[11,"fmt","","",131,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result"]]],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",132,[[["self"],["f"]],["r"]]],[11,"wait_future","futures::executor","Waits for the internal future to complete, blocking this thread's execution until it does.",133,[[["self"]],["result"]]],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",133,[[["self"]],["option",["result"]]]],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",133,N],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",133,[[["self"]],["result"]]],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",133,[[["self"]],["result"]]],[11,"clone","futures::task","",134,[[["self"]],["unparkevent"]]],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",134,[[["arc",["eventset"]],["usize"]],["unparkevent"]]],[11,"fmt","","",134,[[["self"],["formatter"]],["result"]]],[11,"from","futures::executor","",135,[[["arc"]],["notifyhandle"]]],[11,"clone_id","","This function is called whenever a new copy of `id` is needed.",101,[[["self"],["usize"]],["usize"]]],[11,"drop_id","","All instances of `Task` store an `id` that they're going to internally notify with, and this function is called when the `Task` is dropped.",101,[[["self"],["usize"]]]],[11,"clone","futures::task","",136,[[["self"]],["task"]]],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",136,[[["self"]]]],[11,"is_current","","Returns `true` when called from within the context of the task.",136,[[["self"]],["bool"]]],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",136,[[["self"]],["bool"]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result"]]],[11,"get_ref","futures::executor","Get a shared reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",133,[[["self"]],["t"]]],[11,"into_inner","","Consume the Spawn, returning its inner object",133,[[["self"]],["t"]]],[11,"poll_fn_notify","","Calls the provided closure, scheduling notifications to be sent to the `notify` argument.",133,[[["self"],["n"],["usize"],["f"]],["r"]]],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",133,[[["self"],["n"],["usize"]],["poll",["option"]]]],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",133,N],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",133,[[["self"],["n"],["usize"]],["poll"]]],[11,"fmt","","",133,[[["self"],["formatter"]],["result"]]],[11,"new","","Constructs a new `NotifyHandle` directly.",135,N],[11,"notify","","Invokes the underlying instance of `Notify` with the provided `id`.",135,[[["self"],["usize"]]]],[11,"clone","","",135,[[["self"]],["self"]]],[11,"fmt","","",135,[[["self"],["formatter"]],["result"]]],[11,"drop","","",135,[[["self"]]]],[11,"from","","",135,[[["t"]],["notifyhandle"]]]],"paths":[[4,"Async"],[4,"AsyncSink"],[4,"Loop"],[4,"Either"],[4,"ExecuteErrorKind"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Flatten"],[3,"FlattenStream"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"CatchUnwind"],[3,"JoinAll"],[3,"SelectAll"],[3,"SelectOk"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[3,"ExecuteError"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Concat2"],[3,"Concat"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"FuturesOrdered"],[8,"Stream"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Fanout"],[3,"Buffer"],[3,"Wait"],[8,"Sink"],[8,"EventSet"],[8,"Notify"],[8,"UnsafeNotify"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"AtomicTask"],[3,"LocalKey"],[3,"Spawn"],[3,"UnparkEvent"],[3,"NotifyHandle"],[3,"Task"]]};
searchIndex["ini"]={"doc":"Ini parser for Rust","items":[[0,"ini","ini","Ini",N,N],[3,"ParseOption","ini::ini","Parsing configuration",N,N],[12,"enabled_quote","","Allow quote (\" or ') in value For example `ini [Section] Key1=\"Quoted value\" Key2='Single Quote' with extra value`",0,N],[12,"enabled_escape","","Interpret `\\` as an escape character For example `ini [Section] Key1=C:\\Windows`",0,N],[3,"SectionSetter","","A setter which could be used to set key-value pair in a specified section",N,N],[3,"Ini","","Ini struct",N,N],[3,"SectionIterator","","Iterator for sections",N,N],[3,"SectionMutIterator","","Iterator for mutable sections",N,N],[3,"SectionIntoIter","","",N,N],[3,"ParseError","","Parse error",N,N],[12,"line","","",1,N],[12,"col","","",1,N],[12,"msg","","",1,N],[4,"EscapePolicy","","",N,N],[13,"Nothing","","escape absolutely nothing (dangerous)",2,N],[13,"Basics","","only escape the most necessary things",2,N],[13,"BasicsUnicode","","escape basics and non-ascii characters",2,N],[13,"Reserved","","Escape reserved symbols.",2,N],[13,"ReservedUnicode","","Escape reserved symbols and non-ascii characters",2,N],[13,"Everything","","Escape everything that some INI implementations assume",2,N],[4,"Error","","",N,N],[13,"Io","","",3,N],[13,"Parse","","",3,N],[6,"Properties","","Properties type (key-value pairs)",N,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["escapepolicy"]],["bool"]]],[11,"clone","","",2,[[["self"]],["escapepolicy"]]],[11,"should_escape","","Given a character this returns true if it should be escaped as per this policy or false if not.",2,[[["self"],["char"]],["bool"]]],[11,"default","","",0,[[],["parseoption"]]],[11,"set","","Set key-value pair in this section",4,[[["self"],["k"],["v"]],["sectionsetter"]]],[11,"delete","","Delete the entry in this section with `key`",4,[[["self"],["k"]],["sectionsetter"]]],[11,"get","","Get the entry in this section with `key`",4,[[["self"],["k"]],["option",["str"]]]],[11,"clone","","",5,[[["self"]],["ini"]]],[11,"new","","Create an instance",5,[[],["ini"]]],[11,"with_section","","Set with a specified section, `None` is for the general section",5,[[["self"],["option"]],["sectionsetter"]]],[11,"general_section","","Get the immmutable general section",5,[[["self"]],["properties"]]],[11,"general_section_mut","","Get the mutable general section",5,[[["self"]],["properties"]]],[11,"section","","Get a immutable section",5,[[["self"],["option"]],["option",["properties"]]]],[11,"section_mut","","Get a mutable section",5,[[["self"],["option"]],["option",["properties"]]]],[11,"entry","","Get the entry",5,[[["self"],["option",["string"]]],["entry",["option","properties"]]]],[11,"clear","","Clear all entries",5,[[["self"]]]],[11,"sections","","Iterate with sections",5,[[["self"]],["keys",["option","properties"]]]],[11,"set_to","","Set key-value to a section",5,[[["self"],["option"],["string"],["string"]]]],[11,"get_from","","Get the value from a section with key",5,[[["self"],["option"],["str"]],["option",["str"]]]],[11,"get_from_or","","Get the value from a section with key, return the default value if it does not exist",5,[[["self"],["option"],["str"],["str"]],["str"]]],[11,"get_from_mut","","Get the mutable from a section with key",5,[[["self"],["option"],["str"]],["option",["str"]]]],[11,"delete","","Delete a section, return the properties if it exists",5,[[["self"],["option"]],["option",["properties"]]]],[11,"delete_from","","",5,[[["self"],["option"],["str"]],["option",["string"]]]],[11,"index","","",5,[[["self"],["option"]],["properties"]]],[11,"index_mut","","",5,[[["self"],["option"]],["properties"]]],[11,"index","","",5,[[["self"],["str"]],["properties"]]],[11,"index_mut","","",5,[[["self"],["str"]],["properties"]]],[11,"write_to_file","","Write to a file",5,[[["self"],["p"]],["result"]]],[11,"write_to_file_policy","","Write to a file",5,[[["self"],["p"],["escapepolicy"]],["result"]]],[11,"write_to","","Write to a writer",5,[[["self"],["w"]],["result"]]],[11,"write_to_policy","","Write to a writer",5,[[["self"],["w"],["escapepolicy"]],["result"]]],[11,"load_from_str","","Load from a string",5,[[["str"]],["result",["ini","parseerror"]]]],[11,"load_from_str_noescape","","Load from a string, but do not interpret '' as an escape character",5,[[["str"]],["result",["ini","parseerror"]]]],[11,"load_from_str_opt","","Load from a string with options",5,[[["str"],["parseoption"]],["result",["ini","parseerror"]]]],[11,"read_from","","Load from a reader",5,[[["r"]],["result",["ini","error"]]]],[11,"read_from_noescape","","Load from a reader, but do not interpret '' as an escape character",5,[[["r"]],["result",["ini","error"]]]],[11,"read_from_opt","","Load from a reader with options",5,[[["r"],["parseoption"]],["result",["ini","error"]]]],[11,"load_from_file","","Load from a file",5,[[["p"]],["result",["ini","error"]]]],[11,"load_from_file_noescape","","Load from a file, but do not interpret '' as an escape character",5,[[["p"]],["result",["ini","error"]]]],[11,"load_from_file_opt","","Load from a file with options",5,[[["p"],["parseoption"]],["result",["ini","error"]]]],[11,"iter","","Immutable iterate though sections",5,[[["self"]],["sectioniterator"]]],[11,"mut_iter","","Mutable iterate though sections Deprecated! Use `iter_mut` instead!",5,[[["self"]],["sectionmutiterator"]]],[11,"iter_mut","","Mutable iterate though sections",5,[[["self"]],["sectionmutiterator"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"into_iter","","",5,[[["self"]],["sectionintoiter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]]],"paths":[[3,"ParseOption"],[3,"ParseError"],[4,"EscapePolicy"],[4,"Error"],[3,"SectionSetter"],[3,"Ini"],[3,"SectionIterator"],[3,"SectionMutIterator"],[3,"SectionIntoIter"]]};
searchIndex["inotify"]={"doc":"Idiomatic inotify wrapper for the Rust programming language","items":[[3,"Event","inotify","An inotify event",N,N],[12,"wd","","Identifies the watch this event originates from",0,N],[12,"mask","","Indicates what kind of event this is",0,N],[12,"cookie","","Connects related events to each other",0,N],[12,"name","","The name of the file the event originates from",0,N],[3,"EventMask","","Indicates the type of an event",N,N],[3,"Events","","Iterator over inotify events",N,N],[3,"Inotify","","Idiomatic Rust wrapper around Linux's inotify API",N,N],[3,"WatchDescriptor","","Represents a watch on an inode",N,N],[3,"WatchMask","","Describes a file system watch",N,N],[3,"EventStream","","Stream of inotify events",N,N],[11,"next","","",1,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["event"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["eventmask"]],["bool"]]],[11,"ne","","",2,[[["self"],["eventmask"]],["bool"]]],[11,"clone","","",2,[[["self"]],["eventmask"]]],[11,"partial_cmp","","",2,[[["self"],["eventmask"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["eventmask"]],["bool"]]],[11,"le","","",2,[[["self"],["eventmask"]],["bool"]]],[11,"gt","","",2,[[["self"],["eventmask"]],["bool"]]],[11,"ge","","",2,[[["self"],["eventmask"]],["bool"]]],[11,"cmp","","",2,[[["self"],["eventmask"]],["ordering"]]],[11,"hash","","",2,N],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[18,"ACCESS","","File was accessed",2,N],[18,"ATTRIB","","Metadata (permissions, timestamps, ...) changed",2,N],[18,"CLOSE_WRITE","","File opened for writing was closed",2,N],[18,"CLOSE_NOWRITE","","File or directory not opened for writing was closed",2,N],[18,"CREATE","","File/directory created in watched directory",2,N],[18,"DELETE","","File/directory deleted from watched directory",2,N],[18,"DELETE_SELF","","Watched file/directory was deleted",2,N],[18,"MODIFY","","File was modified",2,N],[18,"MOVE_SELF","","Watched file/directory was moved",2,N],[18,"MOVED_FROM","","File was renamed/moved; watched directory contained old name",2,N],[18,"MOVED_TO","","File was renamed/moved; watched directory contains new name",2,N],[18,"OPEN","","File or directory was opened",2,N],[18,"IGNORED","","Watch was removed",2,N],[18,"ISDIR","","Event related to a directory",2,N],[18,"Q_OVERFLOW","","Event queue overflowed",2,N],[18,"UNMOUNT","","File system containing watched object was unmounted. File system was unmounted",2,N],[11,"empty","","Returns an empty set of flags.",2,[[],["eventmask"]]],[11,"all","","Returns the set containing all flags.",2,[[],["eventmask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",2,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",2,[[["u32"]],["option",["eventmask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",2,[[["u32"]],["eventmask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",2,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",2,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",2,[[["self"],["eventmask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",2,[[["self"],["eventmask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",2,[[["self"],["eventmask"]]]],[11,"remove","","Removes the specified flags in-place.",2,[[["self"],["eventmask"]]]],[11,"toggle","","Toggles the specified flags in-place.",2,[[["self"],["eventmask"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",2,[[["self"],["eventmask"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",2,[[["self"],["eventmask"]],["eventmask"]]],[11,"bitor_assign","","Adds the set of flags.",2,[[["self"],["eventmask"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",2,[[["self"],["eventmask"]],["eventmask"]]],[11,"bitxor_assign","","Toggles the set of flags.",2,[[["self"],["eventmask"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",2,[[["self"],["eventmask"]],["eventmask"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",2,[[["self"],["eventmask"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",2,[[["self"],["eventmask"]],["eventmask"]]],[11,"sub_assign","","Disables all flags enabled in the set.",2,[[["self"],["eventmask"]]]],[11,"not","","Returns the complement of this set of flags.",2,[[["self"]],["eventmask"]]],[11,"extend","","",2,[[["self"],["t"]]]],[11,"from_iter","","",2,[[["t"]],["eventmask"]]],[11,"init","","Creates an [`Inotify`] instance",3,[[],["result",["inotify"]]]],[11,"add_watch","","Adds or updates a watch for the given path",3,[[["self"],["p"],["watchmask"]],["result",["watchdescriptor"]]]],[11,"rm_watch","","Stops watching a file",3,[[["self"],["watchdescriptor"]],["result"]]],[11,"read_events_blocking","","Waits until events are available, then returns them",3,N],[11,"read_events","","Returns any available events",3,N],[11,"event_stream","","Create a stream which collects events",3,N],[11,"event_stream_with_handle","","Create a stream which collects events, associated with the given reactor.",3,N],[11,"close","","Closes the inotify instance",3,[[["self"]],["result"]]],[11,"as_raw_fd","","",3,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",3,[[["rawfd"]],["self"]]],[11,"into_raw_fd","","",3,[[["self"]],["rawfd"]]],[11,"eq","","",4,[[["self"],["watchmask"]],["bool"]]],[11,"ne","","",4,[[["self"],["watchmask"]],["bool"]]],[11,"clone","","",4,[[["self"]],["watchmask"]]],[11,"partial_cmp","","",4,[[["self"],["watchmask"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["watchmask"]],["bool"]]],[11,"le","","",4,[[["self"],["watchmask"]],["bool"]]],[11,"gt","","",4,[[["self"],["watchmask"]],["bool"]]],[11,"ge","","",4,[[["self"],["watchmask"]],["bool"]]],[11,"cmp","","",4,[[["self"],["watchmask"]],["ordering"]]],[11,"hash","","",4,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[18,"ACCESS","","File was accessed",4,N],[18,"ATTRIB","","Metadata (permissions, timestamps, ...) changed",4,N],[18,"CLOSE_WRITE","","File opened for writing was closed",4,N],[18,"CLOSE_NOWRITE","","File or directory not opened for writing was closed",4,N],[18,"CREATE","","File/directory created in watched directory",4,N],[18,"DELETE","","File/directory deleted from watched directory",4,N],[18,"DELETE_SELF","","Watched file/directory was deleted",4,N],[18,"MODIFY","","File was modified",4,N],[18,"MOVE_SELF","","Watched file/directory was moved",4,N],[18,"MOVED_FROM","","File was renamed/moved; watched directory contained old name",4,N],[18,"MOVED_TO","","File was renamed/moved; watched directory contains new name",4,N],[18,"OPEN","","File or directory was opened",4,N],[18,"ALL_EVENTS","","Watch for all events",4,N],[18,"MOVE","","Watch for all move events",4,N],[18,"CLOSE","","Watch for all close events",4,N],[18,"DONT_FOLLOW","","Don't dereference the path if it is a symbolic link",4,N],[18,"EXCL_UNLINK","","Filter events for directory entries that have been unlinked",4,N],[18,"MASK_ADD","","If a watch for the inode exists, amend it instead of replacing it",4,N],[18,"ONESHOT","","Only receive one event, then remove the watch",4,N],[18,"ONLYDIR","","Only watch path, if it is a directory",4,N],[11,"empty","","Returns an empty set of flags.",4,[[],["watchmask"]]],[11,"all","","Returns the set containing all flags.",4,[[],["watchmask"]]],[11,"bits","","Returns the raw value of the flags currently stored.",4,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",4,[[["u32"]],["option",["watchmask"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",4,[[["u32"]],["watchmask"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",4,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4,[[["self"],["watchmask"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4,[[["self"],["watchmask"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",4,[[["self"],["watchmask"]]]],[11,"remove","","Removes the specified flags in-place.",4,[[["self"],["watchmask"]]]],[11,"toggle","","Toggles the specified flags in-place.",4,[[["self"],["watchmask"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",4,[[["self"],["watchmask"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",4,[[["self"],["watchmask"]],["watchmask"]]],[11,"bitor_assign","","Adds the set of flags.",4,[[["self"],["watchmask"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4,[[["self"],["watchmask"]],["watchmask"]]],[11,"bitxor_assign","","Toggles the set of flags.",4,[[["self"],["watchmask"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",4,[[["self"],["watchmask"]],["watchmask"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",4,[[["self"],["watchmask"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",4,[[["self"],["watchmask"]],["watchmask"]]],[11,"sub_assign","","Disables all flags enabled in the set.",4,[[["self"],["watchmask"]]]],[11,"not","","Returns the complement of this set of flags.",4,[[["self"]],["watchmask"]]],[11,"extend","","",4,[[["self"],["t"]]]],[11,"from_iter","","",4,[[["t"]],["watchmask"]]],[11,"clone","","",5,[[["self"]],["watchdescriptor"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["self"]],["bool"]]],[11,"hash","","",5,[[["self"],["h"]]]],[11,"poll","","",6,[[["self"]],["poll",["option"]]]],[6,"EventOwned","","An owned version of `Event`",N,N]],"paths":[[3,"Event"],[3,"Events"],[3,"EventMask"],[3,"Inotify"],[3,"WatchMask"],[3,"WatchDescriptor"],[3,"EventStream"]]};
searchIndex["inotify_sys"]={"doc":"inotify bindings for the Rust programming language","items":[[5,"close","inotify_sys","",N,[[["i32"]],["i32"]]],[5,"read","","",N,N],[3,"inotify_event","","Describes a file system event",N,N],[12,"wd","","Identifies the watch for which this event occurs",0,N],[12,"mask","","Describes the type file system event",0,N],[12,"cookie","","A number that connects related events",0,N],[12,"len","","The length of `name`",0,N],[5,"inotify_init","","Creates an inotify instance",N,N],[5,"inotify_init1","","Creates an inotify instance",N,N],[5,"inotify_add_watch","","Adds or updates an inotify watch",N,N],[5,"inotify_rm_watch","","Removes an inotify watch",N,N],[17,"IN_CLOEXEC","","Set the `FD_CLOEXEC` flag for an inotify instance",N,N],[17,"IN_NONBLOCK","","Set an inotify instance to non-blocking mode",N,N],[17,"IN_ACCESS","","Event: File was accessed",N,N],[17,"IN_MODIFY","","Event: File was modified",N,N],[17,"IN_ATTRIB","","Event: Metadata was changed",N,N],[17,"IN_CLOSE_WRITE","","Event: Writable file was closed",N,N],[17,"IN_CLOSE_NOWRITE","","Event: Non-writable file or directory was closed",N,N],[17,"IN_OPEN","","Event: File or directory was opened",N,N],[17,"IN_MOVED_FROM","","Event: File or directory was moved out of watched directory",N,N],[17,"IN_MOVED_TO","","Event: File or directory was moved into watched directory",N,N],[17,"IN_CREATE","","Event: File or directory was created in watched directory",N,N],[17,"IN_DELETE","","Event: File or directory in watched directory was deleted",N,N],[17,"IN_DELETE_SELF","","Event: Watched file or directory was deleted",N,N],[17,"IN_MOVE_SELF","","Event: Watched file or directory was moved",N,N],[17,"IN_MOVE","","Event: File or directory within watched directory was moved",N,N],[17,"IN_CLOSE","","Event: File was closed",N,N],[17,"IN_ALL_EVENTS","","Event: Any event occured",N,N],[17,"IN_ONLYDIR","","Only watch path, if it is a directory",N,N],[17,"IN_DONT_FOLLOW","","Don't dereference path, if it is a symbolic link",N,N],[17,"IN_EXCL_UNLINK","","Ignore events for children, that have been unlinked from watched directory",N,N],[17,"IN_MASK_ADD","","Update existing watch mask, instead of replacing it",N,N],[17,"IN_ONESHOT","","Remove watch after one event",N,N],[17,"IN_ISDIR","","Indicates that the subject of an event is a directory",N,N],[17,"IN_UNMOUNT","","Indicates that file system containing a watched object has been unmounted",N,N],[17,"IN_Q_OVERFLOW","","Indicates that the event queue has overflowed",N,N],[17,"IN_IGNORED","","Indicates that a file system watch was removed",N,N],[11,"clone","","",0,[[["self"]],["inotify_event"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"inotify_event"]]};
searchIndex["iovec"]={"doc":"A specialized byte slice type for performing vectored I/O operations.","items":[[3,"IoVec","iovec","A specialized byte slice type for performing vectored I/O operations.",N,N],[0,"unix","","IoVec extensions for Unix platforms.",N,N],[5,"as_os_slice","iovec::unix","Convert a slice of `IoVec` refs to a slice of `libc::iovec`.",N,N],[5,"as_os_slice_mut","","Convert a mutable slice of `IoVec` refs to a mutable slice of `libc::iovec`.",N,N],[17,"MAX_LENGTH","iovec","Max length of an `IoVec` slice.",N,N],[11,"from_bytes","","",0,N],[11,"from_bytes_mut","","",0,N],[11,"deref","","",0,N],[11,"deref_mut","","",0,N]],"paths":[[3,"IoVec"]]};
searchIndex["itoa"]={"doc":"","items":[[3,"Buffer","itoa","A safe API for formatting integers to text.",N,N],[5,"write","","Write integer to an `io::Write`.",N,[[["w"],["v"]],["result",["usize"]]]],[5,"fmt","","Write integer to an `fmt::Write`.",N,[[["w"],["v"]],["result"]]],[8,"Integer","","An integer that can be formatted by `itoa::write` and `itoa::fmt`.",N,N],[11,"default","","",0,[[],["buffer"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["buffer"]]],[11,"format","","Print an integer into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["i"]],["str"]]]],"paths":[[3,"Buffer"]]};
searchIndex["kernel32"]={"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",N,[[["t"]]]],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",N,N],[14,"lazy_static","","",N,N]],"paths":[]};
searchIndex["lazycell"]={"doc":"This crate provides a `LazyCell` struct which acts as a lazily filled `Cell`.","items":[[3,"LazyCell","lazycell","A lazily filled `Cell`, with mutable contents.",N,N],[3,"AtomicLazyCell","","A lazily filled and thread-safe `Cell`, with frozen contents.",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"default","","",0,[[],["lazycell"]]],[11,"new","","Creates a new, empty, `LazyCell`.",0,[[],["lazycell"]]],[11,"fill","","Put a value into this cell.",0,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",0,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",0,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_mut","","Borrows the contents of this lazy cell mutably for the duration of the cell itself.",0,[[["self"]],["option"]]],[11,"borrow_with","","Borrows the contents of this lazy cell for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"borrow_mut_with","","Borrows the contents of this `LazyCell` mutably for the duration of the cell itself.",0,[[["self"],["f"]],["t"]]],[11,"try_borrow_with","","Same as `borrow_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"try_borrow_mut_with","","Same as `borrow_mut_with`, but allows the initializing function to fail.",0,[[["self"],["f"]],["result"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",0,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",0,[[["self"]],["option"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"default","","",1,[[],["atomiclazycell"]]],[18,"NONE","","An empty `AtomicLazyCell`.",1,N],[11,"new","","Creates a new, empty, `AtomicLazyCell`.",1,[[],["atomiclazycell"]]],[11,"fill","","Put a value into this cell.",1,[[["self"],["t"]],["result"]]],[11,"replace","","Put a value into this cell.",1,[[["self"],["t"]],["option"]]],[11,"filled","","Test whether this cell has been previously filled.",1,[[["self"]],["bool"]]],[11,"borrow","","Borrows the contents of this lazy cell for the duration of the cell itself.",1,[[["self"]],["option"]]],[11,"into_inner","","Consumes this `LazyCell`, returning the underlying value.",1,[[["self"]],["option"]]],[11,"get","","Returns a copy of the contents of the lazy cell.",1,[[["self"]],["option"]]]],"paths":[[3,"LazyCell"],[3,"AtomicLazyCell"]]};
searchIndex["libc"]={"doc":"Crate docs","items":[[3,"group","libc","",N,N],[12,"gr_name","","",0,N],[12,"gr_passwd","","",0,N],[12,"gr_gid","","",0,N],[12,"gr_mem","","",0,N],[3,"utimbuf","","",N,N],[12,"actime","","",1,N],[12,"modtime","","",1,N],[3,"timeval","","",N,N],[12,"tv_sec","","",2,N],[12,"tv_usec","","",2,N],[3,"timespec","","",N,N],[12,"tv_sec","","",3,N],[12,"tv_nsec","","",3,N],[3,"rlimit","","",N,N],[12,"rlim_cur","","",4,N],[12,"rlim_max","","",4,N],[3,"rusage","","",N,N],[12,"ru_utime","","",5,N],[12,"ru_stime","","",5,N],[12,"ru_maxrss","","",5,N],[12,"ru_ixrss","","",5,N],[12,"ru_idrss","","",5,N],[12,"ru_isrss","","",5,N],[12,"ru_minflt","","",5,N],[12,"ru_majflt","","",5,N],[12,"ru_nswap","","",5,N],[12,"ru_inblock","","",5,N],[12,"ru_oublock","","",5,N],[12,"ru_msgsnd","","",5,N],[12,"ru_msgrcv","","",5,N],[12,"ru_nsignals","","",5,N],[12,"ru_nvcsw","","",5,N],[12,"ru_nivcsw","","",5,N],[3,"in_addr","","",N,N],[12,"s_addr","","",6,N],[3,"in6_addr","","",N,N],[12,"s6_addr","","",7,N],[3,"ip_mreq","","",N,N],[12,"imr_multiaddr","","",8,N],[12,"imr_interface","","",8,N],[3,"ipv6_mreq","","",N,N],[12,"ipv6mr_multiaddr","","",9,N],[12,"ipv6mr_interface","","",9,N],[3,"hostent","","",N,N],[12,"h_name","","",10,N],[12,"h_aliases","","",10,N],[12,"h_addrtype","","",10,N],[12,"h_length","","",10,N],[12,"h_addr_list","","",10,N],[3,"iovec","","",N,N],[12,"iov_base","","",11,N],[12,"iov_len","","",11,N],[3,"pollfd","","",N,N],[12,"fd","","",12,N],[12,"events","","",12,N],[12,"revents","","",12,N],[3,"winsize","","",N,N],[12,"ws_row","","",13,N],[12,"ws_col","","",13,N],[12,"ws_xpixel","","",13,N],[12,"ws_ypixel","","",13,N],[3,"linger","","",N,N],[12,"l_onoff","","",14,N],[12,"l_linger","","",14,N],[3,"sigval","","",N,N],[12,"sival_ptr","","",15,N],[3,"itimerval","","",N,N],[12,"it_interval","","",16,N],[12,"it_value","","",16,N],[3,"tms","","",N,N],[12,"tms_utime","","",17,N],[12,"tms_stime","","",17,N],[12,"tms_cutime","","",17,N],[12,"tms_cstime","","",17,N],[3,"servent","","",N,N],[12,"s_name","","",18,N],[12,"s_aliases","","",18,N],[12,"s_port","","",18,N],[12,"s_proto","","",18,N],[3,"protoent","","",N,N],[12,"p_name","","",19,N],[12,"p_aliases","","",19,N],[12,"p_proto","","",19,N],[3,"sockaddr","","",N,N],[12,"sa_family","","",20,N],[12,"sa_data","","",20,N],[3,"sockaddr_in","","",N,N],[12,"sin_family","","",21,N],[12,"sin_port","","",21,N],[12,"sin_addr","","",21,N],[12,"sin_zero","","",21,N],[3,"sockaddr_in6","","",N,N],[12,"sin6_family","","",22,N],[12,"sin6_port","","",22,N],[12,"sin6_flowinfo","","",22,N],[12,"sin6_addr","","",22,N],[12,"sin6_scope_id","","",22,N],[3,"sockaddr_un","","",N,N],[12,"sun_family","","",23,N],[12,"sun_path","","",23,N],[3,"sockaddr_storage","","",N,N],[12,"ss_family","","",24,N],[3,"addrinfo","","",N,N],[12,"ai_flags","","",25,N],[12,"ai_family","","",25,N],[12,"ai_socktype","","",25,N],[12,"ai_protocol","","",25,N],[12,"ai_addrlen","","",25,N],[12,"ai_addr","","",25,N],[12,"ai_canonname","","",25,N],[12,"ai_next","","",25,N],[3,"sockaddr_nl","","",N,N],[12,"nl_family","","",26,N],[12,"nl_pid","","",26,N],[12,"nl_groups","","",26,N],[3,"sockaddr_ll","","",N,N],[12,"sll_family","","",27,N],[12,"sll_protocol","","",27,N],[12,"sll_ifindex","","",27,N],[12,"sll_hatype","","",27,N],[12,"sll_pkttype","","",27,N],[12,"sll_halen","","",27,N],[12,"sll_addr","","",27,N],[3,"fd_set","","",N,N],[3,"tm","","",N,N],[12,"tm_sec","","",28,N],[12,"tm_min","","",28,N],[12,"tm_hour","","",28,N],[12,"tm_mday","","",28,N],[12,"tm_mon","","",28,N],[12,"tm_year","","",28,N],[12,"tm_wday","","",28,N],[12,"tm_yday","","",28,N],[12,"tm_isdst","","",28,N],[12,"tm_gmtoff","","",28,N],[12,"tm_zone","","",28,N],[3,"sched_param","","",N,N],[12,"sched_priority","","",29,N],[3,"Dl_info","","",N,N],[12,"dli_fname","","",30,N],[12,"dli_fbase","","",30,N],[12,"dli_sname","","",30,N],[12,"dli_saddr","","",30,N],[3,"epoll_event","","",N,N],[12,"events","","",31,N],[12,"u64","","",31,N],[3,"utsname","","",N,N],[12,"sysname","","",32,N],[12,"nodename","","",32,N],[12,"release","","",32,N],[12,"version","","",32,N],[12,"machine","","",32,N],[12,"domainname","","",32,N],[3,"lconv","","",N,N],[12,"decimal_point","","",33,N],[12,"thousands_sep","","",33,N],[12,"grouping","","",33,N],[12,"int_curr_symbol","","",33,N],[12,"currency_symbol","","",33,N],[12,"mon_decimal_point","","",33,N],[12,"mon_thousands_sep","","",33,N],[12,"mon_grouping","","",33,N],[12,"positive_sign","","",33,N],[12,"negative_sign","","",33,N],[12,"int_frac_digits","","",33,N],[12,"frac_digits","","",33,N],[12,"p_cs_precedes","","",33,N],[12,"p_sep_by_space","","",33,N],[12,"n_cs_precedes","","",33,N],[12,"n_sep_by_space","","",33,N],[12,"p_sign_posn","","",33,N],[12,"n_sign_posn","","",33,N],[12,"int_p_cs_precedes","","",33,N],[12,"int_p_sep_by_space","","",33,N],[12,"int_n_cs_precedes","","",33,N],[12,"int_n_sep_by_space","","",33,N],[12,"int_p_sign_posn","","",33,N],[12,"int_n_sign_posn","","",33,N],[3,"sigevent","","",N,N],[12,"sigev_value","","",34,N],[12,"sigev_signo","","",34,N],[12,"sigev_notify","","",34,N],[12,"sigev_notify_thread_id","","",34,N],[3,"in_pktinfo","","",N,N],[12,"ipi_ifindex","","",35,N],[12,"ipi_spec_dst","","",35,N],[12,"ipi_addr","","",35,N],[3,"ifaddrs","","",N,N],[12,"ifa_next","","",36,N],[12,"ifa_name","","",36,N],[12,"ifa_flags","","",36,N],[12,"ifa_addr","","",36,N],[12,"ifa_netmask","","",36,N],[12,"ifa_ifu","","",36,N],[12,"ifa_data","","",36,N],[3,"in6_rtmsg","","",N,N],[3,"arpreq","","",N,N],[12,"arp_pa","","",37,N],[12,"arp_ha","","",37,N],[12,"arp_flags","","",37,N],[12,"arp_netmask","","",37,N],[12,"arp_dev","","",37,N],[3,"arpreq_old","","",N,N],[12,"arp_pa","","",38,N],[12,"arp_ha","","",38,N],[12,"arp_flags","","",38,N],[12,"arp_netmask","","",38,N],[3,"arphdr","","",N,N],[12,"ar_hrd","","",39,N],[12,"ar_pro","","",39,N],[12,"ar_hln","","",39,N],[12,"ar_pln","","",39,N],[12,"ar_op","","",39,N],[3,"dirent","","",N,N],[12,"d_ino","","",40,N],[12,"d_off","","",40,N],[12,"d_reclen","","",40,N],[12,"d_type","","",40,N],[12,"d_name","","",40,N],[3,"dirent64","","",N,N],[12,"d_ino","","",41,N],[12,"d_off","","",41,N],[12,"d_reclen","","",41,N],[12,"d_type","","",41,N],[12,"d_name","","",41,N],[3,"rlimit64","","",N,N],[12,"rlim_cur","","",42,N],[12,"rlim_max","","",42,N],[3,"glob_t","","",N,N],[12,"gl_pathc","","",43,N],[12,"gl_pathv","","",43,N],[12,"gl_offs","","",43,N],[12,"gl_flags","","",43,N],[3,"pthread_mutex_t","","",N,N],[3,"pthread_rwlock_t","","",N,N],[3,"pthread_mutexattr_t","","",N,N],[3,"pthread_rwlockattr_t","","",N,N],[3,"pthread_cond_t","","",N,N],[3,"pthread_condattr_t","","",N,N],[3,"passwd","","",N,N],[12,"pw_name","","",44,N],[12,"pw_passwd","","",44,N],[12,"pw_uid","","",44,N],[12,"pw_gid","","",44,N],[12,"pw_gecos","","",44,N],[12,"pw_dir","","",44,N],[12,"pw_shell","","",44,N],[3,"spwd","","",N,N],[12,"sp_namp","","",45,N],[12,"sp_pwdp","","",45,N],[12,"sp_lstchg","","",45,N],[12,"sp_min","","",45,N],[12,"sp_max","","",45,N],[12,"sp_warn","","",45,N],[12,"sp_inact","","",45,N],[12,"sp_expire","","",45,N],[12,"sp_flag","","",45,N],[3,"dqblk","","",N,N],[12,"dqb_bhardlimit","","",46,N],[12,"dqb_bsoftlimit","","",46,N],[12,"dqb_curspace","","",46,N],[12,"dqb_ihardlimit","","",46,N],[12,"dqb_isoftlimit","","",46,N],[12,"dqb_curinodes","","",46,N],[12,"dqb_btime","","",46,N],[12,"dqb_itime","","",46,N],[12,"dqb_valid","","",46,N],[3,"signalfd_siginfo","","",N,N],[12,"ssi_signo","","",47,N],[12,"ssi_errno","","",47,N],[12,"ssi_code","","",47,N],[12,"ssi_pid","","",47,N],[12,"ssi_uid","","",47,N],[12,"ssi_fd","","",47,N],[12,"ssi_tid","","",47,N],[12,"ssi_band","","",47,N],[12,"ssi_overrun","","",47,N],[12,"ssi_trapno","","",47,N],[12,"ssi_status","","",47,N],[12,"ssi_int","","",47,N],[12,"ssi_ptr","","",47,N],[12,"ssi_utime","","",47,N],[12,"ssi_stime","","",47,N],[12,"ssi_addr","","",47,N],[3,"itimerspec","","",N,N],[12,"it_interval","","",48,N],[12,"it_value","","",48,N],[3,"fsid_t","","",N,N],[3,"mq_attr","","",N,N],[12,"mq_flags","","",49,N],[12,"mq_maxmsg","","",49,N],[12,"mq_msgsize","","",49,N],[12,"mq_curmsgs","","",49,N],[3,"packet_mreq","","",N,N],[12,"mr_ifindex","","",50,N],[12,"mr_type","","",50,N],[12,"mr_alen","","",50,N],[12,"mr_address","","",50,N],[3,"cpu_set_t","","",N,N],[3,"if_nameindex","","",N,N],[12,"if_index","","",51,N],[12,"if_name","","",51,N],[3,"msginfo","","",N,N],[12,"msgpool","","",52,N],[12,"msgmap","","",52,N],[12,"msgmax","","",52,N],[12,"msgmnb","","",52,N],[12,"msgmni","","",52,N],[12,"msgssz","","",52,N],[12,"msgtql","","",52,N],[12,"msgseg","","",52,N],[3,"mmsghdr","","",N,N],[12,"msg_hdr","","",53,N],[12,"msg_len","","",53,N],[3,"sembuf","","",N,N],[12,"sem_num","","",54,N],[12,"sem_op","","",54,N],[12,"sem_flg","","",54,N],[3,"input_event","","",N,N],[12,"time","","",55,N],[12,"type_","","",55,N],[12,"code","","",55,N],[12,"value","","",55,N],[3,"input_id","","",N,N],[12,"bustype","","",56,N],[12,"vendor","","",56,N],[12,"product","","",56,N],[12,"version","","",56,N],[3,"input_absinfo","","",N,N],[12,"value","","",57,N],[12,"minimum","","",57,N],[12,"maximum","","",57,N],[12,"fuzz","","",57,N],[12,"flat","","",57,N],[12,"resolution","","",57,N],[3,"input_keymap_entry","","",N,N],[12,"flags","","",58,N],[12,"len","","",58,N],[12,"index","","",58,N],[12,"keycode","","",58,N],[12,"scancode","","",58,N],[3,"input_mask","","",N,N],[12,"type_","","",59,N],[12,"codes_size","","",59,N],[12,"codes_ptr","","",59,N],[3,"ff_replay","","",N,N],[12,"length","","",60,N],[12,"delay","","",60,N],[3,"ff_trigger","","",N,N],[12,"button","","",61,N],[12,"interval","","",61,N],[3,"ff_envelope","","",N,N],[12,"attack_length","","",62,N],[12,"attack_level","","",62,N],[12,"fade_length","","",62,N],[12,"fade_level","","",62,N],[3,"ff_constant_effect","","",N,N],[12,"level","","",63,N],[12,"envelope","","",63,N],[3,"ff_ramp_effect","","",N,N],[12,"start_level","","",64,N],[12,"end_level","","",64,N],[12,"envelope","","",64,N],[3,"ff_condition_effect","","",N,N],[12,"right_saturation","","",65,N],[12,"left_saturation","","",65,N],[12,"right_coeff","","",65,N],[12,"left_coeff","","",65,N],[12,"deadband","","",65,N],[12,"center","","",65,N],[3,"ff_periodic_effect","","",N,N],[12,"waveform","","",66,N],[12,"period","","",66,N],[12,"magnitude","","",66,N],[12,"offset","","",66,N],[12,"phase","","",66,N],[12,"envelope","","",66,N],[12,"custom_len","","",66,N],[12,"custom_data","","",66,N],[3,"ff_rumble_effect","","",N,N],[12,"strong_magnitude","","",67,N],[12,"weak_magnitude","","",67,N],[3,"ff_effect","","",N,N],[12,"type_","","",68,N],[12,"id","","",68,N],[12,"direction","","",68,N],[12,"trigger","","",68,N],[12,"replay","","",68,N],[12,"u","","",68,N],[3,"dl_phdr_info","","",N,N],[12,"dlpi_addr","","",69,N],[12,"dlpi_name","","",69,N],[12,"dlpi_phdr","","",69,N],[12,"dlpi_phnum","","",69,N],[12,"dlpi_adds","","",69,N],[12,"dlpi_subs","","",69,N],[12,"dlpi_tls_modid","","",69,N],[12,"dlpi_tls_data","","",69,N],[3,"Elf32_Phdr","","",N,N],[12,"p_type","","",70,N],[12,"p_offset","","",70,N],[12,"p_vaddr","","",70,N],[12,"p_paddr","","",70,N],[12,"p_filesz","","",70,N],[12,"p_memsz","","",70,N],[12,"p_flags","","",70,N],[12,"p_align","","",70,N],[3,"Elf64_Phdr","","",N,N],[12,"p_type","","",71,N],[12,"p_flags","","",71,N],[12,"p_offset","","",71,N],[12,"p_vaddr","","",71,N],[12,"p_paddr","","",71,N],[12,"p_filesz","","",71,N],[12,"p_memsz","","",71,N],[12,"p_align","","",71,N],[3,"ucred","","",N,N],[12,"pid","","",72,N],[12,"uid","","",72,N],[12,"gid","","",72,N],[3,"mntent","","",N,N],[12,"mnt_fsname","","",73,N],[12,"mnt_dir","","",73,N],[12,"mnt_type","","",73,N],[12,"mnt_opts","","",73,N],[12,"mnt_freq","","",73,N],[12,"mnt_passno","","",73,N],[3,"posix_spawn_file_actions_t","","",N,N],[3,"posix_spawnattr_t","","",N,N],[3,"genlmsghdr","","",N,N],[12,"cmd","","",74,N],[12,"version","","",74,N],[12,"reserved","","",74,N],[3,"in6_pktinfo","","",N,N],[12,"ipi6_addr","","",75,N],[12,"ipi6_ifindex","","",75,N],[3,"arpd_request","","",N,N],[12,"req","","",76,N],[12,"ip","","",76,N],[12,"dev","","",76,N],[12,"stamp","","",76,N],[12,"updated","","",76,N],[12,"ha","","",76,N],[3,"aiocb","","",N,N],[12,"aio_fildes","","",77,N],[12,"aio_lio_opcode","","",77,N],[12,"aio_reqprio","","",77,N],[12,"aio_buf","","",77,N],[12,"aio_nbytes","","",77,N],[12,"aio_sigevent","","",77,N],[12,"aio_offset","","",77,N],[3,"__exit_status","","",N,N],[12,"e_termination","","",78,N],[12,"e_exit","","",78,N],[3,"__timeval","","",N,N],[12,"tv_sec","","",79,N],[12,"tv_usec","","",79,N],[3,"utmpx","","",N,N],[12,"ut_type","","",80,N],[12,"ut_pid","","",80,N],[12,"ut_line","","",80,N],[12,"ut_id","","",80,N],[12,"ut_user","","",80,N],[12,"ut_host","","",80,N],[12,"ut_exit","","",80,N],[12,"ut_session","","",80,N],[12,"ut_tv","","",80,N],[12,"ut_addr_v6","","",80,N],[3,"sigaction","","",N,N],[12,"sa_sigaction","","",81,N],[12,"sa_mask","","",81,N],[12,"sa_flags","","",81,N],[12,"sa_restorer","","",81,N],[3,"stack_t","","",N,N],[12,"ss_sp","","",82,N],[12,"ss_flags","","",82,N],[12,"ss_size","","",82,N],[3,"siginfo_t","","",N,N],[12,"si_signo","","",83,N],[12,"si_errno","","",83,N],[12,"si_code","","",83,N],[12,"_pad","","",83,N],[3,"glob64_t","","",N,N],[12,"gl_pathc","","",84,N],[12,"gl_pathv","","",84,N],[12,"gl_offs","","",84,N],[12,"gl_flags","","",84,N],[3,"statfs","","",N,N],[12,"f_type","","",85,N],[12,"f_bsize","","",85,N],[12,"f_blocks","","",85,N],[12,"f_bfree","","",85,N],[12,"f_bavail","","",85,N],[12,"f_files","","",85,N],[12,"f_ffree","","",85,N],[12,"f_fsid","","",85,N],[12,"f_namelen","","",85,N],[12,"f_frsize","","",85,N],[3,"msghdr","","",N,N],[12,"msg_name","","",86,N],[12,"msg_namelen","","",86,N],[12,"msg_iov","","",86,N],[12,"msg_iovlen","","",86,N],[12,"msg_control","","",86,N],[12,"msg_controllen","","",86,N],[12,"msg_flags","","",86,N],[3,"cmsghdr","","",N,N],[12,"cmsg_len","","",87,N],[12,"cmsg_level","","",87,N],[12,"cmsg_type","","",87,N],[3,"termios","","",N,N],[12,"c_iflag","","",88,N],[12,"c_oflag","","",88,N],[12,"c_cflag","","",88,N],[12,"c_lflag","","",88,N],[12,"c_line","","",88,N],[12,"c_cc","","",88,N],[12,"c_ispeed","","",88,N],[12,"c_ospeed","","",88,N],[3,"flock","","",N,N],[12,"l_type","","",89,N],[12,"l_whence","","",89,N],[12,"l_start","","",89,N],[12,"l_len","","",89,N],[12,"l_pid","","",89,N],[3,"sem_t","","",N,N],[3,"mallinfo","","",N,N],[12,"arena","","",90,N],[12,"ordblks","","",90,N],[12,"smblks","","",90,N],[12,"hblks","","",90,N],[12,"hblkhd","","",90,N],[12,"usmblks","","",90,N],[12,"fsmblks","","",90,N],[12,"uordblks","","",90,N],[12,"fordblks","","",90,N],[12,"keepcost","","",90,N],[3,"nlmsghdr","","",N,N],[12,"nlmsg_len","","",91,N],[12,"nlmsg_type","","",91,N],[12,"nlmsg_flags","","",91,N],[12,"nlmsg_seq","","",91,N],[12,"nlmsg_pid","","",91,N],[3,"nlmsgerr","","",N,N],[12,"error","","",92,N],[12,"msg","","",92,N],[3,"nl_pktinfo","","",N,N],[12,"group","","",93,N],[3,"nl_mmap_req","","",N,N],[12,"nm_block_size","","",94,N],[12,"nm_block_nr","","",94,N],[12,"nm_frame_size","","",94,N],[12,"nm_frame_nr","","",94,N],[3,"nl_mmap_hdr","","",N,N],[12,"nm_status","","",95,N],[12,"nm_len","","",95,N],[12,"nm_group","","",95,N],[12,"nm_pid","","",95,N],[12,"nm_uid","","",95,N],[12,"nm_gid","","",95,N],[3,"nlattr","","",N,N],[12,"nla_len","","",96,N],[12,"nla_type","","",96,N],[3,"rtentry","","",N,N],[12,"rt_pad1","","",97,N],[12,"rt_dst","","",97,N],[12,"rt_gateway","","",97,N],[12,"rt_genmask","","",97,N],[12,"rt_flags","","",97,N],[12,"rt_pad2","","",97,N],[12,"rt_pad3","","",97,N],[12,"rt_tos","","",97,N],[12,"rt_class","","",97,N],[12,"rt_pad4","","",97,N],[12,"rt_metric","","",97,N],[12,"rt_dev","","",97,N],[12,"rt_mtu","","",97,N],[12,"rt_window","","",97,N],[12,"rt_irtt","","",97,N],[3,"sigset_t","","",N,N],[3,"sysinfo","","",N,N],[12,"uptime","","",98,N],[12,"loads","","",98,N],[12,"totalram","","",98,N],[12,"freeram","","",98,N],[12,"sharedram","","",98,N],[12,"bufferram","","",98,N],[12,"totalswap","","",98,N],[12,"freeswap","","",98,N],[12,"procs","","",98,N],[12,"pad","","",98,N],[12,"totalhigh","","",98,N],[12,"freehigh","","",98,N],[12,"mem_unit","","",98,N],[12,"_f","","",98,N],[3,"msqid_ds","","",N,N],[12,"msg_perm","","",99,N],[12,"msg_stime","","",99,N],[12,"msg_rtime","","",99,N],[12,"msg_ctime","","",99,N],[12,"msg_qnum","","",99,N],[12,"msg_qbytes","","",99,N],[12,"msg_lspid","","",99,N],[12,"msg_lrpid","","",99,N],[3,"stat","","",N,N],[12,"st_dev","","",100,N],[12,"st_ino","","",100,N],[12,"st_nlink","","",100,N],[12,"st_mode","","",100,N],[12,"st_uid","","",100,N],[12,"st_gid","","",100,N],[12,"st_rdev","","",100,N],[12,"st_size","","",100,N],[12,"st_blksize","","",100,N],[12,"st_blocks","","",100,N],[12,"st_atime","","",100,N],[12,"st_atime_nsec","","",100,N],[12,"st_mtime","","",100,N],[12,"st_mtime_nsec","","",100,N],[12,"st_ctime","","",100,N],[12,"st_ctime_nsec","","",100,N],[3,"stat64","","",N,N],[12,"st_dev","","",101,N],[12,"st_ino","","",101,N],[12,"st_nlink","","",101,N],[12,"st_mode","","",101,N],[12,"st_uid","","",101,N],[12,"st_gid","","",101,N],[12,"st_rdev","","",101,N],[12,"st_size","","",101,N],[12,"st_blksize","","",101,N],[12,"st_blocks","","",101,N],[12,"st_atime","","",101,N],[12,"st_atime_nsec","","",101,N],[12,"st_mtime","","",101,N],[12,"st_mtime_nsec","","",101,N],[12,"st_ctime","","",101,N],[12,"st_ctime_nsec","","",101,N],[3,"statfs64","","",N,N],[12,"f_type","","",102,N],[12,"f_bsize","","",102,N],[12,"f_blocks","","",102,N],[12,"f_bfree","","",102,N],[12,"f_bavail","","",102,N],[12,"f_files","","",102,N],[12,"f_ffree","","",102,N],[12,"f_fsid","","",102,N],[12,"f_namelen","","",102,N],[12,"f_frsize","","",102,N],[12,"f_flags","","",102,N],[12,"f_spare","","",102,N],[3,"statvfs64","","",N,N],[12,"f_bsize","","",103,N],[12,"f_frsize","","",103,N],[12,"f_blocks","","",103,N],[12,"f_bfree","","",103,N],[12,"f_bavail","","",103,N],[12,"f_files","","",103,N],[12,"f_ffree","","",103,N],[12,"f_favail","","",103,N],[12,"f_fsid","","",103,N],[12,"f_flag","","",103,N],[12,"f_namemax","","",103,N],[3,"pthread_attr_t","","",N,N],[3,"_libc_fpxreg","","",N,N],[12,"significand","","",104,N],[12,"exponent","","",104,N],[3,"_libc_xmmreg","","",N,N],[12,"element","","",105,N],[3,"_libc_fpstate","","",N,N],[12,"cwd","","",106,N],[12,"swd","","",106,N],[12,"ftw","","",106,N],[12,"fop","","",106,N],[12,"rip","","",106,N],[12,"rdp","","",106,N],[12,"mxcsr","","",106,N],[12,"mxcr_mask","","",106,N],[12,"_st","","",106,N],[12,"_xmm","","",106,N],[3,"user_fpregs_struct","","",N,N],[12,"cwd","","",107,N],[12,"swd","","",107,N],[12,"ftw","","",107,N],[12,"fop","","",107,N],[12,"rip","","",107,N],[12,"rdp","","",107,N],[12,"mxcsr","","",107,N],[12,"mxcr_mask","","",107,N],[12,"st_space","","",107,N],[12,"xmm_space","","",107,N],[3,"user_regs_struct","","",N,N],[12,"r15","","",108,N],[12,"r14","","",108,N],[12,"r13","","",108,N],[12,"r12","","",108,N],[12,"rbp","","",108,N],[12,"rbx","","",108,N],[12,"r11","","",108,N],[12,"r10","","",108,N],[12,"r9","","",108,N],[12,"r8","","",108,N],[12,"rax","","",108,N],[12,"rcx","","",108,N],[12,"rdx","","",108,N],[12,"rsi","","",108,N],[12,"rdi","","",108,N],[12,"orig_rax","","",108,N],[12,"rip","","",108,N],[12,"cs","","",108,N],[12,"eflags","","",108,N],[12,"rsp","","",108,N],[12,"ss","","",108,N],[12,"fs_base","","",108,N],[12,"gs_base","","",108,N],[12,"ds","","",108,N],[12,"es","","",108,N],[12,"fs","","",108,N],[12,"gs","","",108,N],[3,"user","","",N,N],[12,"regs","","",109,N],[12,"u_fpvalid","","",109,N],[12,"i387","","",109,N],[12,"u_tsize","","",109,N],[12,"u_dsize","","",109,N],[12,"u_ssize","","",109,N],[12,"start_code","","",109,N],[12,"start_stack","","",109,N],[12,"signal","","",109,N],[12,"u_ar0","","",109,N],[12,"u_fpstate","","",109,N],[12,"magic","","",109,N],[12,"u_comm","","",109,N],[12,"u_debugreg","","",109,N],[3,"mcontext_t","","",N,N],[12,"gregs","","",110,N],[12,"fpregs","","",110,N],[3,"ucontext_t","","",N,N],[12,"uc_flags","","",111,N],[12,"uc_link","","",111,N],[12,"uc_stack","","",111,N],[12,"uc_mcontext","","",111,N],[12,"uc_sigmask","","",111,N],[3,"ipc_perm","","",N,N],[12,"__key","","",112,N],[12,"uid","","",112,N],[12,"gid","","",112,N],[12,"cuid","","",112,N],[12,"cgid","","",112,N],[12,"mode","","",112,N],[12,"__seq","","",112,N],[3,"shmid_ds","","",N,N],[12,"shm_perm","","",113,N],[12,"shm_segsz","","",113,N],[12,"shm_atime","","",113,N],[12,"shm_dtime","","",113,N],[12,"shm_ctime","","",113,N],[12,"shm_cpid","","",113,N],[12,"shm_lpid","","",113,N],[12,"shm_nattch","","",113,N],[3,"termios2","","",N,N],[12,"c_iflag","","",114,N],[12,"c_oflag","","",114,N],[12,"c_cflag","","",114,N],[12,"c_lflag","","",114,N],[12,"c_line","","",114,N],[12,"c_cc","","",114,N],[12,"c_ispeed","","",114,N],[12,"c_ospeed","","",114,N],[3,"statvfs","","",N,N],[12,"f_bsize","","",115,N],[12,"f_frsize","","",115,N],[12,"f_blocks","","",115,N],[12,"f_bfree","","",115,N],[12,"f_bavail","","",115,N],[12,"f_files","","",115,N],[12,"f_ffree","","",115,N],[12,"f_favail","","",115,N],[12,"f_fsid","","",115,N],[12,"f_flag","","",115,N],[12,"f_namemax","","",115,N],[4,"c_void","","",N,N],[4,"FILE","","",N,N],[4,"fpos_t","","",N,N],[4,"DIR","","",N,N],[4,"locale_t","","",N,N],[4,"timezone","","",N,N],[4,"fpos64_t","","",N,N],[5,"FD_CLR","","",N,N],[5,"FD_ISSET","","",N,N],[5,"FD_SET","","",N,N],[5,"FD_ZERO","","",N,N],[5,"WIFSTOPPED","","",N,[[["c_int"]],["bool"]]],[5,"WSTOPSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFCONTINUED","","",N,[[["c_int"]],["bool"]]],[5,"WIFSIGNALED","","",N,[[["c_int"]],["bool"]]],[5,"WTERMSIG","","",N,[[["c_int"]],["c_int"]]],[5,"WIFEXITED","","",N,[[["c_int"]],["bool"]]],[5,"WEXITSTATUS","","",N,[[["c_int"]],["c_int"]]],[5,"WCOREDUMP","","",N,[[["c_int"]],["bool"]]],[5,"QCMD","","",N,[[["c_int"],["c_int"]],["c_int"]]],[5,"IPOPT_COPIED","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_CLASS","","",N,[[["u8"]],["u8"]]],[5,"IPOPT_NUMBER","","",N,[[["u8"]],["u8"]]],[5,"CPU_ZERO","","",N,N],[5,"CPU_SET","","",N,N],[5,"CPU_CLR","","",N,N],[5,"CPU_ISSET","","",N,[[["usize"],["cpu_set_t"]],["bool"]]],[5,"CPU_EQUAL","","",N,[[["cpu_set_t"],["cpu_set_t"]],["bool"]]],[5,"major","","",N,[[["dev_t"]],["c_uint"]]],[5,"minor","","",N,[[["dev_t"]],["c_uint"]]],[5,"makedev","","",N,[[["c_uint"],["c_uint"]],["dev_t"]]],[5,"IPTOS_TOS","","",N,[[["u8"]],["u8"]]],[5,"IPTOS_PREC","","",N,[[["u8"]],["u8"]]],[5,"RT_TOS","","",N,[[["u8"]],["u8"]]],[5,"RT_ADDRCLASS","","",N,[[["u32"]],["u32"]]],[5,"RT_LOCALADDR","","",N,[[["u32"]],["bool"]]],[5,"NLA_ALIGN","","",N,[[["c_int"]],["c_int"]]],[5,"isalnum","","",N,N],[5,"isalpha","","",N,N],[5,"iscntrl","","",N,N],[5,"isdigit","","",N,N],[5,"isgraph","","",N,N],[5,"islower","","",N,N],[5,"isprint","","",N,N],[5,"ispunct","","",N,N],[5,"isspace","","",N,N],[5,"isupper","","",N,N],[5,"isxdigit","","",N,N],[5,"tolower","","",N,N],[5,"toupper","","",N,N],[5,"fopen","","",N,N],[5,"freopen","","",N,N],[5,"fflush","","",N,N],[5,"fclose","","",N,N],[5,"remove","","",N,N],[5,"rename","","",N,N],[5,"tmpfile","","",N,N],[5,"setvbuf","","",N,N],[5,"setbuf","","",N,N],[5,"getchar","","",N,N],[5,"putchar","","",N,N],[5,"fgetc","","",N,N],[5,"fgets","","",N,N],[5,"fputc","","",N,N],[5,"fputs","","",N,N],[5,"puts","","",N,N],[5,"ungetc","","",N,N],[5,"fread","","",N,N],[5,"fwrite","","",N,N],[5,"fseek","","",N,N],[5,"ftell","","",N,N],[5,"rewind","","",N,N],[5,"fgetpos","","",N,N],[5,"fsetpos","","",N,N],[5,"feof","","",N,N],[5,"ferror","","",N,N],[5,"perror","","",N,N],[5,"atoi","","",N,N],[5,"strtod","","",N,N],[5,"strtol","","",N,N],[5,"strtoul","","",N,N],[5,"calloc","","",N,N],[5,"malloc","","",N,N],[5,"realloc","","",N,N],[5,"free","","",N,N],[5,"abort","","",N,N],[5,"exit","","",N,N],[5,"_exit","","",N,N],[5,"atexit","","",N,N],[5,"system","","",N,N],[5,"getenv","","",N,N],[5,"strcpy","","",N,N],[5,"strncpy","","",N,N],[5,"strcat","","",N,N],[5,"strncat","","",N,N],[5,"strcmp","","",N,N],[5,"strncmp","","",N,N],[5,"strcoll","","",N,N],[5,"strchr","","",N,N],[5,"strrchr","","",N,N],[5,"strspn","","",N,N],[5,"strcspn","","",N,N],[5,"strdup","","",N,N],[5,"strpbrk","","",N,N],[5,"strstr","","",N,N],[5,"strlen","","",N,N],[5,"strnlen","","",N,N],[5,"strerror","","",N,N],[5,"strtok","","",N,N],[5,"strxfrm","","",N,N],[5,"wcslen","","",N,N],[5,"wcstombs","","",N,N],[5,"memchr","","",N,N],[5,"memcmp","","",N,N],[5,"memcpy","","",N,N],[5,"memmove","","",N,N],[5,"memset","","",N,N],[5,"abs","","",N,N],[5,"atof","","",N,N],[5,"labs","","",N,N],[5,"rand","","",N,N],[5,"srand","","",N,N],[5,"getpwnam","","",N,N],[5,"getpwuid","","",N,N],[5,"fprintf","","",N,N],[5,"printf","","",N,N],[5,"snprintf","","",N,N],[5,"sprintf","","",N,N],[5,"fscanf","","",N,N],[5,"scanf","","",N,N],[5,"sscanf","","",N,N],[5,"getchar_unlocked","","",N,N],[5,"putchar_unlocked","","",N,N],[5,"socket","","",N,N],[5,"connect","","",N,N],[5,"listen","","",N,N],[5,"accept","","",N,N],[5,"getpeername","","",N,N],[5,"getsockname","","",N,N],[5,"setsockopt","","",N,N],[5,"socketpair","","",N,N],[5,"sendto","","",N,N],[5,"shutdown","","",N,N],[5,"chmod","","",N,N],[5,"fchmod","","",N,N],[5,"fstat","","",N,N],[5,"mkdir","","",N,N],[5,"stat","","",N,N],[5,"pclose","","",N,N],[5,"fdopen","","",N,N],[5,"fileno","","",N,N],[5,"open","","",N,N],[5,"creat","","",N,N],[5,"fcntl","","",N,N],[5,"opendir","","",N,N],[5,"fdopendir","","",N,N],[5,"readdir","","",N,N],[5,"readdir_r","","",N,N],[5,"closedir","","",N,N],[5,"rewinddir","","",N,N],[5,"openat","","",N,N],[5,"fchmodat","","",N,N],[5,"fchown","","",N,N],[5,"fchownat","","",N,N],[5,"fstatat","","",N,N],[5,"linkat","","",N,N],[5,"mkdirat","","",N,N],[5,"readlinkat","","",N,N],[5,"renameat","","",N,N],[5,"symlinkat","","",N,N],[5,"unlinkat","","",N,N],[5,"access","","",N,N],[5,"alarm","","",N,N],[5,"chdir","","",N,N],[5,"fchdir","","",N,N],[5,"chown","","",N,N],[5,"lchown","","",N,N],[5,"close","","",N,N],[5,"dup","","",N,N],[5,"dup2","","",N,N],[5,"execl","","",N,N],[5,"execle","","",N,N],[5,"execlp","","",N,N],[5,"execv","","",N,N],[5,"execve","","",N,N],[5,"execvp","","",N,N],[5,"fork","","",N,N],[5,"fpathconf","","",N,N],[5,"getcwd","","",N,N],[5,"getegid","","",N,N],[5,"geteuid","","",N,N],[5,"getgid","","",N,N],[5,"getgroups","","",N,N],[5,"getlogin","","",N,N],[5,"getopt","","",N,N],[5,"getpgid","","",N,N],[5,"getpgrp","","",N,N],[5,"getpid","","",N,N],[5,"getppid","","",N,N],[5,"getuid","","",N,N],[5,"isatty","","",N,N],[5,"link","","",N,N],[5,"lseek","","",N,N],[5,"pathconf","","",N,N],[5,"pause","","",N,N],[5,"pipe","","",N,N],[5,"posix_memalign","","",N,N],[5,"read","","",N,N],[5,"rmdir","","",N,N],[5,"seteuid","","",N,N],[5,"setgid","","",N,N],[5,"setpgid","","",N,N],[5,"setsid","","",N,N],[5,"setuid","","",N,N],[5,"sleep","","",N,N],[5,"nanosleep","","",N,N],[5,"tcgetpgrp","","",N,N],[5,"tcsetpgrp","","",N,N],[5,"ttyname","","",N,N],[5,"unlink","","",N,N],[5,"wait","","",N,N],[5,"waitpid","","",N,N],[5,"write","","",N,N],[5,"pread","","",N,N],[5,"pwrite","","",N,N],[5,"umask","","",N,N],[5,"utime","","",N,N],[5,"kill","","",N,N],[5,"killpg","","",N,N],[5,"mlock","","",N,N],[5,"munlock","","",N,N],[5,"mlockall","","",N,N],[5,"munlockall","","",N,N],[5,"mmap","","",N,N],[5,"munmap","","",N,N],[5,"if_nametoindex","","",N,N],[5,"if_indextoname","","",N,N],[5,"lstat","","",N,N],[5,"fsync","","",N,N],[5,"setenv","","",N,N],[5,"unsetenv","","",N,N],[5,"symlink","","",N,N],[5,"ftruncate","","",N,N],[5,"signal","","",N,N],[5,"getrlimit","","",N,N],[5,"setrlimit","","",N,N],[5,"getrusage","","",N,N],[5,"realpath","","",N,N],[5,"flock","","",N,N],[5,"gettimeofday","","",N,N],[5,"times","","",N,N],[5,"pthread_self","","",N,N],[5,"pthread_join","","",N,N],[5,"pthread_exit","","",N,N],[5,"pthread_attr_init","","",N,N],[5,"pthread_attr_destroy","","",N,N],[5,"pthread_attr_setstacksize","","",N,N],[5,"pthread_attr_setdetachstate","","",N,N],[5,"pthread_detach","","",N,N],[5,"sched_yield","","",N,N],[5,"pthread_key_create","","",N,N],[5,"pthread_key_delete","","",N,N],[5,"pthread_getspecific","","",N,N],[5,"pthread_setspecific","","",N,N],[5,"pthread_mutex_init","","",N,N],[5,"pthread_mutex_destroy","","",N,N],[5,"pthread_mutex_lock","","",N,N],[5,"pthread_mutex_trylock","","",N,N],[5,"pthread_mutex_unlock","","",N,N],[5,"pthread_mutexattr_init","","",N,N],[5,"pthread_mutexattr_destroy","","",N,N],[5,"pthread_mutexattr_settype","","",N,N],[5,"pthread_cond_init","","",N,N],[5,"pthread_cond_wait","","",N,N],[5,"pthread_cond_timedwait","","",N,N],[5,"pthread_cond_signal","","",N,N],[5,"pthread_cond_broadcast","","",N,N],[5,"pthread_cond_destroy","","",N,N],[5,"pthread_condattr_init","","",N,N],[5,"pthread_condattr_destroy","","",N,N],[5,"pthread_rwlock_init","","",N,N],[5,"pthread_rwlock_destroy","","",N,N],[5,"pthread_rwlock_rdlock","","",N,N],[5,"pthread_rwlock_tryrdlock","","",N,N],[5,"pthread_rwlock_wrlock","","",N,N],[5,"pthread_rwlock_trywrlock","","",N,N],[5,"pthread_rwlock_unlock","","",N,N],[5,"pthread_rwlockattr_init","","",N,N],[5,"pthread_rwlockattr_destroy","","",N,N],[5,"strerror_r","","",N,N],[5,"getsockopt","","",N,N],[5,"raise","","",N,N],[5,"sigaction","","",N,N],[5,"utimes","","",N,N],[5,"dlopen","","",N,N],[5,"dlerror","","",N,N],[5,"dlsym","","",N,N],[5,"dlclose","","",N,N],[5,"dladdr","","",N,N],[5,"getaddrinfo","","",N,N],[5,"freeaddrinfo","","",N,N],[5,"gai_strerror","","",N,N],[5,"res_init","","",N,N],[5,"gmtime_r","","",N,N],[5,"localtime_r","","",N,N],[5,"mktime","","",N,N],[5,"time","","",N,N],[5,"gmtime","","",N,N],[5,"localtime","","",N,N],[5,"difftime","","",N,N],[5,"mknod","","",N,N],[5,"uname","","",N,N],[5,"gethostname","","",N,N],[5,"getservbyname","","",N,N],[5,"getprotobyname","","",N,N],[5,"getprotobynumber","","",N,N],[5,"chroot","","",N,N],[5,"usleep","","",N,N],[5,"send","","",N,N],[5,"recv","","",N,N],[5,"putenv","","",N,N],[5,"poll","","",N,N],[5,"select","","",N,N],[5,"setlocale","","",N,N],[5,"localeconv","","",N,N],[5,"sem_destroy","","",N,N],[5,"sem_wait","","",N,N],[5,"sem_trywait","","",N,N],[5,"sem_post","","",N,N],[5,"sem_init","","",N,N],[5,"statvfs","","",N,N],[5,"fstatvfs","","",N,N],[5,"readlink","","",N,N],[5,"sigemptyset","","",N,N],[5,"sigaddset","","",N,N],[5,"sigfillset","","",N,N],[5,"sigdelset","","",N,N],[5,"sigismember","","",N,N],[5,"sigprocmask","","",N,N],[5,"sigpending","","",N,N],[5,"timegm","","",N,N],[5,"getsid","","",N,N],[5,"sysconf","","",N,N],[5,"mkfifo","","",N,N],[5,"pselect","","",N,N],[5,"fseeko","","",N,N],[5,"ftello","","",N,N],[5,"tcdrain","","",N,N],[5,"cfgetispeed","","",N,N],[5,"cfgetospeed","","",N,N],[5,"cfmakeraw","","",N,N],[5,"cfsetispeed","","",N,N],[5,"cfsetospeed","","",N,N],[5,"cfsetspeed","","",N,N],[5,"tcgetattr","","",N,N],[5,"tcsetattr","","",N,N],[5,"tcflow","","",N,N],[5,"tcflush","","",N,N],[5,"tcgetsid","","",N,N],[5,"tcsendbreak","","",N,N],[5,"mkstemp","","",N,N],[5,"mkdtemp","","",N,N],[5,"tmpnam","","",N,N],[5,"openlog","","",N,N],[5,"closelog","","",N,N],[5,"setlogmask","","",N,N],[5,"syslog","","",N,N],[5,"nice","","",N,N],[5,"grantpt","","",N,N],[5,"posix_openpt","","",N,N],[5,"ptsname","","",N,N],[5,"unlockpt","","",N,N],[5,"fdatasync","","",N,N],[5,"mincore","","",N,N],[5,"clock_getres","","",N,N],[5,"clock_gettime","","",N,N],[5,"clock_settime","","",N,N],[5,"dirfd","","",N,N],[5,"pthread_getattr_np","","",N,N],[5,"pthread_attr_getstack","","",N,N],[5,"memalign","","",N,N],[5,"setgroups","","",N,N],[5,"pipe2","","",N,N],[5,"statfs","","",N,N],[5,"statfs64","","",N,N],[5,"fstatfs","","",N,N],[5,"fstatfs64","","",N,N],[5,"statvfs64","","",N,N],[5,"fstatvfs64","","",N,N],[5,"memrchr","","",N,N],[5,"posix_fadvise","","",N,N],[5,"futimens","","",N,N],[5,"utimensat","","",N,N],[5,"duplocale","","",N,N],[5,"freelocale","","",N,N],[5,"newlocale","","",N,N],[5,"uselocale","","",N,N],[5,"creat64","","",N,N],[5,"fstat64","","",N,N],[5,"fstatat64","","",N,N],[5,"ftruncate64","","",N,N],[5,"getrlimit64","","",N,N],[5,"lseek64","","",N,N],[5,"lstat64","","",N,N],[5,"mmap64","","",N,N],[5,"open64","","",N,N],[5,"openat64","","",N,N],[5,"pread64","","",N,N],[5,"preadv64","","",N,N],[5,"pwrite64","","",N,N],[5,"pwritev64","","",N,N],[5,"readdir64","","",N,N],[5,"readdir64_r","","",N,N],[5,"setrlimit64","","",N,N],[5,"stat64","","",N,N],[5,"truncate64","","",N,N],[5,"mknodat","","",N,N],[5,"pthread_condattr_getclock","","",N,N],[5,"pthread_condattr_setclock","","",N,N],[5,"pthread_condattr_setpshared","","",N,N],[5,"accept4","","",N,N],[5,"pthread_mutexattr_setpshared","","",N,N],[5,"pthread_rwlockattr_getpshared","","",N,N],[5,"pthread_rwlockattr_setpshared","","",N,N],[5,"ptsname_r","","",N,N],[5,"clearenv","","",N,N],[5,"waitid","","",N,N],[5,"setreuid","","",N,N],[5,"setregid","","",N,N],[5,"getresuid","","",N,N],[5,"getresgid","","",N,N],[5,"acct","","",N,N],[5,"brk","","",N,N],[5,"sbrk","","",N,N],[5,"vfork","","",N,N],[5,"setresgid","","",N,N],[5,"setresuid","","",N,N],[5,"wait4","","",N,N],[5,"openpty","","",N,N],[5,"execvpe","","",N,N],[5,"fexecve","","",N,N],[5,"getifaddrs","","",N,N],[5,"freeifaddrs","","",N,N],[5,"bind","","",N,N],[5,"writev","","",N,N],[5,"readv","","",N,N],[5,"sendmsg","","",N,N],[5,"recvmsg","","",N,N],[5,"aio_read","","",N,N],[5,"aio_write","","",N,N],[5,"aio_fsync","","",N,N],[5,"aio_error","","",N,N],[5,"aio_return","","",N,N],[5,"aio_suspend","","",N,N],[5,"aio_cancel","","",N,N],[5,"lio_listio","","",N,N],[5,"lutimes","","",N,N],[5,"setpwent","","",N,N],[5,"endpwent","","",N,N],[5,"getpwent","","",N,N],[5,"setgrent","","",N,N],[5,"endgrent","","",N,N],[5,"getgrent","","",N,N],[5,"setspent","","",N,N],[5,"endspent","","",N,N],[5,"getspent","","",N,N],[5,"getspnam","","",N,N],[5,"shm_open","","",N,N],[5,"shmget","","",N,N],[5,"shmat","","",N,N],[5,"shmdt","","",N,N],[5,"shmctl","","",N,N],[5,"ftok","","",N,N],[5,"semget","","",N,N],[5,"semop","","",N,N],[5,"semctl","","",N,N],[5,"msgctl","","",N,N],[5,"msgget","","",N,N],[5,"msgrcv","","",N,N],[5,"msgsnd","","",N,N],[5,"mprotect","","",N,N],[5,"__errno_location","","",N,N],[5,"fopen64","","",N,N],[5,"freopen64","","",N,N],[5,"tmpfile64","","",N,N],[5,"fgetpos64","","",N,N],[5,"fsetpos64","","",N,N],[5,"fseeko64","","",N,N],[5,"ftello64","","",N,N],[5,"fallocate","","",N,N],[5,"posix_fallocate","","",N,N],[5,"readahead","","",N,N],[5,"getxattr","","",N,N],[5,"lgetxattr","","",N,N],[5,"fgetxattr","","",N,N],[5,"setxattr","","",N,N],[5,"lsetxattr","","",N,N],[5,"fsetxattr","","",N,N],[5,"listxattr","","",N,N],[5,"llistxattr","","",N,N],[5,"flistxattr","","",N,N],[5,"removexattr","","",N,N],[5,"lremovexattr","","",N,N],[5,"fremovexattr","","",N,N],[5,"signalfd","","",N,N],[5,"timerfd_create","","",N,N],[5,"timerfd_gettime","","",N,N],[5,"timerfd_settime","","",N,N],[5,"pwritev","","",N,N],[5,"preadv","","",N,N],[5,"quotactl","","",N,N],[5,"mq_open","","",N,N],[5,"mq_close","","",N,N],[5,"mq_unlink","","",N,N],[5,"mq_receive","","",N,N],[5,"mq_send","","",N,N],[5,"mq_getattr","","",N,N],[5,"mq_setattr","","",N,N],[5,"epoll_pwait","","",N,N],[5,"dup3","","",N,N],[5,"mkostemp","","",N,N],[5,"mkostemps","","",N,N],[5,"sigtimedwait","","",N,N],[5,"sigwaitinfo","","",N,N],[5,"nl_langinfo_l","","",N,N],[5,"getnameinfo","","",N,N],[5,"pthread_setschedprio","","",N,N],[5,"prlimit","","",N,N],[5,"prlimit64","","",N,N],[5,"getloadavg","","",N,N],[5,"process_vm_readv","","",N,N],[5,"process_vm_writev","","",N,N],[5,"reboot","","",N,N],[5,"setfsgid","","",N,N],[5,"setfsuid","","",N,N],[5,"mkfifoat","","",N,N],[5,"if_nameindex","","",N,N],[5,"if_freenameindex","","",N,N],[5,"sync_file_range","","",N,N],[5,"mremap","","",N,N],[5,"glob","","",N,N],[5,"globfree","","",N,N],[5,"posix_madvise","","",N,N],[5,"shm_unlink","","",N,N],[5,"seekdir","","",N,N],[5,"telldir","","",N,N],[5,"madvise","","",N,N],[5,"msync","","",N,N],[5,"remap_file_pages","","",N,N],[5,"recvfrom","","",N,N],[5,"mkstemps","","",N,N],[5,"futimes","","",N,N],[5,"nl_langinfo","","",N,N],[5,"getdomainname","","",N,N],[5,"setdomainname","","",N,N],[5,"vhangup","","",N,N],[5,"sendmmsg","","",N,N],[5,"recvmmsg","","",N,N],[5,"sync","","",N,N],[5,"syscall","","",N,N],[5,"sched_getaffinity","","",N,N],[5,"sched_setaffinity","","",N,N],[5,"epoll_create","","",N,N],[5,"epoll_create1","","",N,N],[5,"epoll_wait","","",N,N],[5,"epoll_ctl","","",N,N],[5,"pthread_getschedparam","","",N,N],[5,"unshare","","",N,N],[5,"umount","","",N,N],[5,"sched_get_priority_max","","",N,N],[5,"tee","","",N,N],[5,"settimeofday","","",N,N],[5,"splice","","",N,N],[5,"eventfd","","",N,N],[5,"sched_rr_get_interval","","",N,N],[5,"sem_timedwait","","",N,N],[5,"sem_getvalue","","",N,N],[5,"sched_setparam","","",N,N],[5,"setns","","",N,N],[5,"swapoff","","",N,N],[5,"vmsplice","","",N,N],[5,"mount","","",N,N],[5,"personality","","",N,N],[5,"prctl","","",N,N],[5,"sched_getparam","","",N,N],[5,"ppoll","","",N,N],[5,"pthread_mutex_timedlock","","",N,N],[5,"clone","","",N,N],[5,"sched_getscheduler","","",N,N],[5,"clock_nanosleep","","",N,N],[5,"pthread_attr_getguardsize","","",N,N],[5,"sethostname","","",N,N],[5,"sched_get_priority_min","","",N,N],[5,"pthread_condattr_getpshared","","",N,N],[5,"sysinfo","","",N,N],[5,"umount2","","",N,N],[5,"pthread_setschedparam","","",N,N],[5,"swapon","","",N,N],[5,"sched_setscheduler","","",N,N],[5,"sendfile","","",N,N],[5,"sigsuspend","","",N,N],[5,"getgrgid_r","","",N,N],[5,"sigaltstack","","",N,N],[5,"sem_close","","",N,N],[5,"getdtablesize","","",N,N],[5,"getgrnam_r","","",N,N],[5,"initgroups","","",N,N],[5,"pthread_sigmask","","",N,N],[5,"sem_open","","",N,N],[5,"getgrnam","","",N,N],[5,"pthread_cancel","","",N,N],[5,"pthread_kill","","",N,N],[5,"sem_unlink","","",N,N],[5,"daemon","","",N,N],[5,"getpwnam_r","","",N,N],[5,"getpwuid_r","","",N,N],[5,"sigwait","","",N,N],[5,"pthread_atfork","","",N,N],[5,"getgrgid","","",N,N],[5,"getgrouplist","","",N,N],[5,"pthread_mutexattr_getpshared","","",N,N],[5,"popen","","",N,N],[5,"faccessat","","",N,N],[5,"pthread_create","","",N,N],[5,"dl_iterate_phdr","","",N,N],[5,"setmntent","","",N,N],[5,"getmntent","","",N,N],[5,"addmntent","","",N,N],[5,"endmntent","","",N,N],[5,"hasmntopt","","",N,N],[5,"posix_spawn","","",N,N],[5,"posix_spawnp","","",N,N],[5,"posix_spawnattr_init","","",N,N],[5,"posix_spawnattr_destroy","","",N,N],[5,"posix_spawnattr_getsigdefault","","",N,N],[5,"posix_spawnattr_setsigdefault","","",N,N],[5,"posix_spawnattr_getsigmask","","",N,N],[5,"posix_spawnattr_setsigmask","","",N,N],[5,"posix_spawnattr_getflags","","",N,N],[5,"posix_spawnattr_setflags","","",N,N],[5,"posix_spawnattr_getpgroup","","",N,N],[5,"posix_spawnattr_setpgroup","","",N,N],[5,"posix_spawnattr_getschedpolicy","","",N,N],[5,"posix_spawnattr_setschedpolicy","","",N,N],[5,"posix_spawnattr_getschedparam","","",N,N],[5,"posix_spawnattr_setschedparam","","",N,N],[5,"posix_spawn_file_actions_init","","",N,N],[5,"posix_spawn_file_actions_destroy","","",N,N],[5,"posix_spawn_file_actions_addopen","","",N,N],[5,"posix_spawn_file_actions_addclose","","",N,N],[5,"posix_spawn_file_actions_adddup2","","",N,N],[5,"fread_unlocked","","",N,N],[5,"utmpxname","","",N,N],[5,"getutxent","","",N,N],[5,"getutxid","","",N,N],[5,"getutxline","","",N,N],[5,"pututxline","","",N,N],[5,"setutxent","","",N,N],[5,"endutxent","","",N,N],[5,"getpt","","",N,N],[5,"ioctl","","",N,N],[5,"backtrace","","",N,N],[5,"glob64","","",N,N],[5,"globfree64","","",N,N],[5,"ptrace","","",N,N],[5,"pthread_attr_getaffinity_np","","",N,N],[5,"pthread_attr_setaffinity_np","","",N,N],[5,"getpriority","","",N,N],[5,"setpriority","","",N,N],[5,"pthread_getaffinity_np","","",N,N],[5,"pthread_setaffinity_np","","",N,N],[5,"pthread_rwlockattr_getkind_np","","",N,N],[5,"pthread_rwlockattr_setkind_np","","",N,N],[5,"sched_getcpu","","",N,N],[5,"mallinfo","","",N,N],[5,"malloc_usable_size","","",N,N],[5,"getauxval","","",N,N],[5,"getpwent_r","","",N,N],[5,"getgrent_r","","",N,N],[5,"getcontext","","",N,N],[5,"setcontext","","",N,N],[5,"makecontext","","",N,N],[5,"swapcontext","","",N,N],[5,"iopl","","",N,N],[5,"ioperm","","",N,N],[5,"sysctl","","",N,N],[11,"clone","","",100,[[["self"]],["stat"]]],[11,"clone","","",101,[[["self"]],["stat64"]]],[11,"clone","","",102,[[["self"]],["statfs64"]]],[11,"clone","","",103,[[["self"]],["statvfs64"]]],[11,"clone","","",116,[[["self"]],["pthread_attr_t"]]],[11,"clone","","",104,[[["self"]],["_libc_fpxreg"]]],[11,"clone","","",105,[[["self"]],["_libc_xmmreg"]]],[11,"clone","","",106,[[["self"]],["_libc_fpstate"]]],[11,"clone","","",107,[[["self"]],["user_fpregs_struct"]]],[11,"clone","","",108,[[["self"]],["user_regs_struct"]]],[11,"clone","","",109,[[["self"]],["user"]]],[11,"clone","","",110,[[["self"]],["mcontext_t"]]],[11,"clone","","",111,[[["self"]],["ucontext_t"]]],[11,"clone","","",112,[[["self"]],["ipc_perm"]]],[11,"clone","","",113,[[["self"]],["shmid_ds"]]],[11,"clone","","",114,[[["self"]],["termios2"]]],[11,"clone","","",115,[[["self"]],["statvfs"]]],[11,"clone","","",117,[[["self"]],["sigset_t"]]],[11,"clone","","",98,[[["self"]],["sysinfo"]]],[11,"clone","","",99,[[["self"]],["msqid_ds"]]],[11,"clone","","",77,[[["self"]],["aiocb"]]],[11,"clone","","",78,[[["self"]],["__exit_status"]]],[11,"clone","","",79,[[["self"]],["__timeval"]]],[11,"clone","","",80,[[["self"]],["utmpx"]]],[11,"clone","","",81,[[["self"]],["sigaction"]]],[11,"clone","","",82,[[["self"]],["stack_t"]]],[11,"clone","","",83,[[["self"]],["siginfo_t"]]],[11,"clone","","",84,[[["self"]],["glob64_t"]]],[11,"clone","","",85,[[["self"]],["statfs"]]],[11,"clone","","",86,[[["self"]],["msghdr"]]],[11,"clone","","",87,[[["self"]],["cmsghdr"]]],[11,"clone","","",88,[[["self"]],["termios"]]],[11,"clone","","",89,[[["self"]],["flock"]]],[11,"clone","","",118,[[["self"]],["sem_t"]]],[11,"clone","","",90,[[["self"]],["mallinfo"]]],[11,"clone","","",91,[[["self"]],["nlmsghdr"]]],[11,"clone","","",92,[[["self"]],["nlmsgerr"]]],[11,"clone","","",93,[[["self"]],["nl_pktinfo"]]],[11,"clone","","",94,[[["self"]],["nl_mmap_req"]]],[11,"clone","","",95,[[["self"]],["nl_mmap_hdr"]]],[11,"clone","","",96,[[["self"]],["nlattr"]]],[11,"clone","","",97,[[["self"]],["rtentry"]]],[11,"clone","","",40,[[["self"]],["dirent"]]],[11,"clone","","",41,[[["self"]],["dirent64"]]],[11,"clone","","",42,[[["self"]],["rlimit64"]]],[11,"clone","","",43,[[["self"]],["glob_t"]]],[11,"clone","","",119,[[["self"]],["pthread_mutex_t"]]],[11,"clone","","",120,[[["self"]],["pthread_rwlock_t"]]],[11,"clone","","",121,[[["self"]],["pthread_mutexattr_t"]]],[11,"clone","","",122,[[["self"]],["pthread_rwlockattr_t"]]],[11,"clone","","",123,[[["self"]],["pthread_cond_t"]]],[11,"clone","","",124,[[["self"]],["pthread_condattr_t"]]],[11,"clone","","",44,[[["self"]],["passwd"]]],[11,"clone","","",45,[[["self"]],["spwd"]]],[11,"clone","","",46,[[["self"]],["dqblk"]]],[11,"clone","","",47,[[["self"]],["signalfd_siginfo"]]],[11,"clone","","",48,[[["self"]],["itimerspec"]]],[11,"clone","","",125,[[["self"]],["fsid_t"]]],[11,"clone","","",49,[[["self"]],["mq_attr"]]],[11,"clone","","",50,[[["self"]],["packet_mreq"]]],[11,"clone","","",126,[[["self"]],["cpu_set_t"]]],[11,"clone","","",51,[[["self"]],["if_nameindex"]]],[11,"clone","","",52,[[["self"]],["msginfo"]]],[11,"clone","","",53,[[["self"]],["mmsghdr"]]],[11,"clone","","",54,[[["self"]],["sembuf"]]],[11,"clone","","",55,[[["self"]],["input_event"]]],[11,"clone","","",56,[[["self"]],["input_id"]]],[11,"clone","","",57,[[["self"]],["input_absinfo"]]],[11,"clone","","",58,[[["self"]],["input_keymap_entry"]]],[11,"clone","","",59,[[["self"]],["input_mask"]]],[11,"clone","","",60,[[["self"]],["ff_replay"]]],[11,"clone","","",61,[[["self"]],["ff_trigger"]]],[11,"clone","","",62,[[["self"]],["ff_envelope"]]],[11,"clone","","",63,[[["self"]],["ff_constant_effect"]]],[11,"clone","","",64,[[["self"]],["ff_ramp_effect"]]],[11,"clone","","",65,[[["self"]],["ff_condition_effect"]]],[11,"clone","","",66,[[["self"]],["ff_periodic_effect"]]],[11,"clone","","",67,[[["self"]],["ff_rumble_effect"]]],[11,"clone","","",68,[[["self"]],["ff_effect"]]],[11,"clone","","",69,[[["self"]],["dl_phdr_info"]]],[11,"clone","","",70,[[["self"]],["elf32_phdr"]]],[11,"clone","","",71,[[["self"]],["elf64_phdr"]]],[11,"clone","","",72,[[["self"]],["ucred"]]],[11,"clone","","",73,[[["self"]],["mntent"]]],[11,"clone","","",127,[[["self"]],["posix_spawn_file_actions_t"]]],[11,"clone","","",128,[[["self"]],["posix_spawnattr_t"]]],[11,"clone","","",74,[[["self"]],["genlmsghdr"]]],[11,"clone","","",75,[[["self"]],["in6_pktinfo"]]],[11,"clone","","",76,[[["self"]],["arpd_request"]]],[11,"clone","","",20,[[["self"]],["sockaddr"]]],[11,"clone","","",21,[[["self"]],["sockaddr_in"]]],[11,"clone","","",22,[[["self"]],["sockaddr_in6"]]],[11,"clone","","",23,[[["self"]],["sockaddr_un"]]],[11,"clone","","",24,[[["self"]],["sockaddr_storage"]]],[11,"clone","","",25,[[["self"]],["addrinfo"]]],[11,"clone","","",26,[[["self"]],["sockaddr_nl"]]],[11,"clone","","",27,[[["self"]],["sockaddr_ll"]]],[11,"clone","","",129,[[["self"]],["fd_set"]]],[11,"clone","","",28,[[["self"]],["tm"]]],[11,"clone","","",29,[[["self"]],["sched_param"]]],[11,"clone","","",30,[[["self"]],["dl_info"]]],[11,"clone","","",31,[[["self"]],["epoll_event"]]],[11,"clone","","",32,[[["self"]],["utsname"]]],[11,"clone","","",33,[[["self"]],["lconv"]]],[11,"clone","","",34,[[["self"]],["sigevent"]]],[11,"clone","","",35,[[["self"]],["in_pktinfo"]]],[11,"clone","","",36,[[["self"]],["ifaddrs"]]],[11,"clone","","",130,[[["self"]],["in6_rtmsg"]]],[11,"clone","","",37,[[["self"]],["arpreq"]]],[11,"clone","","",38,[[["self"]],["arpreq_old"]]],[11,"clone","","",39,[[["self"]],["arphdr"]]],[11,"clone","","",0,[[["self"]],["group"]]],[11,"clone","","",1,[[["self"]],["utimbuf"]]],[11,"clone","","",2,[[["self"]],["timeval"]]],[11,"clone","","",3,[[["self"]],["timespec"]]],[11,"clone","","",4,[[["self"]],["rlimit"]]],[11,"clone","","",5,[[["self"]],["rusage"]]],[11,"clone","","",6,[[["self"]],["in_addr"]]],[11,"clone","","",7,[[["self"]],["in6_addr"]]],[11,"clone","","",8,[[["self"]],["ip_mreq"]]],[11,"clone","","",9,[[["self"]],["ipv6_mreq"]]],[11,"clone","","",10,[[["self"]],["hostent"]]],[11,"clone","","",11,[[["self"]],["iovec"]]],[11,"clone","","",12,[[["self"]],["pollfd"]]],[11,"clone","","",13,[[["self"]],["winsize"]]],[11,"clone","","",14,[[["self"]],["linger"]]],[11,"clone","","",15,[[["self"]],["sigval"]]],[11,"clone","","",16,[[["self"]],["itimerval"]]],[11,"clone","","",17,[[["self"]],["tms"]]],[11,"clone","","",18,[[["self"]],["servent"]]],[11,"clone","","",19,[[["self"]],["protoent"]]],[6,"int8_t","","",N,N],[6,"int16_t","","",N,N],[6,"int32_t","","",N,N],[6,"int64_t","","",N,N],[6,"uint8_t","","",N,N],[6,"uint16_t","","",N,N],[6,"uint32_t","","",N,N],[6,"uint64_t","","",N,N],[6,"c_schar","","",N,N],[6,"c_uchar","","",N,N],[6,"c_short","","",N,N],[6,"c_ushort","","",N,N],[6,"c_int","","",N,N],[6,"c_uint","","",N,N],[6,"c_float","","",N,N],[6,"c_double","","",N,N],[6,"c_longlong","","",N,N],[6,"c_ulonglong","","",N,N],[6,"intmax_t","","",N,N],[6,"uintmax_t","","",N,N],[6,"size_t","","",N,N],[6,"ptrdiff_t","","",N,N],[6,"intptr_t","","",N,N],[6,"uintptr_t","","",N,N],[6,"ssize_t","","",N,N],[6,"pid_t","","",N,N],[6,"uid_t","","",N,N],[6,"gid_t","","",N,N],[6,"in_addr_t","","",N,N],[6,"in_port_t","","",N,N],[6,"sighandler_t","","",N,N],[6,"cc_t","","",N,N],[6,"sa_family_t","","",N,N],[6,"pthread_key_t","","",N,N],[6,"speed_t","","",N,N],[6,"tcflag_t","","",N,N],[6,"clockid_t","","",N,N],[6,"key_t","","",N,N],[6,"id_t","","",N,N],[6,"useconds_t","","",N,N],[6,"dev_t","","",N,N],[6,"socklen_t","","",N,N],[6,"pthread_t","","",N,N],[6,"mode_t","","",N,N],[6,"ino64_t","","",N,N],[6,"off64_t","","",N,N],[6,"blkcnt64_t","","",N,N],[6,"rlim64_t","","",N,N],[6,"mqd_t","","",N,N],[6,"nfds_t","","",N,N],[6,"nl_item","","",N,N],[6,"idtype_t","","",N,N],[6,"loff_t","","",N,N],[6,"__u8","","",N,N],[6,"__u16","","",N,N],[6,"__s16","","",N,N],[6,"__u32","","",N,N],[6,"__s32","","",N,N],[6,"Elf32_Half","","",N,N],[6,"Elf32_Word","","",N,N],[6,"Elf32_Off","","",N,N],[6,"Elf32_Addr","","",N,N],[6,"Elf64_Half","","",N,N],[6,"Elf64_Word","","",N,N],[6,"Elf64_Off","","",N,N],[6,"Elf64_Addr","","",N,N],[6,"Elf64_Xword","","",N,N],[6,"__priority_which_t","","",N,N],[6,"clock_t","","",N,N],[6,"time_t","","",N,N],[6,"ino_t","","",N,N],[6,"off_t","","",N,N],[6,"blkcnt_t","","",N,N],[6,"__fsword_t","","",N,N],[6,"shmatt_t","","",N,N],[6,"msgqnum_t","","",N,N],[6,"msglen_t","","",N,N],[6,"fsblkcnt_t","","",N,N],[6,"fsfilcnt_t","","",N,N],[6,"rlim_t","","",N,N],[6,"c_char","","",N,N],[6,"wchar_t","","",N,N],[6,"nlink_t","","",N,N],[6,"blksize_t","","",N,N],[6,"greg_t","","",N,N],[6,"suseconds_t","","",N,N],[6,"__u64","","",N,N],[6,"c_long","","",N,N],[6,"c_ulong","","",N,N],[17,"INT_MIN","","",N,N],[17,"INT_MAX","","",N,N],[17,"SIG_DFL","","",N,N],[17,"SIG_IGN","","",N,N],[17,"SIG_ERR","","",N,N],[17,"DT_UNKNOWN","","",N,N],[17,"DT_FIFO","","",N,N],[17,"DT_CHR","","",N,N],[17,"DT_DIR","","",N,N],[17,"DT_BLK","","",N,N],[17,"DT_REG","","",N,N],[17,"DT_LNK","","",N,N],[17,"DT_SOCK","","",N,N],[17,"FD_CLOEXEC","","",N,N],[17,"USRQUOTA","","",N,N],[17,"GRPQUOTA","","",N,N],[17,"SIGIOT","","",N,N],[17,"S_ISUID","","",N,N],[17,"S_ISGID","","",N,N],[17,"S_ISVTX","","",N,N],[17,"IF_NAMESIZE","","",N,N],[17,"IFNAMSIZ","","",N,N],[17,"LOG_EMERG","","",N,N],[17,"LOG_ALERT","","",N,N],[17,"LOG_CRIT","","",N,N],[17,"LOG_ERR","","",N,N],[17,"LOG_WARNING","","",N,N],[17,"LOG_NOTICE","","",N,N],[17,"LOG_INFO","","",N,N],[17,"LOG_DEBUG","","",N,N],[17,"LOG_KERN","","",N,N],[17,"LOG_USER","","",N,N],[17,"LOG_MAIL","","",N,N],[17,"LOG_DAEMON","","",N,N],[17,"LOG_AUTH","","",N,N],[17,"LOG_SYSLOG","","",N,N],[17,"LOG_LPR","","",N,N],[17,"LOG_NEWS","","",N,N],[17,"LOG_UUCP","","",N,N],[17,"LOG_LOCAL0","","",N,N],[17,"LOG_LOCAL1","","",N,N],[17,"LOG_LOCAL2","","",N,N],[17,"LOG_LOCAL3","","",N,N],[17,"LOG_LOCAL4","","",N,N],[17,"LOG_LOCAL5","","",N,N],[17,"LOG_LOCAL6","","",N,N],[17,"LOG_LOCAL7","","",N,N],[17,"LOG_PID","","",N,N],[17,"LOG_CONS","","",N,N],[17,"LOG_ODELAY","","",N,N],[17,"LOG_NDELAY","","",N,N],[17,"LOG_NOWAIT","","",N,N],[17,"LOG_PRIMASK","","",N,N],[17,"LOG_FACMASK","","",N,N],[17,"PRIO_PROCESS","","",N,N],[17,"PRIO_PGRP","","",N,N],[17,"PRIO_USER","","",N,N],[17,"PRIO_MIN","","",N,N],[17,"PRIO_MAX","","",N,N],[17,"IPPROTO_ICMP","","",N,N],[17,"IPPROTO_ICMPV6","","",N,N],[17,"IPPROTO_TCP","","",N,N],[17,"IPPROTO_UDP","","",N,N],[17,"IPPROTO_IP","","",N,N],[17,"IPPROTO_IPV6","","",N,N],[17,"INADDR_LOOPBACK","","",N,N],[17,"INADDR_ANY","","",N,N],[17,"INADDR_BROADCAST","","",N,N],[17,"INADDR_NONE","","",N,N],[17,"ARPOP_REQUEST","","",N,N],[17,"ARPOP_REPLY","","",N,N],[17,"ATF_COM","","",N,N],[17,"ATF_PERM","","",N,N],[17,"ATF_PUBL","","",N,N],[17,"ATF_USETRAILERS","","",N,N],[17,"EXIT_FAILURE","","",N,N],[17,"EXIT_SUCCESS","","",N,N],[17,"RAND_MAX","","",N,N],[17,"EOF","","",N,N],[17,"SEEK_SET","","",N,N],[17,"SEEK_CUR","","",N,N],[17,"SEEK_END","","",N,N],[17,"_IOFBF","","",N,N],[17,"_IONBF","","",N,N],[17,"_IOLBF","","",N,N],[17,"F_DUPFD","","",N,N],[17,"F_GETFD","","",N,N],[17,"F_SETFD","","",N,N],[17,"F_GETFL","","",N,N],[17,"F_SETFL","","",N,N],[17,"F_SETLEASE","","",N,N],[17,"F_GETLEASE","","",N,N],[17,"F_NOTIFY","","",N,N],[17,"F_CANCELLK","","",N,N],[17,"F_DUPFD_CLOEXEC","","",N,N],[17,"F_SETPIPE_SZ","","",N,N],[17,"F_GETPIPE_SZ","","",N,N],[17,"F_ADD_SEALS","","",N,N],[17,"F_GET_SEALS","","",N,N],[17,"F_SEAL_SEAL","","",N,N],[17,"F_SEAL_SHRINK","","",N,N],[17,"F_SEAL_GROW","","",N,N],[17,"F_SEAL_WRITE","","",N,N],[17,"SIGTRAP","","",N,N],[17,"PTHREAD_CREATE_JOINABLE","","",N,N],[17,"PTHREAD_CREATE_DETACHED","","",N,N],[17,"CLOCK_REALTIME","","",N,N],[17,"CLOCK_MONOTONIC","","",N,N],[17,"CLOCK_PROCESS_CPUTIME_ID","","",N,N],[17,"CLOCK_THREAD_CPUTIME_ID","","",N,N],[17,"CLOCK_MONOTONIC_RAW","","",N,N],[17,"CLOCK_REALTIME_COARSE","","",N,N],[17,"CLOCK_MONOTONIC_COARSE","","",N,N],[17,"CLOCK_BOOTTIME","","",N,N],[17,"CLOCK_REALTIME_ALARM","","",N,N],[17,"CLOCK_BOOTTIME_ALARM","","",N,N],[17,"TIMER_ABSTIME","","",N,N],[17,"RLIMIT_CPU","","",N,N],[17,"RLIMIT_FSIZE","","",N,N],[17,"RLIMIT_DATA","","",N,N],[17,"RLIMIT_STACK","","",N,N],[17,"RLIMIT_CORE","","",N,N],[17,"RLIMIT_LOCKS","","",N,N],[17,"RLIMIT_SIGPENDING","","",N,N],[17,"RLIMIT_MSGQUEUE","","",N,N],[17,"RLIMIT_NICE","","",N,N],[17,"RLIMIT_RTPRIO","","",N,N],[17,"RUSAGE_SELF","","",N,N],[17,"O_RDONLY","","",N,N],[17,"O_WRONLY","","",N,N],[17,"O_RDWR","","",N,N],[17,"SOCK_CLOEXEC","","",N,N],[17,"S_IFIFO","","",N,N],[17,"S_IFCHR","","",N,N],[17,"S_IFBLK","","",N,N],[17,"S_IFDIR","","",N,N],[17,"S_IFREG","","",N,N],[17,"S_IFLNK","","",N,N],[17,"S_IFSOCK","","",N,N],[17,"S_IFMT","","",N,N],[17,"S_IRWXU","","",N,N],[17,"S_IXUSR","","",N,N],[17,"S_IWUSR","","",N,N],[17,"S_IRUSR","","",N,N],[17,"S_IRWXG","","",N,N],[17,"S_IXGRP","","",N,N],[17,"S_IWGRP","","",N,N],[17,"S_IRGRP","","",N,N],[17,"S_IRWXO","","",N,N],[17,"S_IXOTH","","",N,N],[17,"S_IWOTH","","",N,N],[17,"S_IROTH","","",N,N],[17,"F_OK","","",N,N],[17,"R_OK","","",N,N],[17,"W_OK","","",N,N],[17,"X_OK","","",N,N],[17,"STDIN_FILENO","","",N,N],[17,"STDOUT_FILENO","","",N,N],[17,"STDERR_FILENO","","",N,N],[17,"SIGHUP","","",N,N],[17,"SIGINT","","",N,N],[17,"SIGQUIT","","",N,N],[17,"SIGILL","","",N,N],[17,"SIGABRT","","",N,N],[17,"SIGFPE","","",N,N],[17,"SIGKILL","","",N,N],[17,"SIGSEGV","","",N,N],[17,"SIGPIPE","","",N,N],[17,"SIGALRM","","",N,N],[17,"SIGTERM","","",N,N],[17,"PROT_NONE","","",N,N],[17,"PROT_READ","","",N,N],[17,"PROT_WRITE","","",N,N],[17,"PROT_EXEC","","",N,N],[17,"LC_CTYPE","","",N,N],[17,"LC_NUMERIC","","",N,N],[17,"LC_TIME","","",N,N],[17,"LC_COLLATE","","",N,N],[17,"LC_MONETARY","","",N,N],[17,"LC_MESSAGES","","",N,N],[17,"LC_ALL","","",N,N],[17,"LC_CTYPE_MASK","","",N,N],[17,"LC_NUMERIC_MASK","","",N,N],[17,"LC_TIME_MASK","","",N,N],[17,"LC_COLLATE_MASK","","",N,N],[17,"LC_MONETARY_MASK","","",N,N],[17,"LC_MESSAGES_MASK","","",N,N],[17,"MAP_FILE","","",N,N],[17,"MAP_SHARED","","",N,N],[17,"MAP_PRIVATE","","",N,N],[17,"MAP_FIXED","","",N,N],[17,"MAP_FAILED","","",N,N],[17,"MS_ASYNC","","",N,N],[17,"MS_INVALIDATE","","",N,N],[17,"MS_SYNC","","",N,N],[17,"MS_RDONLY","","",N,N],[17,"MS_NOSUID","","",N,N],[17,"MS_NODEV","","",N,N],[17,"MS_NOEXEC","","",N,N],[17,"MS_SYNCHRONOUS","","",N,N],[17,"MS_REMOUNT","","",N,N],[17,"MS_MANDLOCK","","",N,N],[17,"MS_DIRSYNC","","",N,N],[17,"MS_NOATIME","","",N,N],[17,"MS_NODIRATIME","","",N,N],[17,"MS_BIND","","",N,N],[17,"MS_MOVE","","",N,N],[17,"MS_REC","","",N,N],[17,"MS_SILENT","","",N,N],[17,"MS_POSIXACL","","",N,N],[17,"MS_UNBINDABLE","","",N,N],[17,"MS_PRIVATE","","",N,N],[17,"MS_SLAVE","","",N,N],[17,"MS_SHARED","","",N,N],[17,"MS_RELATIME","","",N,N],[17,"MS_KERNMOUNT","","",N,N],[17,"MS_I_VERSION","","",N,N],[17,"MS_STRICTATIME","","",N,N],[17,"MS_ACTIVE","","",N,N],[17,"MS_NOUSER","","",N,N],[17,"MS_MGC_VAL","","",N,N],[17,"MS_MGC_MSK","","",N,N],[17,"MS_RMT_MASK","","",N,N],[17,"EPERM","","",N,N],[17,"ENOENT","","",N,N],[17,"ESRCH","","",N,N],[17,"EINTR","","",N,N],[17,"EIO","","",N,N],[17,"ENXIO","","",N,N],[17,"E2BIG","","",N,N],[17,"ENOEXEC","","",N,N],[17,"EBADF","","",N,N],[17,"ECHILD","","",N,N],[17,"EAGAIN","","",N,N],[17,"ENOMEM","","",N,N],[17,"EACCES","","",N,N],[17,"EFAULT","","",N,N],[17,"ENOTBLK","","",N,N],[17,"EBUSY","","",N,N],[17,"EEXIST","","",N,N],[17,"EXDEV","","",N,N],[17,"ENODEV","","",N,N],[17,"ENOTDIR","","",N,N],[17,"EISDIR","","",N,N],[17,"EINVAL","","",N,N],[17,"ENFILE","","",N,N],[17,"EMFILE","","",N,N],[17,"ENOTTY","","",N,N],[17,"ETXTBSY","","",N,N],[17,"EFBIG","","",N,N],[17,"ENOSPC","","",N,N],[17,"ESPIPE","","",N,N],[17,"EROFS","","",N,N],[17,"EMLINK","","",N,N],[17,"EPIPE","","",N,N],[17,"EDOM","","",N,N],[17,"ERANGE","","",N,N],[17,"EWOULDBLOCK","","",N,N],[17,"SCM_RIGHTS","","",N,N],[17,"SCM_CREDENTIALS","","",N,N],[17,"PROT_GROWSDOWN","","",N,N],[17,"PROT_GROWSUP","","",N,N],[17,"MAP_TYPE","","",N,N],[17,"MADV_NORMAL","","",N,N],[17,"MADV_RANDOM","","",N,N],[17,"MADV_SEQUENTIAL","","",N,N],[17,"MADV_WILLNEED","","",N,N],[17,"MADV_DONTNEED","","",N,N],[17,"MADV_FREE","","",N,N],[17,"MADV_REMOVE","","",N,N],[17,"MADV_DONTFORK","","",N,N],[17,"MADV_DOFORK","","",N,N],[17,"MADV_MERGEABLE","","",N,N],[17,"MADV_UNMERGEABLE","","",N,N],[17,"MADV_HUGEPAGE","","",N,N],[17,"MADV_NOHUGEPAGE","","",N,N],[17,"MADV_DONTDUMP","","",N,N],[17,"MADV_DODUMP","","",N,N],[17,"MADV_HWPOISON","","",N,N],[17,"MADV_SOFT_OFFLINE","","",N,N],[17,"IFF_UP","","",N,N],[17,"IFF_BROADCAST","","",N,N],[17,"IFF_DEBUG","","",N,N],[17,"IFF_LOOPBACK","","",N,N],[17,"IFF_POINTOPOINT","","",N,N],[17,"IFF_NOTRAILERS","","",N,N],[17,"IFF_RUNNING","","",N,N],[17,"IFF_NOARP","","",N,N],[17,"IFF_PROMISC","","",N,N],[17,"IFF_ALLMULTI","","",N,N],[17,"IFF_MASTER","","",N,N],[17,"IFF_SLAVE","","",N,N],[17,"IFF_MULTICAST","","",N,N],[17,"IFF_PORTSEL","","",N,N],[17,"IFF_AUTOMEDIA","","",N,N],[17,"IFF_DYNAMIC","","",N,N],[17,"SOL_IP","","",N,N],[17,"SOL_TCP","","",N,N],[17,"SOL_UDP","","",N,N],[17,"SOL_IPV6","","",N,N],[17,"SOL_ICMPV6","","",N,N],[17,"SOL_RAW","","",N,N],[17,"SOL_DECNET","","",N,N],[17,"SOL_X25","","",N,N],[17,"SOL_PACKET","","",N,N],[17,"SOL_ATM","","",N,N],[17,"SOL_AAL","","",N,N],[17,"SOL_IRDA","","",N,N],[17,"SOL_NETBEUI","","",N,N],[17,"SOL_LLC","","",N,N],[17,"SOL_DCCP","","",N,N],[17,"SOL_NETLINK","","",N,N],[17,"SOL_TIPC","","",N,N],[17,"AF_UNSPEC","","",N,N],[17,"AF_UNIX","","",N,N],[17,"AF_LOCAL","","",N,N],[17,"AF_INET","","",N,N],[17,"AF_AX25","","",N,N],[17,"AF_IPX","","",N,N],[17,"AF_APPLETALK","","",N,N],[17,"AF_NETROM","","",N,N],[17,"AF_BRIDGE","","",N,N],[17,"AF_ATMPVC","","",N,N],[17,"AF_X25","","",N,N],[17,"AF_INET6","","",N,N],[17,"AF_ROSE","","",N,N],[17,"AF_DECnet","","",N,N],[17,"AF_NETBEUI","","",N,N],[17,"AF_SECURITY","","",N,N],[17,"AF_KEY","","",N,N],[17,"AF_NETLINK","","",N,N],[17,"AF_ROUTE","","",N,N],[17,"AF_PACKET","","",N,N],[17,"AF_ASH","","",N,N],[17,"AF_ECONET","","",N,N],[17,"AF_ATMSVC","","",N,N],[17,"AF_RDS","","",N,N],[17,"AF_SNA","","",N,N],[17,"AF_IRDA","","",N,N],[17,"AF_PPPOX","","",N,N],[17,"AF_WANPIPE","","",N,N],[17,"AF_LLC","","",N,N],[17,"AF_CAN","","",N,N],[17,"AF_TIPC","","",N,N],[17,"AF_BLUETOOTH","","",N,N],[17,"AF_IUCV","","",N,N],[17,"AF_RXRPC","","",N,N],[17,"AF_ISDN","","",N,N],[17,"AF_PHONET","","",N,N],[17,"AF_IEEE802154","","",N,N],[17,"AF_CAIF","","",N,N],[17,"AF_ALG","","",N,N],[17,"PF_UNSPEC","","",N,N],[17,"PF_UNIX","","",N,N],[17,"PF_LOCAL","","",N,N],[17,"PF_INET","","",N,N],[17,"PF_AX25","","",N,N],[17,"PF_IPX","","",N,N],[17,"PF_APPLETALK","","",N,N],[17,"PF_NETROM","","",N,N],[17,"PF_BRIDGE","","",N,N],[17,"PF_ATMPVC","","",N,N],[17,"PF_X25","","",N,N],[17,"PF_INET6","","",N,N],[17,"PF_ROSE","","",N,N],[17,"PF_DECnet","","",N,N],[17,"PF_NETBEUI","","",N,N],[17,"PF_SECURITY","","",N,N],[17,"PF_KEY","","",N,N],[17,"PF_NETLINK","","",N,N],[17,"PF_ROUTE","","",N,N],[17,"PF_PACKET","","",N,N],[17,"PF_ASH","","",N,N],[17,"PF_ECONET","","",N,N],[17,"PF_ATMSVC","","",N,N],[17,"PF_RDS","","",N,N],[17,"PF_SNA","","",N,N],[17,"PF_IRDA","","",N,N],[17,"PF_PPPOX","","",N,N],[17,"PF_WANPIPE","","",N,N],[17,"PF_LLC","","",N,N],[17,"PF_CAN","","",N,N],[17,"PF_TIPC","","",N,N],[17,"PF_BLUETOOTH","","",N,N],[17,"PF_IUCV","","",N,N],[17,"PF_RXRPC","","",N,N],[17,"PF_ISDN","","",N,N],[17,"PF_PHONET","","",N,N],[17,"PF_IEEE802154","","",N,N],[17,"PF_CAIF","","",N,N],[17,"PF_ALG","","",N,N],[17,"SOMAXCONN","","",N,N],[17,"MSG_OOB","","",N,N],[17,"MSG_PEEK","","",N,N],[17,"MSG_DONTROUTE","","",N,N],[17,"MSG_CTRUNC","","",N,N],[17,"MSG_TRUNC","","",N,N],[17,"MSG_DONTWAIT","","",N,N],[17,"MSG_EOR","","",N,N],[17,"MSG_WAITALL","","",N,N],[17,"MSG_FIN","","",N,N],[17,"MSG_SYN","","",N,N],[17,"MSG_CONFIRM","","",N,N],[17,"MSG_RST","","",N,N],[17,"MSG_ERRQUEUE","","",N,N],[17,"MSG_NOSIGNAL","","",N,N],[17,"MSG_MORE","","",N,N],[17,"MSG_WAITFORONE","","",N,N],[17,"MSG_FASTOPEN","","",N,N],[17,"MSG_CMSG_CLOEXEC","","",N,N],[17,"SCM_TIMESTAMP","","",N,N],[17,"SOCK_RAW","","",N,N],[17,"SOCK_RDM","","",N,N],[17,"IP_MULTICAST_IF","","",N,N],[17,"IP_MULTICAST_TTL","","",N,N],[17,"IP_MULTICAST_LOOP","","",N,N],[17,"IP_TTL","","",N,N],[17,"IP_HDRINCL","","",N,N],[17,"IP_PKTINFO","","",N,N],[17,"IP_ADD_MEMBERSHIP","","",N,N],[17,"IP_DROP_MEMBERSHIP","","",N,N],[17,"IP_TRANSPARENT","","",N,N],[17,"IPV6_UNICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_IF","","",N,N],[17,"IPV6_MULTICAST_HOPS","","",N,N],[17,"IPV6_MULTICAST_LOOP","","",N,N],[17,"IPV6_ADD_MEMBERSHIP","","",N,N],[17,"IPV6_DROP_MEMBERSHIP","","",N,N],[17,"IPV6_V6ONLY","","",N,N],[17,"IPV6_RECVPKTINFO","","",N,N],[17,"IPV6_PKTINFO","","",N,N],[17,"TCP_NODELAY","","",N,N],[17,"TCP_MAXSEG","","",N,N],[17,"TCP_CORK","","",N,N],[17,"TCP_KEEPIDLE","","",N,N],[17,"TCP_KEEPINTVL","","",N,N],[17,"TCP_KEEPCNT","","",N,N],[17,"TCP_SYNCNT","","",N,N],[17,"TCP_LINGER2","","",N,N],[17,"TCP_DEFER_ACCEPT","","",N,N],[17,"TCP_WINDOW_CLAMP","","",N,N],[17,"TCP_INFO","","",N,N],[17,"TCP_QUICKACK","","",N,N],[17,"TCP_CONGESTION","","",N,N],[17,"SO_DEBUG","","",N,N],[17,"SHUT_RD","","",N,N],[17,"SHUT_WR","","",N,N],[17,"SHUT_RDWR","","",N,N],[17,"LOCK_SH","","",N,N],[17,"LOCK_EX","","",N,N],[17,"LOCK_NB","","",N,N],[17,"LOCK_UN","","",N,N],[17,"SS_ONSTACK","","",N,N],[17,"SS_DISABLE","","",N,N],[17,"PATH_MAX","","",N,N],[17,"FD_SETSIZE","","",N,N],[17,"EPOLLIN","","",N,N],[17,"EPOLLPRI","","",N,N],[17,"EPOLLOUT","","",N,N],[17,"EPOLLRDNORM","","",N,N],[17,"EPOLLRDBAND","","",N,N],[17,"EPOLLWRNORM","","",N,N],[17,"EPOLLWRBAND","","",N,N],[17,"EPOLLMSG","","",N,N],[17,"EPOLLERR","","",N,N],[17,"EPOLLHUP","","",N,N],[17,"EPOLLET","","",N,N],[17,"EPOLL_CTL_ADD","","",N,N],[17,"EPOLL_CTL_MOD","","",N,N],[17,"EPOLL_CTL_DEL","","",N,N],[17,"MNT_DETACH","","",N,N],[17,"MNT_EXPIRE","","",N,N],[17,"Q_GETFMT","","",N,N],[17,"Q_GETINFO","","",N,N],[17,"Q_SETINFO","","",N,N],[17,"QIF_BLIMITS","","",N,N],[17,"QIF_SPACE","","",N,N],[17,"QIF_ILIMITS","","",N,N],[17,"QIF_INODES","","",N,N],[17,"QIF_BTIME","","",N,N],[17,"QIF_ITIME","","",N,N],[17,"QIF_LIMITS","","",N,N],[17,"QIF_USAGE","","",N,N],[17,"QIF_TIMES","","",N,N],[17,"QIF_ALL","","",N,N],[17,"MNT_FORCE","","",N,N],[17,"Q_SYNC","","",N,N],[17,"Q_QUOTAON","","",N,N],[17,"Q_QUOTAOFF","","",N,N],[17,"Q_GETQUOTA","","",N,N],[17,"Q_SETQUOTA","","",N,N],[17,"TCIOFF","","",N,N],[17,"TCION","","",N,N],[17,"TCOOFF","","",N,N],[17,"TCOON","","",N,N],[17,"TCIFLUSH","","",N,N],[17,"TCOFLUSH","","",N,N],[17,"TCIOFLUSH","","",N,N],[17,"NL0","","",N,N],[17,"NL1","","",N,N],[17,"TAB0","","",N,N],[17,"CR0","","",N,N],[17,"FF0","","",N,N],[17,"BS0","","",N,N],[17,"VT0","","",N,N],[17,"VERASE","","",N,N],[17,"VKILL","","",N,N],[17,"VINTR","","",N,N],[17,"VQUIT","","",N,N],[17,"VLNEXT","","",N,N],[17,"IGNBRK","","",N,N],[17,"BRKINT","","",N,N],[17,"IGNPAR","","",N,N],[17,"PARMRK","","",N,N],[17,"INPCK","","",N,N],[17,"ISTRIP","","",N,N],[17,"INLCR","","",N,N],[17,"IGNCR","","",N,N],[17,"ICRNL","","",N,N],[17,"IXANY","","",N,N],[17,"IMAXBEL","","",N,N],[17,"OPOST","","",N,N],[17,"CS5","","",N,N],[17,"CRTSCTS","","",N,N],[17,"ECHO","","",N,N],[17,"OCRNL","","",N,N],[17,"ONOCR","","",N,N],[17,"ONLRET","","",N,N],[17,"OFILL","","",N,N],[17,"OFDEL","","",N,N],[17,"CLONE_VM","","",N,N],[17,"CLONE_FS","","",N,N],[17,"CLONE_FILES","","",N,N],[17,"CLONE_SIGHAND","","",N,N],[17,"CLONE_PTRACE","","",N,N],[17,"CLONE_VFORK","","",N,N],[17,"CLONE_PARENT","","",N,N],[17,"CLONE_THREAD","","",N,N],[17,"CLONE_NEWNS","","",N,N],[17,"CLONE_SYSVSEM","","",N,N],[17,"CLONE_SETTLS","","",N,N],[17,"CLONE_PARENT_SETTID","","",N,N],[17,"CLONE_CHILD_CLEARTID","","",N,N],[17,"CLONE_DETACHED","","",N,N],[17,"CLONE_UNTRACED","","",N,N],[17,"CLONE_CHILD_SETTID","","",N,N],[17,"CLONE_NEWUTS","","",N,N],[17,"CLONE_NEWIPC","","",N,N],[17,"CLONE_NEWUSER","","",N,N],[17,"CLONE_NEWPID","","",N,N],[17,"CLONE_NEWNET","","",N,N],[17,"CLONE_IO","","",N,N],[17,"CLONE_NEWCGROUP","","",N,N],[17,"WNOHANG","","",N,N],[17,"WUNTRACED","","",N,N],[17,"WSTOPPED","","",N,N],[17,"WEXITED","","",N,N],[17,"WCONTINUED","","",N,N],[17,"WNOWAIT","","",N,N],[17,"PTRACE_O_TRACESYSGOOD","","",N,N],[17,"PTRACE_O_TRACEFORK","","",N,N],[17,"PTRACE_O_TRACEVFORK","","",N,N],[17,"PTRACE_O_TRACECLONE","","",N,N],[17,"PTRACE_O_TRACEEXEC","","",N,N],[17,"PTRACE_O_TRACEVFORKDONE","","",N,N],[17,"PTRACE_O_TRACEEXIT","","",N,N],[17,"PTRACE_O_TRACESECCOMP","","",N,N],[17,"PTRACE_O_EXITKILL","","",N,N],[17,"PTRACE_O_SUSPEND_SECCOMP","","",N,N],[17,"PTRACE_O_MASK","","",N,N],[17,"PTRACE_EVENT_FORK","","",N,N],[17,"PTRACE_EVENT_VFORK","","",N,N],[17,"PTRACE_EVENT_CLONE","","",N,N],[17,"PTRACE_EVENT_EXEC","","",N,N],[17,"PTRACE_EVENT_VFORK_DONE","","",N,N],[17,"PTRACE_EVENT_EXIT","","",N,N],[17,"PTRACE_EVENT_SECCOMP","","",N,N],[17,"__WNOTHREAD","","",N,N],[17,"__WALL","","",N,N],[17,"__WCLONE","","",N,N],[17,"SPLICE_F_MOVE","","",N,N],[17,"SPLICE_F_NONBLOCK","","",N,N],[17,"SPLICE_F_MORE","","",N,N],[17,"SPLICE_F_GIFT","","",N,N],[17,"RTLD_LOCAL","","",N,N],[17,"RTLD_LAZY","","",N,N],[17,"POSIX_FADV_NORMAL","","",N,N],[17,"POSIX_FADV_RANDOM","","",N,N],[17,"POSIX_FADV_SEQUENTIAL","","",N,N],[17,"POSIX_FADV_WILLNEED","","",N,N],[17,"AT_FDCWD","","",N,N],[17,"AT_SYMLINK_NOFOLLOW","","",N,N],[17,"AT_REMOVEDIR","","",N,N],[17,"AT_SYMLINK_FOLLOW","","",N,N],[17,"AT_NO_AUTOMOUNT","","",N,N],[17,"AT_EMPTY_PATH","","",N,N],[17,"LOG_CRON","","",N,N],[17,"LOG_AUTHPRIV","","",N,N],[17,"LOG_FTP","","",N,N],[17,"LOG_PERROR","","",N,N],[17,"PIPE_BUF","","",N,N],[17,"SI_LOAD_SHIFT","","",N,N],[17,"SIGEV_SIGNAL","","",N,N],[17,"SIGEV_NONE","","",N,N],[17,"SIGEV_THREAD","","",N,N],[17,"P_ALL","","",N,N],[17,"P_PID","","",N,N],[17,"P_PGID","","",N,N],[17,"UTIME_OMIT","","",N,N],[17,"UTIME_NOW","","",N,N],[17,"POLLIN","","",N,N],[17,"POLLPRI","","",N,N],[17,"POLLOUT","","",N,N],[17,"POLLERR","","",N,N],[17,"POLLHUP","","",N,N],[17,"POLLNVAL","","",N,N],[17,"POLLRDNORM","","",N,N],[17,"POLLRDBAND","","",N,N],[17,"IPTOS_LOWDELAY","","",N,N],[17,"IPTOS_THROUGHPUT","","",N,N],[17,"IPTOS_RELIABILITY","","",N,N],[17,"IPTOS_MINCOST","","",N,N],[17,"IPTOS_PREC_NETCONTROL","","",N,N],[17,"IPTOS_PREC_INTERNETCONTROL","","",N,N],[17,"IPTOS_PREC_CRITIC_ECP","","",N,N],[17,"IPTOS_PREC_FLASHOVERRIDE","","",N,N],[17,"IPTOS_PREC_FLASH","","",N,N],[17,"IPTOS_PREC_IMMEDIATE","","",N,N],[17,"IPTOS_PREC_PRIORITY","","",N,N],[17,"IPTOS_PREC_ROUTINE","","",N,N],[17,"IPOPT_COPY","","",N,N],[17,"IPOPT_CLASS_MASK","","",N,N],[17,"IPOPT_NUMBER_MASK","","",N,N],[17,"IPOPT_CONTROL","","",N,N],[17,"IPOPT_RESERVED1","","",N,N],[17,"IPOPT_MEASUREMENT","","",N,N],[17,"IPOPT_RESERVED2","","",N,N],[17,"IPOPT_END","","",N,N],[17,"IPOPT_NOOP","","",N,N],[17,"IPOPT_SEC","","",N,N],[17,"IPOPT_LSRR","","",N,N],[17,"IPOPT_TIMESTAMP","","",N,N],[17,"IPOPT_RR","","",N,N],[17,"IPOPT_SID","","",N,N],[17,"IPOPT_SSRR","","",N,N],[17,"IPOPT_RA","","",N,N],[17,"IPVERSION","","",N,N],[17,"MAXTTL","","",N,N],[17,"IPDEFTTL","","",N,N],[17,"IPOPT_OPTVAL","","",N,N],[17,"IPOPT_OLEN","","",N,N],[17,"IPOPT_OFFSET","","",N,N],[17,"IPOPT_MINOFF","","",N,N],[17,"MAX_IPOPTLEN","","",N,N],[17,"IPOPT_NOP","","",N,N],[17,"IPOPT_EOL","","",N,N],[17,"IPOPT_TS","","",N,N],[17,"IPOPT_TS_TSONLY","","",N,N],[17,"IPOPT_TS_TSANDADDR","","",N,N],[17,"IPOPT_TS_PRESPEC","","",N,N],[17,"ARPOP_RREQUEST","","",N,N],[17,"ARPOP_RREPLY","","",N,N],[17,"ARPOP_InREQUEST","","",N,N],[17,"ARPOP_InREPLY","","",N,N],[17,"ARPOP_NAK","","",N,N],[17,"ATF_NETMASK","","",N,N],[17,"ATF_DONTPUB","","",N,N],[17,"ARPHRD_NETROM","","",N,N],[17,"ARPHRD_ETHER","","",N,N],[17,"ARPHRD_EETHER","","",N,N],[17,"ARPHRD_AX25","","",N,N],[17,"ARPHRD_PRONET","","",N,N],[17,"ARPHRD_CHAOS","","",N,N],[17,"ARPHRD_IEEE802","","",N,N],[17,"ARPHRD_ARCNET","","",N,N],[17,"ARPHRD_APPLETLK","","",N,N],[17,"ARPHRD_DLCI","","",N,N],[17,"ARPHRD_ATM","","",N,N],[17,"ARPHRD_METRICOM","","",N,N],[17,"ARPHRD_IEEE1394","","",N,N],[17,"ARPHRD_EUI64","","",N,N],[17,"ARPHRD_INFINIBAND","","",N,N],[17,"ARPHRD_SLIP","","",N,N],[17,"ARPHRD_CSLIP","","",N,N],[17,"ARPHRD_SLIP6","","",N,N],[17,"ARPHRD_CSLIP6","","",N,N],[17,"ARPHRD_RSRVD","","",N,N],[17,"ARPHRD_ADAPT","","",N,N],[17,"ARPHRD_ROSE","","",N,N],[17,"ARPHRD_X25","","",N,N],[17,"ARPHRD_HWX25","","",N,N],[17,"ARPHRD_PPP","","",N,N],[17,"ARPHRD_CISCO","","",N,N],[17,"ARPHRD_HDLC","","",N,N],[17,"ARPHRD_LAPB","","",N,N],[17,"ARPHRD_DDCMP","","",N,N],[17,"ARPHRD_RAWHDLC","","",N,N],[17,"ARPHRD_TUNNEL","","",N,N],[17,"ARPHRD_TUNNEL6","","",N,N],[17,"ARPHRD_FRAD","","",N,N],[17,"ARPHRD_SKIP","","",N,N],[17,"ARPHRD_LOOPBACK","","",N,N],[17,"ARPHRD_LOCALTLK","","",N,N],[17,"ARPHRD_FDDI","","",N,N],[17,"ARPHRD_BIF","","",N,N],[17,"ARPHRD_SIT","","",N,N],[17,"ARPHRD_IPDDP","","",N,N],[17,"ARPHRD_IPGRE","","",N,N],[17,"ARPHRD_PIMREG","","",N,N],[17,"ARPHRD_HIPPI","","",N,N],[17,"ARPHRD_ASH","","",N,N],[17,"ARPHRD_ECONET","","",N,N],[17,"ARPHRD_IRDA","","",N,N],[17,"ARPHRD_FCPP","","",N,N],[17,"ARPHRD_FCAL","","",N,N],[17,"ARPHRD_FCPL","","",N,N],[17,"ARPHRD_FCFABRIC","","",N,N],[17,"ARPHRD_IEEE802_TR","","",N,N],[17,"ARPHRD_IEEE80211","","",N,N],[17,"ARPHRD_IEEE80211_PRISM","","",N,N],[17,"ARPHRD_IEEE80211_RADIOTAP","","",N,N],[17,"ARPHRD_IEEE802154","","",N,N],[17,"ARPHRD_VOID","","",N,N],[17,"ARPHRD_NONE","","",N,N],[17,"ABDAY_1","","",N,N],[17,"ABDAY_2","","",N,N],[17,"ABDAY_3","","",N,N],[17,"ABDAY_4","","",N,N],[17,"ABDAY_5","","",N,N],[17,"ABDAY_6","","",N,N],[17,"ABDAY_7","","",N,N],[17,"DAY_1","","",N,N],[17,"DAY_2","","",N,N],[17,"DAY_3","","",N,N],[17,"DAY_4","","",N,N],[17,"DAY_5","","",N,N],[17,"DAY_6","","",N,N],[17,"DAY_7","","",N,N],[17,"ABMON_1","","",N,N],[17,"ABMON_2","","",N,N],[17,"ABMON_3","","",N,N],[17,"ABMON_4","","",N,N],[17,"ABMON_5","","",N,N],[17,"ABMON_6","","",N,N],[17,"ABMON_7","","",N,N],[17,"ABMON_8","","",N,N],[17,"ABMON_9","","",N,N],[17,"ABMON_10","","",N,N],[17,"ABMON_11","","",N,N],[17,"ABMON_12","","",N,N],[17,"MON_1","","",N,N],[17,"MON_2","","",N,N],[17,"MON_3","","",N,N],[17,"MON_4","","",N,N],[17,"MON_5","","",N,N],[17,"MON_6","","",N,N],[17,"MON_7","","",N,N],[17,"MON_8","","",N,N],[17,"MON_9","","",N,N],[17,"MON_10","","",N,N],[17,"MON_11","","",N,N],[17,"MON_12","","",N,N],[17,"AM_STR","","",N,N],[17,"PM_STR","","",N,N],[17,"D_T_FMT","","",N,N],[17,"D_FMT","","",N,N],[17,"T_FMT","","",N,N],[17,"T_FMT_AMPM","","",N,N],[17,"ERA","","",N,N],[17,"ERA_D_FMT","","",N,N],[17,"ALT_DIGITS","","",N,N],[17,"ERA_D_T_FMT","","",N,N],[17,"ERA_T_FMT","","",N,N],[17,"CODESET","","",N,N],[17,"CRNCYSTR","","",N,N],[17,"RUSAGE_THREAD","","",N,N],[17,"RUSAGE_CHILDREN","","",N,N],[17,"RADIXCHAR","","",N,N],[17,"THOUSEP","","",N,N],[17,"YESEXPR","","",N,N],[17,"NOEXPR","","",N,N],[17,"YESSTR","","",N,N],[17,"NOSTR","","",N,N],[17,"FILENAME_MAX","","",N,N],[17,"L_tmpnam","","",N,N],[17,"_PC_LINK_MAX","","",N,N],[17,"_PC_MAX_CANON","","",N,N],[17,"_PC_MAX_INPUT","","",N,N],[17,"_PC_NAME_MAX","","",N,N],[17,"_PC_PATH_MAX","","",N,N],[17,"_PC_PIPE_BUF","","",N,N],[17,"_PC_CHOWN_RESTRICTED","","",N,N],[17,"_PC_NO_TRUNC","","",N,N],[17,"_PC_VDISABLE","","",N,N],[17,"_PC_SYNC_IO","","",N,N],[17,"_PC_ASYNC_IO","","",N,N],[17,"_PC_PRIO_IO","","",N,N],[17,"_PC_SOCK_MAXBUF","","",N,N],[17,"_PC_FILESIZEBITS","","",N,N],[17,"_PC_REC_INCR_XFER_SIZE","","",N,N],[17,"_PC_REC_MAX_XFER_SIZE","","",N,N],[17,"_PC_REC_MIN_XFER_SIZE","","",N,N],[17,"_PC_REC_XFER_ALIGN","","",N,N],[17,"_PC_ALLOC_SIZE_MIN","","",N,N],[17,"_PC_SYMLINK_MAX","","",N,N],[17,"_PC_2_SYMLINKS","","",N,N],[17,"_SC_ARG_MAX","","",N,N],[17,"_SC_CHILD_MAX","","",N,N],[17,"_SC_CLK_TCK","","",N,N],[17,"_SC_NGROUPS_MAX","","",N,N],[17,"_SC_OPEN_MAX","","",N,N],[17,"_SC_STREAM_MAX","","",N,N],[17,"_SC_TZNAME_MAX","","",N,N],[17,"_SC_JOB_CONTROL","","",N,N],[17,"_SC_SAVED_IDS","","",N,N],[17,"_SC_REALTIME_SIGNALS","","",N,N],[17,"_SC_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_TIMERS","","",N,N],[17,"_SC_ASYNCHRONOUS_IO","","",N,N],[17,"_SC_PRIORITIZED_IO","","",N,N],[17,"_SC_SYNCHRONIZED_IO","","",N,N],[17,"_SC_FSYNC","","",N,N],[17,"_SC_MAPPED_FILES","","",N,N],[17,"_SC_MEMLOCK","","",N,N],[17,"_SC_MEMLOCK_RANGE","","",N,N],[17,"_SC_MEMORY_PROTECTION","","",N,N],[17,"_SC_MESSAGE_PASSING","","",N,N],[17,"_SC_SEMAPHORES","","",N,N],[17,"_SC_SHARED_MEMORY_OBJECTS","","",N,N],[17,"_SC_AIO_LISTIO_MAX","","",N,N],[17,"_SC_AIO_MAX","","",N,N],[17,"_SC_AIO_PRIO_DELTA_MAX","","",N,N],[17,"_SC_DELAYTIMER_MAX","","",N,N],[17,"_SC_MQ_OPEN_MAX","","",N,N],[17,"_SC_MQ_PRIO_MAX","","",N,N],[17,"_SC_VERSION","","",N,N],[17,"_SC_PAGESIZE","","",N,N],[17,"_SC_PAGE_SIZE","","",N,N],[17,"_SC_RTSIG_MAX","","",N,N],[17,"_SC_SEM_NSEMS_MAX","","",N,N],[17,"_SC_SEM_VALUE_MAX","","",N,N],[17,"_SC_SIGQUEUE_MAX","","",N,N],[17,"_SC_TIMER_MAX","","",N,N],[17,"_SC_BC_BASE_MAX","","",N,N],[17,"_SC_BC_DIM_MAX","","",N,N],[17,"_SC_BC_SCALE_MAX","","",N,N],[17,"_SC_BC_STRING_MAX","","",N,N],[17,"_SC_COLL_WEIGHTS_MAX","","",N,N],[17,"_SC_EXPR_NEST_MAX","","",N,N],[17,"_SC_LINE_MAX","","",N,N],[17,"_SC_RE_DUP_MAX","","",N,N],[17,"_SC_2_VERSION","","",N,N],[17,"_SC_2_C_BIND","","",N,N],[17,"_SC_2_C_DEV","","",N,N],[17,"_SC_2_FORT_DEV","","",N,N],[17,"_SC_2_FORT_RUN","","",N,N],[17,"_SC_2_SW_DEV","","",N,N],[17,"_SC_2_LOCALEDEF","","",N,N],[17,"_SC_UIO_MAXIOV","","",N,N],[17,"_SC_IOV_MAX","","",N,N],[17,"_SC_THREADS","","",N,N],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",N,N],[17,"_SC_GETGR_R_SIZE_MAX","","",N,N],[17,"_SC_GETPW_R_SIZE_MAX","","",N,N],[17,"_SC_LOGIN_NAME_MAX","","",N,N],[17,"_SC_TTY_NAME_MAX","","",N,N],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",N,N],[17,"_SC_THREAD_KEYS_MAX","","",N,N],[17,"_SC_THREAD_STACK_MIN","","",N,N],[17,"_SC_THREAD_THREADS_MAX","","",N,N],[17,"_SC_THREAD_ATTR_STACKADDR","","",N,N],[17,"_SC_THREAD_ATTR_STACKSIZE","","",N,N],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",N,N],[17,"_SC_THREAD_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_PRIO_PROTECT","","",N,N],[17,"_SC_THREAD_PROCESS_SHARED","","",N,N],[17,"_SC_NPROCESSORS_CONF","","",N,N],[17,"_SC_NPROCESSORS_ONLN","","",N,N],[17,"_SC_PHYS_PAGES","","",N,N],[17,"_SC_AVPHYS_PAGES","","",N,N],[17,"_SC_ATEXIT_MAX","","",N,N],[17,"_SC_PASS_MAX","","",N,N],[17,"_SC_XOPEN_VERSION","","",N,N],[17,"_SC_XOPEN_XCU_VERSION","","",N,N],[17,"_SC_XOPEN_UNIX","","",N,N],[17,"_SC_XOPEN_CRYPT","","",N,N],[17,"_SC_XOPEN_ENH_I18N","","",N,N],[17,"_SC_XOPEN_SHM","","",N,N],[17,"_SC_2_CHAR_TERM","","",N,N],[17,"_SC_2_UPE","","",N,N],[17,"_SC_XOPEN_XPG2","","",N,N],[17,"_SC_XOPEN_XPG3","","",N,N],[17,"_SC_XOPEN_XPG4","","",N,N],[17,"_SC_NZERO","","",N,N],[17,"_SC_XBS5_ILP32_OFF32","","",N,N],[17,"_SC_XBS5_ILP32_OFFBIG","","",N,N],[17,"_SC_XBS5_LP64_OFF64","","",N,N],[17,"_SC_XBS5_LPBIG_OFFBIG","","",N,N],[17,"_SC_XOPEN_LEGACY","","",N,N],[17,"_SC_XOPEN_REALTIME","","",N,N],[17,"_SC_XOPEN_REALTIME_THREADS","","",N,N],[17,"_SC_ADVISORY_INFO","","",N,N],[17,"_SC_BARRIERS","","",N,N],[17,"_SC_CLOCK_SELECTION","","",N,N],[17,"_SC_CPUTIME","","",N,N],[17,"_SC_THREAD_CPUTIME","","",N,N],[17,"_SC_MONOTONIC_CLOCK","","",N,N],[17,"_SC_READER_WRITER_LOCKS","","",N,N],[17,"_SC_SPIN_LOCKS","","",N,N],[17,"_SC_REGEXP","","",N,N],[17,"_SC_SHELL","","",N,N],[17,"_SC_SPAWN","","",N,N],[17,"_SC_SPORADIC_SERVER","","",N,N],[17,"_SC_THREAD_SPORADIC_SERVER","","",N,N],[17,"_SC_TIMEOUTS","","",N,N],[17,"_SC_TYPED_MEMORY_OBJECTS","","",N,N],[17,"_SC_2_PBS","","",N,N],[17,"_SC_2_PBS_ACCOUNTING","","",N,N],[17,"_SC_2_PBS_LOCATE","","",N,N],[17,"_SC_2_PBS_MESSAGE","","",N,N],[17,"_SC_2_PBS_TRACK","","",N,N],[17,"_SC_SYMLOOP_MAX","","",N,N],[17,"_SC_STREAMS","","",N,N],[17,"_SC_2_PBS_CHECKPOINT","","",N,N],[17,"_SC_V6_ILP32_OFF32","","",N,N],[17,"_SC_V6_ILP32_OFFBIG","","",N,N],[17,"_SC_V6_LP64_OFF64","","",N,N],[17,"_SC_V6_LPBIG_OFFBIG","","",N,N],[17,"_SC_HOST_NAME_MAX","","",N,N],[17,"_SC_TRACE","","",N,N],[17,"_SC_TRACE_EVENT_FILTER","","",N,N],[17,"_SC_TRACE_INHERIT","","",N,N],[17,"_SC_TRACE_LOG","","",N,N],[17,"_SC_IPV6","","",N,N],[17,"_SC_RAW_SOCKETS","","",N,N],[17,"_SC_V7_ILP32_OFF32","","",N,N],[17,"_SC_V7_ILP32_OFFBIG","","",N,N],[17,"_SC_V7_LP64_OFF64","","",N,N],[17,"_SC_V7_LPBIG_OFFBIG","","",N,N],[17,"_SC_SS_REPL_MAX","","",N,N],[17,"_SC_TRACE_EVENT_NAME_MAX","","",N,N],[17,"_SC_TRACE_NAME_MAX","","",N,N],[17,"_SC_TRACE_SYS_MAX","","",N,N],[17,"_SC_TRACE_USER_EVENT_MAX","","",N,N],[17,"_SC_XOPEN_STREAMS","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",N,N],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",N,N],[17,"RLIM_SAVED_MAX","","",N,N],[17,"RLIM_SAVED_CUR","","",N,N],[17,"GLOB_ERR","","",N,N],[17,"GLOB_MARK","","",N,N],[17,"GLOB_NOSORT","","",N,N],[17,"GLOB_DOOFFS","","",N,N],[17,"GLOB_NOCHECK","","",N,N],[17,"GLOB_APPEND","","",N,N],[17,"GLOB_NOESCAPE","","",N,N],[17,"GLOB_NOSPACE","","",N,N],[17,"GLOB_ABORTED","","",N,N],[17,"GLOB_NOMATCH","","",N,N],[17,"POSIX_MADV_NORMAL","","",N,N],[17,"POSIX_MADV_RANDOM","","",N,N],[17,"POSIX_MADV_SEQUENTIAL","","",N,N],[17,"POSIX_MADV_WILLNEED","","",N,N],[17,"S_IEXEC","","",N,N],[17,"S_IWRITE","","",N,N],[17,"S_IREAD","","",N,N],[17,"F_LOCK","","",N,N],[17,"F_TEST","","",N,N],[17,"F_TLOCK","","",N,N],[17,"F_ULOCK","","",N,N],[17,"IFF_LOWER_UP","","",N,N],[17,"IFF_DORMANT","","",N,N],[17,"IFF_ECHO","","",N,N],[17,"IFF_TUN","","",N,N],[17,"IFF_TAP","","",N,N],[17,"IFF_NO_PI","","",N,N],[17,"TUN_READQ_SIZE","","",N,N],[17,"TUN_TUN_DEV","","",N,N],[17,"TUN_TAP_DEV","","",N,N],[17,"TUN_TYPE_MASK","","",N,N],[17,"IFF_ONE_QUEUE","","",N,N],[17,"IFF_VNET_HDR","","",N,N],[17,"IFF_TUN_EXCL","","",N,N],[17,"IFF_MULTI_QUEUE","","",N,N],[17,"IFF_ATTACH_QUEUE","","",N,N],[17,"IFF_DETACH_QUEUE","","",N,N],[17,"IFF_PERSIST","","",N,N],[17,"IFF_NOFILTER","","",N,N],[17,"ST_RDONLY","","",N,N],[17,"ST_NOSUID","","",N,N],[17,"ST_NODEV","","",N,N],[17,"ST_NOEXEC","","",N,N],[17,"ST_SYNCHRONOUS","","",N,N],[17,"ST_MANDLOCK","","",N,N],[17,"ST_WRITE","","",N,N],[17,"ST_APPEND","","",N,N],[17,"ST_IMMUTABLE","","",N,N],[17,"ST_NOATIME","","",N,N],[17,"ST_NODIRATIME","","",N,N],[17,"RTLD_NEXT","","",N,N],[17,"RTLD_DEFAULT","","",N,N],[17,"RTLD_NODELETE","","",N,N],[17,"RTLD_NOW","","",N,N],[17,"TCP_MD5SIG","","",N,N],[17,"PTHREAD_MUTEX_INITIALIZER","","",N,N],[17,"PTHREAD_COND_INITIALIZER","","",N,N],[17,"PTHREAD_RWLOCK_INITIALIZER","","",N,N],[17,"PTHREAD_MUTEX_NORMAL","","",N,N],[17,"PTHREAD_MUTEX_RECURSIVE","","",N,N],[17,"PTHREAD_MUTEX_ERRORCHECK","","",N,N],[17,"PTHREAD_MUTEX_DEFAULT","","",N,N],[17,"PTHREAD_PROCESS_PRIVATE","","",N,N],[17,"PTHREAD_PROCESS_SHARED","","",N,N],[17,"__SIZEOF_PTHREAD_COND_T","","",N,N],[17,"RENAME_NOREPLACE","","",N,N],[17,"RENAME_EXCHANGE","","",N,N],[17,"RENAME_WHITEOUT","","",N,N],[17,"SCHED_OTHER","","",N,N],[17,"SCHED_FIFO","","",N,N],[17,"SCHED_RR","","",N,N],[17,"SCHED_BATCH","","",N,N],[17,"SCHED_IDLE","","",N,N],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",N,N],[17,"IPPROTO_IGMP","","group mgmt protocol",N,N],[17,"IPPROTO_IPIP","","for compatibility",N,N],[17,"IPPROTO_EGP","","exterior gateway protocol",N,N],[17,"IPPROTO_PUP","","pup",N,N],[17,"IPPROTO_IDP","","xns idp",N,N],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",N,N],[17,"IPPROTO_DCCP","","DCCP",N,N],[17,"IPPROTO_ROUTING","","IP6 routing header",N,N],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",N,N],[17,"IPPROTO_RSVP","","resource reservation",N,N],[17,"IPPROTO_GRE","","General Routing Encap.",N,N],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",N,N],[17,"IPPROTO_AH","","IP6 Auth Header",N,N],[17,"IPPROTO_NONE","","IP6 no next header",N,N],[17,"IPPROTO_DSTOPTS","","IP6 destination option",N,N],[17,"IPPROTO_MTP","","",N,N],[17,"IPPROTO_BEETPH","","",N,N],[17,"IPPROTO_ENCAP","","encapsulation header",N,N],[17,"IPPROTO_PIM","","Protocol indep. multicast",N,N],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",N,N],[17,"IPPROTO_SCTP","","SCTP",N,N],[17,"IPPROTO_MH","","",N,N],[17,"IPPROTO_UDPLITE","","",N,N],[17,"IPPROTO_MPLS","","",N,N],[17,"IPPROTO_RAW","","raw IP packet",N,N],[17,"IPPROTO_MAX","","",N,N],[17,"AF_IB","","",N,N],[17,"AF_MPLS","","",N,N],[17,"AF_NFC","","",N,N],[17,"AF_VSOCK","","",N,N],[17,"PF_IB","","",N,N],[17,"PF_MPLS","","",N,N],[17,"PF_NFC","","",N,N],[17,"PF_VSOCK","","",N,N],[17,"IPC_PRIVATE","","",N,N],[17,"IPC_CREAT","","",N,N],[17,"IPC_EXCL","","",N,N],[17,"IPC_NOWAIT","","",N,N],[17,"IPC_RMID","","",N,N],[17,"IPC_SET","","",N,N],[17,"IPC_STAT","","",N,N],[17,"IPC_INFO","","",N,N],[17,"MSG_STAT","","",N,N],[17,"MSG_INFO","","",N,N],[17,"MSG_NOERROR","","",N,N],[17,"MSG_EXCEPT","","",N,N],[17,"MSG_COPY","","",N,N],[17,"SHM_R","","",N,N],[17,"SHM_W","","",N,N],[17,"SHM_RDONLY","","",N,N],[17,"SHM_RND","","",N,N],[17,"SHM_REMAP","","",N,N],[17,"SHM_EXEC","","",N,N],[17,"SHM_LOCK","","",N,N],[17,"SHM_UNLOCK","","",N,N],[17,"SHM_HUGETLB","","",N,N],[17,"SHM_NORESERVE","","",N,N],[17,"EPOLLRDHUP","","",N,N],[17,"EPOLLEXCLUSIVE","","",N,N],[17,"EPOLLONESHOT","","",N,N],[17,"QFMT_VFS_OLD","","",N,N],[17,"QFMT_VFS_V0","","",N,N],[17,"QFMT_VFS_V1","","",N,N],[17,"EFD_SEMAPHORE","","",N,N],[17,"LOG_NFACILITIES","","",N,N],[17,"SEM_FAILED","","",N,N],[17,"RB_AUTOBOOT","","",N,N],[17,"RB_HALT_SYSTEM","","",N,N],[17,"RB_ENABLE_CAD","","",N,N],[17,"RB_DISABLE_CAD","","",N,N],[17,"RB_POWER_OFF","","",N,N],[17,"RB_SW_SUSPEND","","",N,N],[17,"RB_KEXEC","","",N,N],[17,"AI_PASSIVE","","",N,N],[17,"AI_CANONNAME","","",N,N],[17,"AI_NUMERICHOST","","",N,N],[17,"AI_V4MAPPED","","",N,N],[17,"AI_ALL","","",N,N],[17,"AI_ADDRCONFIG","","",N,N],[17,"AI_NUMERICSERV","","",N,N],[17,"EAI_BADFLAGS","","",N,N],[17,"EAI_NONAME","","",N,N],[17,"EAI_AGAIN","","",N,N],[17,"EAI_FAIL","","",N,N],[17,"EAI_NODATA","","",N,N],[17,"EAI_FAMILY","","",N,N],[17,"EAI_SOCKTYPE","","",N,N],[17,"EAI_SERVICE","","",N,N],[17,"EAI_MEMORY","","",N,N],[17,"EAI_SYSTEM","","",N,N],[17,"EAI_OVERFLOW","","",N,N],[17,"NI_NUMERICHOST","","",N,N],[17,"NI_NUMERICSERV","","",N,N],[17,"NI_NOFQDN","","",N,N],[17,"NI_NAMEREQD","","",N,N],[17,"NI_DGRAM","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",N,N],[17,"SYNC_FILE_RANGE_WRITE","","",N,N],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",N,N],[17,"AIO_CANCELED","","",N,N],[17,"AIO_NOTCANCELED","","",N,N],[17,"AIO_ALLDONE","","",N,N],[17,"LIO_READ","","",N,N],[17,"LIO_WRITE","","",N,N],[17,"LIO_NOP","","",N,N],[17,"LIO_WAIT","","",N,N],[17,"LIO_NOWAIT","","",N,N],[17,"MREMAP_MAYMOVE","","",N,N],[17,"MREMAP_FIXED","","",N,N],[17,"PR_SET_PDEATHSIG","","",N,N],[17,"PR_GET_PDEATHSIG","","",N,N],[17,"PR_GET_DUMPABLE","","",N,N],[17,"PR_SET_DUMPABLE","","",N,N],[17,"PR_GET_UNALIGN","","",N,N],[17,"PR_SET_UNALIGN","","",N,N],[17,"PR_UNALIGN_NOPRINT","","",N,N],[17,"PR_UNALIGN_SIGBUS","","",N,N],[17,"PR_GET_KEEPCAPS","","",N,N],[17,"PR_SET_KEEPCAPS","","",N,N],[17,"PR_GET_FPEMU","","",N,N],[17,"PR_SET_FPEMU","","",N,N],[17,"PR_FPEMU_NOPRINT","","",N,N],[17,"PR_FPEMU_SIGFPE","","",N,N],[17,"PR_GET_FPEXC","","",N,N],[17,"PR_SET_FPEXC","","",N,N],[17,"PR_FP_EXC_SW_ENABLE","","",N,N],[17,"PR_FP_EXC_DIV","","",N,N],[17,"PR_FP_EXC_OVF","","",N,N],[17,"PR_FP_EXC_UND","","",N,N],[17,"PR_FP_EXC_RES","","",N,N],[17,"PR_FP_EXC_INV","","",N,N],[17,"PR_FP_EXC_DISABLED","","",N,N],[17,"PR_FP_EXC_NONRECOV","","",N,N],[17,"PR_FP_EXC_ASYNC","","",N,N],[17,"PR_FP_EXC_PRECISE","","",N,N],[17,"PR_GET_TIMING","","",N,N],[17,"PR_SET_TIMING","","",N,N],[17,"PR_TIMING_STATISTICAL","","",N,N],[17,"PR_TIMING_TIMESTAMP","","",N,N],[17,"PR_SET_NAME","","",N,N],[17,"PR_GET_NAME","","",N,N],[17,"PR_GET_ENDIAN","","",N,N],[17,"PR_SET_ENDIAN","","",N,N],[17,"PR_ENDIAN_BIG","","",N,N],[17,"PR_ENDIAN_LITTLE","","",N,N],[17,"PR_ENDIAN_PPC_LITTLE","","",N,N],[17,"PR_GET_SECCOMP","","",N,N],[17,"PR_SET_SECCOMP","","",N,N],[17,"PR_CAPBSET_READ","","",N,N],[17,"PR_CAPBSET_DROP","","",N,N],[17,"PR_GET_TSC","","",N,N],[17,"PR_SET_TSC","","",N,N],[17,"PR_TSC_ENABLE","","",N,N],[17,"PR_TSC_SIGSEGV","","",N,N],[17,"PR_GET_SECUREBITS","","",N,N],[17,"PR_SET_SECUREBITS","","",N,N],[17,"PR_SET_TIMERSLACK","","",N,N],[17,"PR_GET_TIMERSLACK","","",N,N],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",N,N],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",N,N],[17,"PR_MCE_KILL","","",N,N],[17,"PR_MCE_KILL_CLEAR","","",N,N],[17,"PR_MCE_KILL_SET","","",N,N],[17,"PR_MCE_KILL_LATE","","",N,N],[17,"PR_MCE_KILL_EARLY","","",N,N],[17,"PR_MCE_KILL_DEFAULT","","",N,N],[17,"PR_MCE_KILL_GET","","",N,N],[17,"PR_SET_MM","","",N,N],[17,"PR_SET_MM_START_CODE","","",N,N],[17,"PR_SET_MM_END_CODE","","",N,N],[17,"PR_SET_MM_START_DATA","","",N,N],[17,"PR_SET_MM_END_DATA","","",N,N],[17,"PR_SET_MM_START_STACK","","",N,N],[17,"PR_SET_MM_START_BRK","","",N,N],[17,"PR_SET_MM_BRK","","",N,N],[17,"PR_SET_MM_ARG_START","","",N,N],[17,"PR_SET_MM_ARG_END","","",N,N],[17,"PR_SET_MM_ENV_START","","",N,N],[17,"PR_SET_MM_ENV_END","","",N,N],[17,"PR_SET_MM_AUXV","","",N,N],[17,"PR_SET_MM_EXE_FILE","","",N,N],[17,"PR_SET_MM_MAP","","",N,N],[17,"PR_SET_MM_MAP_SIZE","","",N,N],[17,"PR_SET_PTRACER","","",N,N],[17,"PR_SET_CHILD_SUBREAPER","","",N,N],[17,"PR_GET_CHILD_SUBREAPER","","",N,N],[17,"PR_SET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_NO_NEW_PRIVS","","",N,N],[17,"PR_GET_TID_ADDRESS","","",N,N],[17,"PR_SET_THP_DISABLE","","",N,N],[17,"PR_GET_THP_DISABLE","","",N,N],[17,"PR_MPX_ENABLE_MANAGEMENT","","",N,N],[17,"PR_MPX_DISABLE_MANAGEMENT","","",N,N],[17,"PR_SET_FP_MODE","","",N,N],[17,"PR_GET_FP_MODE","","",N,N],[17,"PR_FP_MODE_FR","","",N,N],[17,"PR_FP_MODE_FRE","","",N,N],[17,"PR_CAP_AMBIENT","","",N,N],[17,"PR_CAP_AMBIENT_IS_SET","","",N,N],[17,"PR_CAP_AMBIENT_RAISE","","",N,N],[17,"PR_CAP_AMBIENT_LOWER","","",N,N],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",N,N],[17,"GRND_NONBLOCK","","",N,N],[17,"GRND_RANDOM","","",N,N],[17,"SECCOMP_MODE_DISABLED","","",N,N],[17,"SECCOMP_MODE_STRICT","","",N,N],[17,"SECCOMP_MODE_FILTER","","",N,N],[17,"ITIMER_REAL","","",N,N],[17,"ITIMER_VIRTUAL","","",N,N],[17,"ITIMER_PROF","","",N,N],[17,"TFD_CLOEXEC","","",N,N],[17,"TFD_NONBLOCK","","",N,N],[17,"TFD_TIMER_ABSTIME","","",N,N],[17,"XATTR_CREATE","","",N,N],[17,"XATTR_REPLACE","","",N,N],[17,"_POSIX_VDISABLE","","",N,N],[17,"FALLOC_FL_KEEP_SIZE","","",N,N],[17,"FALLOC_FL_PUNCH_HOLE","","",N,N],[17,"FALLOC_FL_COLLAPSE_RANGE","","",N,N],[17,"FALLOC_FL_ZERO_RANGE","","",N,N],[17,"FALLOC_FL_INSERT_RANGE","","",N,N],[17,"FALLOC_FL_UNSHARE_RANGE","","",N,N],[17,"ENOATTR","","",N,N],[17,"SO_ORIGINAL_DST","","",N,N],[17,"IUTF8","","",N,N],[17,"CMSPAR","","",N,N],[17,"MFD_CLOEXEC","","",N,N],[17,"MFD_ALLOW_SEALING","","",N,N],[17,"PT_NULL","","",N,N],[17,"PT_LOAD","","",N,N],[17,"PT_DYNAMIC","","",N,N],[17,"PT_INTERP","","",N,N],[17,"PT_NOTE","","",N,N],[17,"PT_SHLIB","","",N,N],[17,"PT_PHDR","","",N,N],[17,"PT_TLS","","",N,N],[17,"PT_NUM","","",N,N],[17,"PT_LOOS","","",N,N],[17,"PT_GNU_EH_FRAME","","",N,N],[17,"PT_GNU_STACK","","",N,N],[17,"PT_GNU_RELRO","","",N,N],[17,"ETH_ALEN","","",N,N],[17,"ETH_HLEN","","",N,N],[17,"ETH_ZLEN","","",N,N],[17,"ETH_DATA_LEN","","",N,N],[17,"ETH_FRAME_LEN","","",N,N],[17,"ETH_FCS_LEN","","",N,N],[17,"ETH_P_LOOP","","",N,N],[17,"ETH_P_PUP","","",N,N],[17,"ETH_P_PUPAT","","",N,N],[17,"ETH_P_IP","","",N,N],[17,"ETH_P_X25","","",N,N],[17,"ETH_P_ARP","","",N,N],[17,"ETH_P_BPQ","","",N,N],[17,"ETH_P_IEEEPUP","","",N,N],[17,"ETH_P_IEEEPUPAT","","",N,N],[17,"ETH_P_BATMAN","","",N,N],[17,"ETH_P_DEC","","",N,N],[17,"ETH_P_DNA_DL","","",N,N],[17,"ETH_P_DNA_RC","","",N,N],[17,"ETH_P_DNA_RT","","",N,N],[17,"ETH_P_LAT","","",N,N],[17,"ETH_P_DIAG","","",N,N],[17,"ETH_P_CUST","","",N,N],[17,"ETH_P_SCA","","",N,N],[17,"ETH_P_TEB","","",N,N],[17,"ETH_P_RARP","","",N,N],[17,"ETH_P_ATALK","","",N,N],[17,"ETH_P_AARP","","",N,N],[17,"ETH_P_8021Q","","",N,N],[17,"ETH_P_IPX","","",N,N],[17,"ETH_P_IPV6","","",N,N],[17,"ETH_P_PAUSE","","",N,N],[17,"ETH_P_SLOW","","",N,N],[17,"ETH_P_WCCP","","",N,N],[17,"ETH_P_MPLS_UC","","",N,N],[17,"ETH_P_MPLS_MC","","",N,N],[17,"ETH_P_ATMMPOA","","",N,N],[17,"ETH_P_PPP_DISC","","",N,N],[17,"ETH_P_PPP_SES","","",N,N],[17,"ETH_P_LINK_CTL","","",N,N],[17,"ETH_P_ATMFATE","","",N,N],[17,"ETH_P_PAE","","",N,N],[17,"ETH_P_AOE","","",N,N],[17,"ETH_P_8021AD","","",N,N],[17,"ETH_P_802_EX1","","",N,N],[17,"ETH_P_TIPC","","",N,N],[17,"ETH_P_MACSEC","","",N,N],[17,"ETH_P_8021AH","","",N,N],[17,"ETH_P_MVRP","","",N,N],[17,"ETH_P_1588","","",N,N],[17,"ETH_P_PRP","","",N,N],[17,"ETH_P_FCOE","","",N,N],[17,"ETH_P_TDLS","","",N,N],[17,"ETH_P_FIP","","",N,N],[17,"ETH_P_80221","","",N,N],[17,"ETH_P_LOOPBACK","","",N,N],[17,"ETH_P_QINQ1","","",N,N],[17,"ETH_P_QINQ2","","",N,N],[17,"ETH_P_QINQ3","","",N,N],[17,"ETH_P_EDSA","","",N,N],[17,"ETH_P_AF_IUCV","","",N,N],[17,"ETH_P_802_3_MIN","","",N,N],[17,"ETH_P_802_3","","",N,N],[17,"ETH_P_AX25","","",N,N],[17,"ETH_P_ALL","","",N,N],[17,"ETH_P_802_2","","",N,N],[17,"ETH_P_SNAP","","",N,N],[17,"ETH_P_DDCMP","","",N,N],[17,"ETH_P_WAN_PPP","","",N,N],[17,"ETH_P_PPP_MP","","",N,N],[17,"ETH_P_LOCALTALK","","",N,N],[17,"ETH_P_CANFD","","",N,N],[17,"ETH_P_PPPTALK","","",N,N],[17,"ETH_P_TR_802_2","","",N,N],[17,"ETH_P_MOBITEX","","",N,N],[17,"ETH_P_CONTROL","","",N,N],[17,"ETH_P_IRDA","","",N,N],[17,"ETH_P_ECONET","","",N,N],[17,"ETH_P_HDLC","","",N,N],[17,"ETH_P_ARCNET","","",N,N],[17,"ETH_P_DSA","","",N,N],[17,"ETH_P_TRAILER","","",N,N],[17,"ETH_P_PHONET","","",N,N],[17,"ETH_P_IEEE802154","","",N,N],[17,"ETH_P_CAIF","","",N,N],[17,"POSIX_SPAWN_RESETIDS","","",N,N],[17,"POSIX_SPAWN_SETPGROUP","","",N,N],[17,"POSIX_SPAWN_SETSIGDEF","","",N,N],[17,"POSIX_SPAWN_SETSIGMASK","","",N,N],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",N,N],[17,"POSIX_SPAWN_SETSCHEDULER","","",N,N],[17,"NLMSG_NOOP","","",N,N],[17,"NLMSG_ERROR","","",N,N],[17,"NLMSG_DONE","","",N,N],[17,"NLMSG_OVERRUN","","",N,N],[17,"NLMSG_MIN_TYPE","","",N,N],[17,"GENL_NAMSIZ","","",N,N],[17,"GENL_MIN_ID","","",N,N],[17,"GENL_MAX_ID","","",N,N],[17,"GENL_ADMIN_PERM","","",N,N],[17,"GENL_CMD_CAP_DO","","",N,N],[17,"GENL_CMD_CAP_DUMP","","",N,N],[17,"GENL_CMD_CAP_HASPOL","","",N,N],[17,"GENL_ID_CTRL","","",N,N],[17,"CTRL_CMD_UNSPEC","","",N,N],[17,"CTRL_CMD_NEWFAMILY","","",N,N],[17,"CTRL_CMD_DELFAMILY","","",N,N],[17,"CTRL_CMD_GETFAMILY","","",N,N],[17,"CTRL_CMD_NEWOPS","","",N,N],[17,"CTRL_CMD_DELOPS","","",N,N],[17,"CTRL_CMD_GETOPS","","",N,N],[17,"CTRL_CMD_NEWMCAST_GRP","","",N,N],[17,"CTRL_CMD_DELMCAST_GRP","","",N,N],[17,"CTRL_CMD_GETMCAST_GRP","","",N,N],[17,"CTRL_ATTR_UNSPEC","","",N,N],[17,"CTRL_ATTR_FAMILY_ID","","",N,N],[17,"CTRL_ATTR_FAMILY_NAME","","",N,N],[17,"CTRL_ATTR_VERSION","","",N,N],[17,"CTRL_ATTR_HDRSIZE","","",N,N],[17,"CTRL_ATTR_MAXATTR","","",N,N],[17,"CTRL_ATTR_OPS","","",N,N],[17,"CTRL_ATTR_MCAST_GROUPS","","",N,N],[17,"CTRL_ATTR_OP_UNSPEC","","",N,N],[17,"CTRL_ATTR_OP_ID","","",N,N],[17,"CTRL_ATTR_OP_FLAGS","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",N,N],[17,"CTRL_ATTR_MCAST_GRP_ID","","",N,N],[17,"PACKET_ADD_MEMBERSHIP","","",N,N],[17,"PACKET_DROP_MEMBERSHIP","","",N,N],[17,"PACKET_MR_MULTICAST","","",N,N],[17,"PACKET_MR_PROMISC","","",N,N],[17,"PACKET_MR_ALLMULTI","","",N,N],[17,"PACKET_MR_UNICAST","","",N,N],[17,"NF_DROP","","",N,N],[17,"NF_ACCEPT","","",N,N],[17,"NF_STOLEN","","",N,N],[17,"NF_QUEUE","","",N,N],[17,"NF_REPEAT","","",N,N],[17,"NF_STOP","","",N,N],[17,"NF_MAX_VERDICT","","",N,N],[17,"NF_VERDICT_MASK","","",N,N],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",N,N],[17,"NF_VERDICT_QMASK","","",N,N],[17,"NF_VERDICT_QBITS","","",N,N],[17,"NF_VERDICT_BITS","","",N,N],[17,"NF_INET_PRE_ROUTING","","",N,N],[17,"NF_INET_LOCAL_IN","","",N,N],[17,"NF_INET_FORWARD","","",N,N],[17,"NF_INET_LOCAL_OUT","","",N,N],[17,"NF_INET_POST_ROUTING","","",N,N],[17,"NF_INET_NUMHOOKS","","",N,N],[17,"NFPROTO_UNSPEC","","",N,N],[17,"NFPROTO_IPV4","","",N,N],[17,"NFPROTO_ARP","","",N,N],[17,"NFPROTO_BRIDGE","","",N,N],[17,"NFPROTO_IPV6","","",N,N],[17,"NFPROTO_DECNET","","",N,N],[17,"NFPROTO_NUMPROTO","","",N,N],[17,"NF_IP_PRE_ROUTING","","",N,N],[17,"NF_IP_LOCAL_IN","","",N,N],[17,"NF_IP_FORWARD","","",N,N],[17,"NF_IP_LOCAL_OUT","","",N,N],[17,"NF_IP_POST_ROUTING","","",N,N],[17,"NF_IP_NUMHOOKS","","",N,N],[17,"NF_IP_PRI_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP_PRI_RAW","","",N,N],[17,"NF_IP_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP_PRI_CONNTRACK","","",N,N],[17,"NF_IP_PRI_MANGLE","","",N,N],[17,"NF_IP_PRI_NAT_DST","","",N,N],[17,"NF_IP_PRI_FILTER","","",N,N],[17,"NF_IP_PRI_SECURITY","","",N,N],[17,"NF_IP_PRI_NAT_SRC","","",N,N],[17,"NF_IP_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",N,N],[17,"NF_IP_PRI_LAST","","",N,N],[17,"NF_IP6_PRE_ROUTING","","",N,N],[17,"NF_IP6_LOCAL_IN","","",N,N],[17,"NF_IP6_FORWARD","","",N,N],[17,"NF_IP6_LOCAL_OUT","","",N,N],[17,"NF_IP6_POST_ROUTING","","",N,N],[17,"NF_IP6_NUMHOOKS","","",N,N],[17,"NF_IP6_PRI_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",N,N],[17,"NF_IP6_PRI_RAW","","",N,N],[17,"NF_IP6_PRI_SELINUX_FIRST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK","","",N,N],[17,"NF_IP6_PRI_MANGLE","","",N,N],[17,"NF_IP6_PRI_NAT_DST","","",N,N],[17,"NF_IP6_PRI_FILTER","","",N,N],[17,"NF_IP6_PRI_SECURITY","","",N,N],[17,"NF_IP6_PRI_NAT_SRC","","",N,N],[17,"NF_IP6_PRI_SELINUX_LAST","","",N,N],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",N,N],[17,"NF_IP6_PRI_LAST","","",N,N],[17,"SIOCADDRT","","",N,N],[17,"SIOCDELRT","","",N,N],[17,"SIOCGIFNAME","","",N,N],[17,"SIOCSIFLINK","","",N,N],[17,"SIOCGIFCONF","","",N,N],[17,"SIOCGIFFLAGS","","",N,N],[17,"SIOCSIFFLAGS","","",N,N],[17,"SIOCGIFADDR","","",N,N],[17,"SIOCSIFADDR","","",N,N],[17,"SIOCGIFDSTADDR","","",N,N],[17,"SIOCSIFDSTADDR","","",N,N],[17,"SIOCGIFBRDADDR","","",N,N],[17,"SIOCSIFBRDADDR","","",N,N],[17,"SIOCGIFNETMASK","","",N,N],[17,"SIOCSIFNETMASK","","",N,N],[17,"SIOCGIFMETRIC","","",N,N],[17,"SIOCSIFMETRIC","","",N,N],[17,"SIOCGIFMEM","","",N,N],[17,"SIOCSIFMEM","","",N,N],[17,"SIOCGIFMTU","","",N,N],[17,"SIOCSIFMTU","","",N,N],[17,"SIOCSIFHWADDR","","",N,N],[17,"SIOCGIFENCAP","","",N,N],[17,"SIOCSIFENCAP","","",N,N],[17,"SIOCGIFHWADDR","","",N,N],[17,"SIOCGIFSLAVE","","",N,N],[17,"SIOCSIFSLAVE","","",N,N],[17,"SIOCADDMULTI","","",N,N],[17,"SIOCDELMULTI","","",N,N],[17,"SIOCDARP","","",N,N],[17,"SIOCGARP","","",N,N],[17,"SIOCSARP","","",N,N],[17,"SIOCDRARP","","",N,N],[17,"SIOCGRARP","","",N,N],[17,"SIOCSRARP","","",N,N],[17,"SIOCGIFMAP","","",N,N],[17,"SIOCSIFMAP","","",N,N],[17,"IPTOS_TOS_MASK","","",N,N],[17,"IPTOS_PREC_MASK","","",N,N],[17,"RTF_UP","","",N,N],[17,"RTF_GATEWAY","","",N,N],[17,"RTF_HOST","","",N,N],[17,"RTF_REINSTATE","","",N,N],[17,"RTF_DYNAMIC","","",N,N],[17,"RTF_MODIFIED","","",N,N],[17,"RTF_MTU","","",N,N],[17,"RTF_MSS","","",N,N],[17,"RTF_WINDOW","","",N,N],[17,"RTF_IRTT","","",N,N],[17,"RTF_REJECT","","",N,N],[17,"RTF_STATIC","","",N,N],[17,"RTF_XRESOLVE","","",N,N],[17,"RTF_NOFORWARD","","",N,N],[17,"RTF_THROW","","",N,N],[17,"RTF_NOPMTUDISC","","",N,N],[17,"RTF_DEFAULT","","",N,N],[17,"RTF_ALLONLINK","","",N,N],[17,"RTF_ADDRCONF","","",N,N],[17,"RTF_LINKRT","","",N,N],[17,"RTF_NONEXTHOP","","",N,N],[17,"RTF_CACHE","","",N,N],[17,"RTF_FLOW","","",N,N],[17,"RTF_POLICY","","",N,N],[17,"RTCF_VALVE","","",N,N],[17,"RTCF_MASQ","","",N,N],[17,"RTCF_NAT","","",N,N],[17,"RTCF_DOREDIRECT","","",N,N],[17,"RTCF_LOG","","",N,N],[17,"RTCF_DIRECTSRC","","",N,N],[17,"RTF_LOCAL","","",N,N],[17,"RTF_INTERFACE","","",N,N],[17,"RTF_MULTICAST","","",N,N],[17,"RTF_BROADCAST","","",N,N],[17,"RTF_NAT","","",N,N],[17,"RTF_ADDRCLASSMASK","","",N,N],[17,"RT_CLASS_UNSPEC","","",N,N],[17,"RT_CLASS_DEFAULT","","",N,N],[17,"RT_CLASS_MAIN","","",N,N],[17,"RT_CLASS_LOCAL","","",N,N],[17,"RT_CLASS_MAX","","",N,N],[17,"RTMSG_OVERRUN","","",N,N],[17,"RTMSG_NEWDEVICE","","",N,N],[17,"RTMSG_DELDEVICE","","",N,N],[17,"RTMSG_NEWROUTE","","",N,N],[17,"RTMSG_DELROUTE","","",N,N],[17,"RTMSG_NEWRULE","","",N,N],[17,"RTMSG_DELRULE","","",N,N],[17,"RTMSG_CONTROL","","",N,N],[17,"RTMSG_AR_FAILED","","",N,N],[17,"MAX_ADDR_LEN","","",N,N],[17,"ARPD_UPDATE","","",N,N],[17,"ARPD_LOOKUP","","",N,N],[17,"ARPD_FLUSH","","",N,N],[17,"ATF_MAGIC","","",N,N],[17,"MODULE_INIT_IGNORE_MODVERSIONS","","",N,N],[17,"MODULE_INIT_IGNORE_VERMAGIC","","",N,N],[17,"__UT_LINESIZE","","",N,N],[17,"__UT_NAMESIZE","","",N,N],[17,"__UT_HOSTSIZE","","",N,N],[17,"EMPTY","","",N,N],[17,"RUN_LVL","","",N,N],[17,"BOOT_TIME","","",N,N],[17,"NEW_TIME","","",N,N],[17,"OLD_TIME","","",N,N],[17,"INIT_PROCESS","","",N,N],[17,"LOGIN_PROCESS","","",N,N],[17,"USER_PROCESS","","",N,N],[17,"DEAD_PROCESS","","",N,N],[17,"ACCOUNTING","","",N,N],[17,"RLIMIT_RSS","","",N,N],[17,"RLIMIT_AS","","",N,N],[17,"RLIMIT_MEMLOCK","","",N,N],[17,"RLIM_INFINITY","","",N,N],[17,"RLIMIT_RTTIME","","",N,N],[17,"RLIMIT_NLIMITS","","",N,N],[17,"SOCK_NONBLOCK","","",N,N],[17,"SOL_RXRPC","","",N,N],[17,"SOL_PPPOL2TP","","",N,N],[17,"SOL_BLUETOOTH","","",N,N],[17,"SOL_PNPIPE","","",N,N],[17,"SOL_RDS","","",N,N],[17,"SOL_IUCV","","",N,N],[17,"SOL_CAIF","","",N,N],[17,"SOL_ALG","","",N,N],[17,"SOL_NFC","","",N,N],[17,"MSG_TRYHARD","","",N,N],[17,"LC_PAPER","","",N,N],[17,"LC_NAME","","",N,N],[17,"LC_ADDRESS","","",N,N],[17,"LC_TELEPHONE","","",N,N],[17,"LC_MEASUREMENT","","",N,N],[17,"LC_IDENTIFICATION","","",N,N],[17,"LC_PAPER_MASK","","",N,N],[17,"LC_NAME_MASK","","",N,N],[17,"LC_ADDRESS_MASK","","",N,N],[17,"LC_TELEPHONE_MASK","","",N,N],[17,"LC_MEASUREMENT_MASK","","",N,N],[17,"LC_IDENTIFICATION_MASK","","",N,N],[17,"LC_ALL_MASK","","",N,N],[17,"MAP_ANON","","",N,N],[17,"MAP_ANONYMOUS","","",N,N],[17,"MAP_DENYWRITE","","",N,N],[17,"MAP_EXECUTABLE","","",N,N],[17,"MAP_POPULATE","","",N,N],[17,"MAP_NONBLOCK","","",N,N],[17,"MAP_STACK","","",N,N],[17,"ENOTSUP","","",N,N],[17,"EUCLEAN","","",N,N],[17,"ENOTNAM","","",N,N],[17,"ENAVAIL","","",N,N],[17,"EISNAM","","",N,N],[17,"EREMOTEIO","","",N,N],[17,"SOCK_STREAM","","",N,N],[17,"SOCK_DGRAM","","",N,N],[17,"SOCK_SEQPACKET","","",N,N],[17,"SOCK_DCCP","","",N,N],[17,"SOCK_PACKET","","",N,N],[17,"TCP_COOKIE_TRANSACTIONS","","",N,N],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",N,N],[17,"TCP_THIN_DUPACK","","",N,N],[17,"TCP_USER_TIMEOUT","","",N,N],[17,"TCP_REPAIR","","",N,N],[17,"TCP_REPAIR_QUEUE","","",N,N],[17,"TCP_QUEUE_SEQ","","",N,N],[17,"TCP_REPAIR_OPTIONS","","",N,N],[17,"TCP_FASTOPEN","","",N,N],[17,"TCP_TIMESTAMP","","",N,N],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",N,N],[17,"DCCP_SOCKOPT_SERVICE","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_L","","",N,N],[17,"DCCP_SOCKOPT_CHANGE_R","","",N,N],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",N,N],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",N,N],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",N,N],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",N,N],[17,"DCCP_SOCKOPT_CCID","","",N,N],[17,"DCCP_SOCKOPT_TX_CCID","","",N,N],[17,"DCCP_SOCKOPT_RX_CCID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",N,N],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",N,N],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",N,N],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",N,N],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",N,N],[17,"SIGTTIN","","",N,N],[17,"SIGTTOU","","",N,N],[17,"SIGXCPU","","",N,N],[17,"SIGXFSZ","","",N,N],[17,"SIGVTALRM","","",N,N],[17,"SIGPROF","","",N,N],[17,"SIGWINCH","","",N,N],[17,"SIGEV_THREAD_ID","","",N,N],[17,"BUFSIZ","","",N,N],[17,"TMP_MAX","","",N,N],[17,"FOPEN_MAX","","",N,N],[17,"POSIX_FADV_DONTNEED","","",N,N],[17,"POSIX_FADV_NOREUSE","","",N,N],[17,"POSIX_MADV_DONTNEED","","",N,N],[17,"_SC_EQUIV_CLASS_MAX","","",N,N],[17,"_SC_CHARCLASS_NAME_MAX","","",N,N],[17,"_SC_PII","","",N,N],[17,"_SC_PII_XTI","","",N,N],[17,"_SC_PII_SOCKET","","",N,N],[17,"_SC_PII_INTERNET","","",N,N],[17,"_SC_PII_OSI","","",N,N],[17,"_SC_POLL","","",N,N],[17,"_SC_SELECT","","",N,N],[17,"_SC_PII_INTERNET_STREAM","","",N,N],[17,"_SC_PII_INTERNET_DGRAM","","",N,N],[17,"_SC_PII_OSI_COTS","","",N,N],[17,"_SC_PII_OSI_CLTS","","",N,N],[17,"_SC_PII_OSI_M","","",N,N],[17,"_SC_T_IOV_MAX","","",N,N],[17,"_SC_2_C_VERSION","","",N,N],[17,"_SC_CHAR_BIT","","",N,N],[17,"_SC_CHAR_MAX","","",N,N],[17,"_SC_CHAR_MIN","","",N,N],[17,"_SC_INT_MAX","","",N,N],[17,"_SC_INT_MIN","","",N,N],[17,"_SC_LONG_BIT","","",N,N],[17,"_SC_WORD_BIT","","",N,N],[17,"_SC_MB_LEN_MAX","","",N,N],[17,"_SC_SSIZE_MAX","","",N,N],[17,"_SC_SCHAR_MAX","","",N,N],[17,"_SC_SCHAR_MIN","","",N,N],[17,"_SC_SHRT_MAX","","",N,N],[17,"_SC_SHRT_MIN","","",N,N],[17,"_SC_UCHAR_MAX","","",N,N],[17,"_SC_UINT_MAX","","",N,N],[17,"_SC_ULONG_MAX","","",N,N],[17,"_SC_USHRT_MAX","","",N,N],[17,"_SC_NL_ARGMAX","","",N,N],[17,"_SC_NL_LANGMAX","","",N,N],[17,"_SC_NL_MSGMAX","","",N,N],[17,"_SC_NL_NMAX","","",N,N],[17,"_SC_NL_SETMAX","","",N,N],[17,"_SC_NL_TEXTMAX","","",N,N],[17,"_SC_BASE","","",N,N],[17,"_SC_C_LANG_SUPPORT","","",N,N],[17,"_SC_C_LANG_SUPPORT_R","","",N,N],[17,"_SC_DEVICE_IO","","",N,N],[17,"_SC_DEVICE_SPECIFIC","","",N,N],[17,"_SC_DEVICE_SPECIFIC_R","","",N,N],[17,"_SC_FD_MGMT","","",N,N],[17,"_SC_FIFO","","",N,N],[17,"_SC_PIPE","","",N,N],[17,"_SC_FILE_ATTRIBUTES","","",N,N],[17,"_SC_FILE_LOCKING","","",N,N],[17,"_SC_FILE_SYSTEM","","",N,N],[17,"_SC_MULTI_PROCESS","","",N,N],[17,"_SC_SINGLE_PROCESS","","",N,N],[17,"_SC_NETWORKING","","",N,N],[17,"_SC_REGEX_VERSION","","",N,N],[17,"_SC_SIGNALS","","",N,N],[17,"_SC_SYSTEM_DATABASE","","",N,N],[17,"_SC_SYSTEM_DATABASE_R","","",N,N],[17,"_SC_USER_GROUPS","","",N,N],[17,"_SC_USER_GROUPS_R","","",N,N],[17,"_SC_LEVEL1_ICACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_SIZE","","",N,N],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",N,N],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL2_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL3_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_SIZE","","",N,N],[17,"_SC_LEVEL4_CACHE_ASSOC","","",N,N],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",N,N],[17,"O_ACCMODE","","",N,N],[17,"ST_RELATIME","","",N,N],[17,"NI_MAXHOST","","",N,N],[17,"ADFS_SUPER_MAGIC","","",N,N],[17,"AFFS_SUPER_MAGIC","","",N,N],[17,"CODA_SUPER_MAGIC","","",N,N],[17,"CRAMFS_MAGIC","","",N,N],[17,"EFS_SUPER_MAGIC","","",N,N],[17,"EXT2_SUPER_MAGIC","","",N,N],[17,"EXT3_SUPER_MAGIC","","",N,N],[17,"EXT4_SUPER_MAGIC","","",N,N],[17,"HPFS_SUPER_MAGIC","","",N,N],[17,"HUGETLBFS_MAGIC","","",N,N],[17,"ISOFS_SUPER_MAGIC","","",N,N],[17,"JFFS2_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC","","",N,N],[17,"MINIX_SUPER_MAGIC2","","",N,N],[17,"MINIX2_SUPER_MAGIC","","",N,N],[17,"MINIX2_SUPER_MAGIC2","","",N,N],[17,"MSDOS_SUPER_MAGIC","","",N,N],[17,"NCP_SUPER_MAGIC","","",N,N],[17,"NFS_SUPER_MAGIC","","",N,N],[17,"OPENPROM_SUPER_MAGIC","","",N,N],[17,"PROC_SUPER_MAGIC","","",N,N],[17,"QNX4_SUPER_MAGIC","","",N,N],[17,"REISERFS_SUPER_MAGIC","","",N,N],[17,"SMB_SUPER_MAGIC","","",N,N],[17,"TMPFS_MAGIC","","",N,N],[17,"USBDEVICE_SUPER_MAGIC","","",N,N],[17,"VEOF","","",N,N],[17,"CPU_SETSIZE","","",N,N],[17,"PTRACE_TRACEME","","",N,N],[17,"PTRACE_PEEKTEXT","","",N,N],[17,"PTRACE_PEEKDATA","","",N,N],[17,"PTRACE_PEEKUSER","","",N,N],[17,"PTRACE_POKETEXT","","",N,N],[17,"PTRACE_POKEDATA","","",N,N],[17,"PTRACE_POKEUSER","","",N,N],[17,"PTRACE_CONT","","",N,N],[17,"PTRACE_KILL","","",N,N],[17,"PTRACE_SINGLESTEP","","",N,N],[17,"PTRACE_ATTACH","","",N,N],[17,"PTRACE_SYSCALL","","",N,N],[17,"PTRACE_SETOPTIONS","","",N,N],[17,"PTRACE_GETEVENTMSG","","",N,N],[17,"PTRACE_GETSIGINFO","","",N,N],[17,"PTRACE_SETSIGINFO","","",N,N],[17,"PTRACE_GETREGSET","","",N,N],[17,"PTRACE_SETREGSET","","",N,N],[17,"PTRACE_SEIZE","","",N,N],[17,"PTRACE_INTERRUPT","","",N,N],[17,"PTRACE_LISTEN","","",N,N],[17,"PTRACE_PEEKSIGINFO","","",N,N],[17,"EPOLLWAKEUP","","",N,N],[17,"MAP_HUGETLB","","",N,N],[17,"SEEK_DATA","","",N,N],[17,"SEEK_HOLE","","",N,N],[17,"TCSANOW","","",N,N],[17,"TCSADRAIN","","",N,N],[17,"TCSAFLUSH","","",N,N],[17,"TIOCLINUX","","",N,N],[17,"TIOCGSERIAL","","",N,N],[17,"RTLD_DEEPBIND","","",N,N],[17,"RTLD_GLOBAL","","",N,N],[17,"RTLD_NOLOAD","","",N,N],[17,"LINUX_REBOOT_MAGIC1","","",N,N],[17,"LINUX_REBOOT_MAGIC2","","",N,N],[17,"LINUX_REBOOT_MAGIC2A","","",N,N],[17,"LINUX_REBOOT_MAGIC2B","","",N,N],[17,"LINUX_REBOOT_MAGIC2C","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART","","",N,N],[17,"LINUX_REBOOT_CMD_HALT","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_ON","","",N,N],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",N,N],[17,"LINUX_REBOOT_CMD_RESTART2","","",N,N],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",N,N],[17,"LINUX_REBOOT_CMD_KEXEC","","",N,N],[17,"NETLINK_ROUTE","","",N,N],[17,"NETLINK_UNUSED","","",N,N],[17,"NETLINK_USERSOCK","","",N,N],[17,"NETLINK_FIREWALL","","",N,N],[17,"NETLINK_SOCK_DIAG","","",N,N],[17,"NETLINK_NFLOG","","",N,N],[17,"NETLINK_XFRM","","",N,N],[17,"NETLINK_SELINUX","","",N,N],[17,"NETLINK_ISCSI","","",N,N],[17,"NETLINK_AUDIT","","",N,N],[17,"NETLINK_FIB_LOOKUP","","",N,N],[17,"NETLINK_CONNECTOR","","",N,N],[17,"NETLINK_NETFILTER","","",N,N],[17,"NETLINK_IP6_FW","","",N,N],[17,"NETLINK_DNRTMSG","","",N,N],[17,"NETLINK_KOBJECT_UEVENT","","",N,N],[17,"NETLINK_GENERIC","","",N,N],[17,"NETLINK_SCSITRANSPORT","","",N,N],[17,"NETLINK_ECRYPTFS","","",N,N],[17,"NETLINK_RDMA","","",N,N],[17,"NETLINK_CRYPTO","","",N,N],[17,"NETLINK_INET_DIAG","","",N,N],[17,"MAX_LINKS","","",N,N],[17,"NLM_F_REQUEST","","",N,N],[17,"NLM_F_MULTI","","",N,N],[17,"NLM_F_ACK","","",N,N],[17,"NLM_F_ECHO","","",N,N],[17,"NLM_F_DUMP_INTR","","",N,N],[17,"NLM_F_DUMP_FILTERED","","",N,N],[17,"NLM_F_ROOT","","",N,N],[17,"NLM_F_MATCH","","",N,N],[17,"NLM_F_ATOMIC","","",N,N],[17,"NLM_F_DUMP","","",N,N],[17,"NLM_F_REPLACE","","",N,N],[17,"NLM_F_EXCL","","",N,N],[17,"NLM_F_CREATE","","",N,N],[17,"NLM_F_APPEND","","",N,N],[17,"NETLINK_ADD_MEMBERSHIP","","",N,N],[17,"NETLINK_DROP_MEMBERSHIP","","",N,N],[17,"NETLINK_PKTINFO","","",N,N],[17,"NETLINK_BROADCAST_ERROR","","",N,N],[17,"NETLINK_NO_ENOBUFS","","",N,N],[17,"NETLINK_RX_RING","","",N,N],[17,"NETLINK_TX_RING","","",N,N],[17,"NETLINK_LISTEN_ALL_NSID","","",N,N],[17,"NETLINK_LIST_MEMBERSHIPS","","",N,N],[17,"NETLINK_CAP_ACK","","",N,N],[17,"NLA_F_NESTED","","",N,N],[17,"NLA_F_NET_BYTEORDER","","",N,N],[17,"NLA_TYPE_MASK","","",N,N],[17,"NLA_ALIGNTO","","",N,N],[17,"GENL_UNS_ADMIN_PERM","","",N,N],[17,"GENL_ID_VFS_DQUOT","","",N,N],[17,"GENL_ID_PMCRAID","","",N,N],[17,"TIOCM_LE","","",N,N],[17,"TIOCM_DTR","","",N,N],[17,"TIOCM_RTS","","",N,N],[17,"TIOCM_ST","","",N,N],[17,"TIOCM_SR","","",N,N],[17,"TIOCM_CTS","","",N,N],[17,"TIOCM_CAR","","",N,N],[17,"TIOCM_RNG","","",N,N],[17,"TIOCM_DSR","","",N,N],[17,"TIOCM_CD","","",N,N],[17,"TIOCM_RI","","",N,N],[17,"NF_NETDEV_INGRESS","","",N,N],[17,"NF_NETDEV_NUMHOOKS","","",N,N],[17,"NFPROTO_INET","","",N,N],[17,"NFPROTO_NETDEV","","",N,N],[17,"NFT_TABLE_MAXNAMELEN","","",N,N],[17,"NFT_CHAIN_MAXNAMELEN","","",N,N],[17,"NFT_SET_MAXNAMELEN","","",N,N],[17,"NFT_OBJ_MAXNAMELEN","","",N,N],[17,"NFT_USERDATA_MAXLEN","","",N,N],[17,"NFT_REG_VERDICT","","",N,N],[17,"NFT_REG_1","","",N,N],[17,"NFT_REG_2","","",N,N],[17,"NFT_REG_3","","",N,N],[17,"NFT_REG_4","","",N,N],[17,"__NFT_REG_MAX","","",N,N],[17,"NFT_REG32_00","","",N,N],[17,"NFT_REG32_01","","",N,N],[17,"NFT_REG32_02","","",N,N],[17,"NFT_REG32_03","","",N,N],[17,"NFT_REG32_04","","",N,N],[17,"NFT_REG32_05","","",N,N],[17,"NFT_REG32_06","","",N,N],[17,"NFT_REG32_07","","",N,N],[17,"NFT_REG32_08","","",N,N],[17,"NFT_REG32_09","","",N,N],[17,"NFT_REG32_10","","",N,N],[17,"NFT_REG32_11","","",N,N],[17,"NFT_REG32_12","","",N,N],[17,"NFT_REG32_13","","",N,N],[17,"NFT_REG32_14","","",N,N],[17,"NFT_REG32_15","","",N,N],[17,"NFT_REG_SIZE","","",N,N],[17,"NFT_REG32_SIZE","","",N,N],[17,"NFT_CONTINUE","","",N,N],[17,"NFT_BREAK","","",N,N],[17,"NFT_JUMP","","",N,N],[17,"NFT_GOTO","","",N,N],[17,"NFT_RETURN","","",N,N],[17,"NFT_MSG_NEWTABLE","","",N,N],[17,"NFT_MSG_GETTABLE","","",N,N],[17,"NFT_MSG_DELTABLE","","",N,N],[17,"NFT_MSG_NEWCHAIN","","",N,N],[17,"NFT_MSG_GETCHAIN","","",N,N],[17,"NFT_MSG_DELCHAIN","","",N,N],[17,"NFT_MSG_NEWRULE","","",N,N],[17,"NFT_MSG_GETRULE","","",N,N],[17,"NFT_MSG_DELRULE","","",N,N],[17,"NFT_MSG_NEWSET","","",N,N],[17,"NFT_MSG_GETSET","","",N,N],[17,"NFT_MSG_DELSET","","",N,N],[17,"NFT_MSG_NEWSETELEM","","",N,N],[17,"NFT_MSG_GETSETELEM","","",N,N],[17,"NFT_MSG_DELSETELEM","","",N,N],[17,"NFT_MSG_NEWGEN","","",N,N],[17,"NFT_MSG_GETGEN","","",N,N],[17,"NFT_MSG_TRACE","","",N,N],[17,"NFT_MSG_NEWOBJ","","",N,N],[17,"NFT_MSG_GETOBJ","","",N,N],[17,"NFT_MSG_DELOBJ","","",N,N],[17,"NFT_MSG_GETOBJ_RESET","","",N,N],[17,"NFT_MSG_MAX","","",N,N],[17,"NFT_SET_ANONYMOUS","","",N,N],[17,"NFT_SET_CONSTANT","","",N,N],[17,"NFT_SET_INTERVAL","","",N,N],[17,"NFT_SET_MAP","","",N,N],[17,"NFT_SET_TIMEOUT","","",N,N],[17,"NFT_SET_EVAL","","",N,N],[17,"NFT_SET_POL_PERFORMANCE","","",N,N],[17,"NFT_SET_POL_MEMORY","","",N,N],[17,"NFT_SET_ELEM_INTERVAL_END","","",N,N],[17,"NFT_DATA_VALUE","","",N,N],[17,"NFT_DATA_VERDICT","","",N,N],[17,"NFT_DATA_RESERVED_MASK","","",N,N],[17,"NFT_DATA_VALUE_MAXLEN","","",N,N],[17,"NFT_BYTEORDER_NTOH","","",N,N],[17,"NFT_BYTEORDER_HTON","","",N,N],[17,"NFT_CMP_EQ","","",N,N],[17,"NFT_CMP_NEQ","","",N,N],[17,"NFT_CMP_LT","","",N,N],[17,"NFT_CMP_LTE","","",N,N],[17,"NFT_CMP_GT","","",N,N],[17,"NFT_CMP_GTE","","",N,N],[17,"NFT_RANGE_EQ","","",N,N],[17,"NFT_RANGE_NEQ","","",N,N],[17,"NFT_LOOKUP_F_INV","","",N,N],[17,"NFT_DYNSET_OP_ADD","","",N,N],[17,"NFT_DYNSET_OP_UPDATE","","",N,N],[17,"NFT_DYNSET_F_INV","","",N,N],[17,"NFT_PAYLOAD_LL_HEADER","","",N,N],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",N,N],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",N,N],[17,"NFT_PAYLOAD_CSUM_NONE","","",N,N],[17,"NFT_PAYLOAD_CSUM_INET","","",N,N],[17,"NFT_META_LEN","","",N,N],[17,"NFT_META_PROTOCOL","","",N,N],[17,"NFT_META_PRIORITY","","",N,N],[17,"NFT_META_MARK","","",N,N],[17,"NFT_META_IIF","","",N,N],[17,"NFT_META_OIF","","",N,N],[17,"NFT_META_IIFNAME","","",N,N],[17,"NFT_META_OIFNAME","","",N,N],[17,"NFT_META_IIFTYPE","","",N,N],[17,"NFT_META_OIFTYPE","","",N,N],[17,"NFT_META_SKUID","","",N,N],[17,"NFT_META_SKGID","","",N,N],[17,"NFT_META_NFTRACE","","",N,N],[17,"NFT_META_RTCLASSID","","",N,N],[17,"NFT_META_SECMARK","","",N,N],[17,"NFT_META_NFPROTO","","",N,N],[17,"NFT_META_L4PROTO","","",N,N],[17,"NFT_META_BRI_IIFNAME","","",N,N],[17,"NFT_META_BRI_OIFNAME","","",N,N],[17,"NFT_META_PKTTYPE","","",N,N],[17,"NFT_META_CPU","","",N,N],[17,"NFT_META_IIFGROUP","","",N,N],[17,"NFT_META_OIFGROUP","","",N,N],[17,"NFT_META_CGROUP","","",N,N],[17,"NFT_META_PRANDOM","","",N,N],[17,"NFT_CT_STATE","","",N,N],[17,"NFT_CT_DIRECTION","","",N,N],[17,"NFT_CT_STATUS","","",N,N],[17,"NFT_CT_MARK","","",N,N],[17,"NFT_CT_SECMARK","","",N,N],[17,"NFT_CT_EXPIRATION","","",N,N],[17,"NFT_CT_HELPER","","",N,N],[17,"NFT_CT_L3PROTOCOL","","",N,N],[17,"NFT_CT_SRC","","",N,N],[17,"NFT_CT_DST","","",N,N],[17,"NFT_CT_PROTOCOL","","",N,N],[17,"NFT_CT_PROTO_SRC","","",N,N],[17,"NFT_CT_PROTO_DST","","",N,N],[17,"NFT_CT_LABELS","","",N,N],[17,"NFT_CT_PKTS","","",N,N],[17,"NFT_CT_BYTES","","",N,N],[17,"NFT_LIMIT_PKTS","","",N,N],[17,"NFT_LIMIT_PKT_BYTES","","",N,N],[17,"NFT_LIMIT_F_INV","","",N,N],[17,"NFT_QUEUE_FLAG_BYPASS","","",N,N],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",N,N],[17,"NFT_QUEUE_FLAG_MASK","","",N,N],[17,"NFT_QUOTA_F_INV","","",N,N],[17,"NFT_REJECT_ICMP_UNREACH","","",N,N],[17,"NFT_REJECT_TCP_RST","","",N,N],[17,"NFT_REJECT_ICMPX_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",N,N],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",N,N],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",N,N],[17,"NFT_NAT_SNAT","","",N,N],[17,"NFT_NAT_DNAT","","",N,N],[17,"NFT_TRACETYPE_UNSPEC","","",N,N],[17,"NFT_TRACETYPE_POLICY","","",N,N],[17,"NFT_TRACETYPE_RETURN","","",N,N],[17,"NFT_TRACETYPE_RULE","","",N,N],[17,"NFT_NG_INCREMENTAL","","",N,N],[17,"NFT_NG_RANDOM","","",N,N],[17,"PTHREAD_STACK_MIN","","",N,N],[17,"PTHREAD_MUTEX_ADAPTIVE_NP","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",N,N],[17,"O_LARGEFILE","","",N,N],[17,"TIOCGSOFTCAR","","",N,N],[17,"TIOCSSOFTCAR","","",N,N],[17,"RLIMIT_NOFILE","","",N,N],[17,"RLIMIT_NPROC","","",N,N],[17,"O_APPEND","","",N,N],[17,"O_CREAT","","",N,N],[17,"O_EXCL","","",N,N],[17,"O_NOCTTY","","",N,N],[17,"O_NONBLOCK","","",N,N],[17,"O_SYNC","","",N,N],[17,"O_RSYNC","","",N,N],[17,"O_DSYNC","","",N,N],[17,"O_FSYNC","","",N,N],[17,"O_NOATIME","","",N,N],[17,"O_PATH","","",N,N],[17,"O_TMPFILE","","",N,N],[17,"MAP_GROWSDOWN","","",N,N],[17,"EDEADLK","","",N,N],[17,"ENAMETOOLONG","","",N,N],[17,"ENOLCK","","",N,N],[17,"ENOSYS","","",N,N],[17,"ENOTEMPTY","","",N,N],[17,"ELOOP","","",N,N],[17,"ENOMSG","","",N,N],[17,"EIDRM","","",N,N],[17,"ECHRNG","","",N,N],[17,"EL2NSYNC","","",N,N],[17,"EL3HLT","","",N,N],[17,"EL3RST","","",N,N],[17,"ELNRNG","","",N,N],[17,"EUNATCH","","",N,N],[17,"ENOCSI","","",N,N],[17,"EL2HLT","","",N,N],[17,"EBADE","","",N,N],[17,"EBADR","","",N,N],[17,"EXFULL","","",N,N],[17,"ENOANO","","",N,N],[17,"EBADRQC","","",N,N],[17,"EBADSLT","","",N,N],[17,"EMULTIHOP","","",N,N],[17,"EOVERFLOW","","",N,N],[17,"ENOTUNIQ","","",N,N],[17,"EBADFD","","",N,N],[17,"EBADMSG","","",N,N],[17,"EREMCHG","","",N,N],[17,"ELIBACC","","",N,N],[17,"ELIBBAD","","",N,N],[17,"ELIBSCN","","",N,N],[17,"ELIBMAX","","",N,N],[17,"ELIBEXEC","","",N,N],[17,"EILSEQ","","",N,N],[17,"ERESTART","","",N,N],[17,"ESTRPIPE","","",N,N],[17,"EUSERS","","",N,N],[17,"ENOTSOCK","","",N,N],[17,"EDESTADDRREQ","","",N,N],[17,"EMSGSIZE","","",N,N],[17,"EPROTOTYPE","","",N,N],[17,"ENOPROTOOPT","","",N,N],[17,"EPROTONOSUPPORT","","",N,N],[17,"ESOCKTNOSUPPORT","","",N,N],[17,"EOPNOTSUPP","","",N,N],[17,"EPFNOSUPPORT","","",N,N],[17,"EAFNOSUPPORT","","",N,N],[17,"EADDRINUSE","","",N,N],[17,"EADDRNOTAVAIL","","",N,N],[17,"ENETDOWN","","",N,N],[17,"ENETUNREACH","","",N,N],[17,"ENETRESET","","",N,N],[17,"ECONNABORTED","","",N,N],[17,"ECONNRESET","","",N,N],[17,"ENOBUFS","","",N,N],[17,"EISCONN","","",N,N],[17,"ENOTCONN","","",N,N],[17,"ESHUTDOWN","","",N,N],[17,"ETOOMANYREFS","","",N,N],[17,"ETIMEDOUT","","",N,N],[17,"ECONNREFUSED","","",N,N],[17,"EHOSTDOWN","","",N,N],[17,"EHOSTUNREACH","","",N,N],[17,"EALREADY","","",N,N],[17,"EINPROGRESS","","",N,N],[17,"ESTALE","","",N,N],[17,"EDQUOT","","",N,N],[17,"ENOMEDIUM","","",N,N],[17,"EMEDIUMTYPE","","",N,N],[17,"ECANCELED","","",N,N],[17,"ENOKEY","","",N,N],[17,"EKEYEXPIRED","","",N,N],[17,"EKEYREVOKED","","",N,N],[17,"EKEYREJECTED","","",N,N],[17,"EOWNERDEAD","","",N,N],[17,"ENOTRECOVERABLE","","",N,N],[17,"EHWPOISON","","",N,N],[17,"ERFKILL","","",N,N],[17,"SOL_SOCKET","","",N,N],[17,"SO_REUSEADDR","","",N,N],[17,"SO_TYPE","","",N,N],[17,"SO_ERROR","","",N,N],[17,"SO_DONTROUTE","","",N,N],[17,"SO_BROADCAST","","",N,N],[17,"SO_SNDBUF","","",N,N],[17,"SO_RCVBUF","","",N,N],[17,"SO_SNDBUFFORCE","","",N,N],[17,"SO_RCVBUFFORCE","","",N,N],[17,"SO_KEEPALIVE","","",N,N],[17,"SO_OOBINLINE","","",N,N],[17,"SO_NO_CHECK","","",N,N],[17,"SO_PRIORITY","","",N,N],[17,"SO_LINGER","","",N,N],[17,"SO_BSDCOMPAT","","",N,N],[17,"SO_REUSEPORT","","",N,N],[17,"SO_PASSCRED","","",N,N],[17,"SO_PEERCRED","","",N,N],[17,"SO_RCVLOWAT","","",N,N],[17,"SO_SNDLOWAT","","",N,N],[17,"SO_RCVTIMEO","","",N,N],[17,"SO_SNDTIMEO","","",N,N],[17,"SO_SECURITY_AUTHENTICATION","","",N,N],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",N,N],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",N,N],[17,"SO_BINDTODEVICE","","",N,N],[17,"SO_ATTACH_FILTER","","",N,N],[17,"SO_DETACH_FILTER","","",N,N],[17,"SO_GET_FILTER","","",N,N],[17,"SO_PEERNAME","","",N,N],[17,"SO_TIMESTAMP","","",N,N],[17,"SO_ACCEPTCONN","","",N,N],[17,"SO_PEERSEC","","",N,N],[17,"SO_PASSSEC","","",N,N],[17,"SO_TIMESTAMPNS","","",N,N],[17,"SCM_TIMESTAMPNS","","",N,N],[17,"SO_MARK","","",N,N],[17,"SO_TIMESTAMPING","","",N,N],[17,"SCM_TIMESTAMPING","","",N,N],[17,"SO_PROTOCOL","","",N,N],[17,"SO_DOMAIN","","",N,N],[17,"SO_RXQ_OVFL","","",N,N],[17,"SO_WIFI_STATUS","","",N,N],[17,"SCM_WIFI_STATUS","","",N,N],[17,"SO_PEEK_OFF","","",N,N],[17,"SO_NOFCS","","",N,N],[17,"SO_LOCK_FILTER","","",N,N],[17,"SO_SELECT_ERR_QUEUE","","",N,N],[17,"SO_BUSY_POLL","","",N,N],[17,"SO_MAX_PACING_RATE","","",N,N],[17,"SO_BPF_EXTENSIONS","","",N,N],[17,"SO_INCOMING_CPU","","",N,N],[17,"SO_ATTACH_BPF","","",N,N],[17,"SO_DETACH_BPF","","",N,N],[17,"SA_ONSTACK","","",N,N],[17,"SA_SIGINFO","","",N,N],[17,"SA_NOCLDWAIT","","",N,N],[17,"SIGCHLD","","",N,N],[17,"SIGBUS","","",N,N],[17,"SIGUSR1","","",N,N],[17,"SIGUSR2","","",N,N],[17,"SIGCONT","","",N,N],[17,"SIGSTOP","","",N,N],[17,"SIGTSTP","","",N,N],[17,"SIGURG","","",N,N],[17,"SIGIO","","",N,N],[17,"SIGSYS","","",N,N],[17,"SIGSTKFLT","","",N,N],[17,"SIGUNUSED","","",N,N],[17,"SIGPOLL","","",N,N],[17,"SIGPWR","","",N,N],[17,"SIG_SETMASK","","",N,N],[17,"SIG_BLOCK","","",N,N],[17,"SIG_UNBLOCK","","",N,N],[17,"POLLWRNORM","","",N,N],[17,"POLLWRBAND","","",N,N],[17,"O_ASYNC","","",N,N],[17,"O_NDELAY","","",N,N],[17,"PTRACE_DETACH","","",N,N],[17,"EFD_NONBLOCK","","",N,N],[17,"F_GETLK","","",N,N],[17,"F_GETOWN","","",N,N],[17,"F_SETOWN","","",N,N],[17,"F_SETLK","","",N,N],[17,"F_SETLKW","","",N,N],[17,"F_RDLCK","","",N,N],[17,"F_WRLCK","","",N,N],[17,"F_UNLCK","","",N,N],[17,"SFD_NONBLOCK","","",N,N],[17,"TIOCEXCL","","",N,N],[17,"TIOCNXCL","","",N,N],[17,"TIOCSCTTY","","",N,N],[17,"TIOCSTI","","",N,N],[17,"TIOCMGET","","",N,N],[17,"TIOCMBIS","","",N,N],[17,"TIOCMBIC","","",N,N],[17,"TIOCMSET","","",N,N],[17,"TIOCCONS","","",N,N],[17,"SFD_CLOEXEC","","",N,N],[17,"NCCS","","",N,N],[17,"O_TRUNC","","",N,N],[17,"O_CLOEXEC","","",N,N],[17,"EBFONT","","",N,N],[17,"ENOSTR","","",N,N],[17,"ENODATA","","",N,N],[17,"ETIME","","",N,N],[17,"ENOSR","","",N,N],[17,"ENONET","","",N,N],[17,"ENOPKG","","",N,N],[17,"EREMOTE","","",N,N],[17,"ENOLINK","","",N,N],[17,"EADV","","",N,N],[17,"ESRMNT","","",N,N],[17,"ECOMM","","",N,N],[17,"EPROTO","","",N,N],[17,"EDOTDOT","","",N,N],[17,"SA_NODEFER","","",N,N],[17,"SA_RESETHAND","","",N,N],[17,"SA_RESTART","","",N,N],[17,"SA_NOCLDSTOP","","",N,N],[17,"EPOLL_CLOEXEC","","",N,N],[17,"EFD_CLOEXEC","","",N,N],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",N,N],[17,"O_DIRECT","","",N,N],[17,"O_DIRECTORY","","",N,N],[17,"O_NOFOLLOW","","",N,N],[17,"MAP_LOCKED","","",N,N],[17,"MAP_NORESERVE","","",N,N],[17,"MAP_32BIT","","",N,N],[17,"EDEADLOCK","","",N,N],[17,"FIOCLEX","","",N,N],[17,"FIONBIO","","",N,N],[17,"PTRACE_GETFPREGS","","",N,N],[17,"PTRACE_SETFPREGS","","",N,N],[17,"PTRACE_GETFPXREGS","","",N,N],[17,"PTRACE_SETFPXREGS","","",N,N],[17,"PTRACE_GETREGS","","",N,N],[17,"PTRACE_SETREGS","","",N,N],[17,"PTRACE_PEEKSIGINFO_SHARED","","",N,N],[17,"MCL_CURRENT","","",N,N],[17,"MCL_FUTURE","","",N,N],[17,"SIGSTKSZ","","",N,N],[17,"MINSIGSTKSZ","","",N,N],[17,"CBAUD","","",N,N],[17,"TAB1","","",N,N],[17,"TAB2","","",N,N],[17,"TAB3","","",N,N],[17,"CR1","","",N,N],[17,"CR2","","",N,N],[17,"CR3","","",N,N],[17,"FF1","","",N,N],[17,"BS1","","",N,N],[17,"VT1","","",N,N],[17,"VWERASE","","",N,N],[17,"VREPRINT","","",N,N],[17,"VSUSP","","",N,N],[17,"VSTART","","",N,N],[17,"VSTOP","","",N,N],[17,"VDISCARD","","",N,N],[17,"VTIME","","",N,N],[17,"IXON","","",N,N],[17,"IXOFF","","",N,N],[17,"ONLCR","","",N,N],[17,"CSIZE","","",N,N],[17,"CS6","","",N,N],[17,"CS7","","",N,N],[17,"CS8","","",N,N],[17,"CSTOPB","","",N,N],[17,"CREAD","","",N,N],[17,"PARENB","","",N,N],[17,"PARODD","","",N,N],[17,"HUPCL","","",N,N],[17,"CLOCAL","","",N,N],[17,"ECHOKE","","",N,N],[17,"ECHOE","","",N,N],[17,"ECHOK","","",N,N],[17,"ECHONL","","",N,N],[17,"ECHOPRT","","",N,N],[17,"ECHOCTL","","",N,N],[17,"ISIG","","",N,N],[17,"ICANON","","",N,N],[17,"PENDIN","","",N,N],[17,"NOFLSH","","",N,N],[17,"CIBAUD","","",N,N],[17,"CBAUDEX","","",N,N],[17,"VSWTC","","",N,N],[17,"OLCUC","","",N,N],[17,"NLDLY","","",N,N],[17,"CRDLY","","",N,N],[17,"TABDLY","","",N,N],[17,"BSDLY","","",N,N],[17,"FFDLY","","",N,N],[17,"VTDLY","","",N,N],[17,"XTABS","","",N,N],[17,"B0","","",N,N],[17,"B50","","",N,N],[17,"B75","","",N,N],[17,"B110","","",N,N],[17,"B134","","",N,N],[17,"B150","","",N,N],[17,"B200","","",N,N],[17,"B300","","",N,N],[17,"B600","","",N,N],[17,"B1200","","",N,N],[17,"B1800","","",N,N],[17,"B2400","","",N,N],[17,"B4800","","",N,N],[17,"B9600","","",N,N],[17,"B19200","","",N,N],[17,"B38400","","",N,N],[17,"EXTA","","",N,N],[17,"EXTB","","",N,N],[17,"BOTHER","","",N,N],[17,"B57600","","",N,N],[17,"B115200","","",N,N],[17,"B230400","","",N,N],[17,"B460800","","",N,N],[17,"B500000","","",N,N],[17,"B576000","","",N,N],[17,"B921600","","",N,N],[17,"B1000000","","",N,N],[17,"B1152000","","",N,N],[17,"B1500000","","",N,N],[17,"B2000000","","",N,N],[17,"B2500000","","",N,N],[17,"B3000000","","",N,N],[17,"B3500000","","",N,N],[17,"B4000000","","",N,N],[17,"VEOL","","",N,N],[17,"VEOL2","","",N,N],[17,"VMIN","","",N,N],[17,"IEXTEN","","",N,N],[17,"TOSTOP","","",N,N],[17,"FLUSHO","","",N,N],[17,"EXTPROC","","",N,N],[17,"TCGETS","","",N,N],[17,"TCSETS","","",N,N],[17,"TCSETSW","","",N,N],[17,"TCSETSF","","",N,N],[17,"TCGETA","","",N,N],[17,"TCSETA","","",N,N],[17,"TCSETAW","","",N,N],[17,"TCSETAF","","",N,N],[17,"TCSBRK","","",N,N],[17,"TCXONC","","",N,N],[17,"TCFLSH","","",N,N],[17,"TIOCINQ","","",N,N],[17,"TIOCGPGRP","","",N,N],[17,"TIOCSPGRP","","",N,N],[17,"TIOCOUTQ","","",N,N],[17,"TIOCGWINSZ","","",N,N],[17,"TIOCSWINSZ","","",N,N],[17,"FIONREAD","","",N,N],[17,"R15","","",N,N],[17,"R14","","",N,N],[17,"R13","","",N,N],[17,"R12","","",N,N],[17,"RBP","","",N,N],[17,"RBX","","",N,N],[17,"R11","","",N,N],[17,"R10","","",N,N],[17,"R9","","",N,N],[17,"R8","","",N,N],[17,"RAX","","",N,N],[17,"RCX","","",N,N],[17,"RDX","","",N,N],[17,"RSI","","",N,N],[17,"RDI","","",N,N],[17,"ORIG_RAX","","",N,N],[17,"RIP","","",N,N],[17,"CS","","",N,N],[17,"EFLAGS","","",N,N],[17,"RSP","","",N,N],[17,"SS","","",N,N],[17,"FS_BASE","","",N,N],[17,"GS_BASE","","",N,N],[17,"DS","","",N,N],[17,"ES","","",N,N],[17,"FS","","",N,N],[17,"GS","","",N,N],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",N,N],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",N,N],[17,"PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","","",N,N],[17,"PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","","",N,N],[17,"SYS_read","","",N,N],[17,"SYS_write","","",N,N],[17,"SYS_open","","",N,N],[17,"SYS_close","","",N,N],[17,"SYS_stat","","",N,N],[17,"SYS_fstat","","",N,N],[17,"SYS_lstat","","",N,N],[17,"SYS_poll","","",N,N],[17,"SYS_lseek","","",N,N],[17,"SYS_mmap","","",N,N],[17,"SYS_mprotect","","",N,N],[17,"SYS_munmap","","",N,N],[17,"SYS_brk","","",N,N],[17,"SYS_rt_sigaction","","",N,N],[17,"SYS_rt_sigprocmask","","",N,N],[17,"SYS_rt_sigreturn","","",N,N],[17,"SYS_ioctl","","",N,N],[17,"SYS_pread64","","",N,N],[17,"SYS_pwrite64","","",N,N],[17,"SYS_readv","","",N,N],[17,"SYS_writev","","",N,N],[17,"SYS_access","","",N,N],[17,"SYS_pipe","","",N,N],[17,"SYS_select","","",N,N],[17,"SYS_sched_yield","","",N,N],[17,"SYS_mremap","","",N,N],[17,"SYS_msync","","",N,N],[17,"SYS_mincore","","",N,N],[17,"SYS_madvise","","",N,N],[17,"SYS_shmget","","",N,N],[17,"SYS_shmat","","",N,N],[17,"SYS_shmctl","","",N,N],[17,"SYS_dup","","",N,N],[17,"SYS_dup2","","",N,N],[17,"SYS_pause","","",N,N],[17,"SYS_nanosleep","","",N,N],[17,"SYS_getitimer","","",N,N],[17,"SYS_alarm","","",N,N],[17,"SYS_setitimer","","",N,N],[17,"SYS_getpid","","",N,N],[17,"SYS_sendfile","","",N,N],[17,"SYS_socket","","",N,N],[17,"SYS_connect","","",N,N],[17,"SYS_accept","","",N,N],[17,"SYS_sendto","","",N,N],[17,"SYS_recvfrom","","",N,N],[17,"SYS_sendmsg","","",N,N],[17,"SYS_recvmsg","","",N,N],[17,"SYS_shutdown","","",N,N],[17,"SYS_bind","","",N,N],[17,"SYS_listen","","",N,N],[17,"SYS_getsockname","","",N,N],[17,"SYS_getpeername","","",N,N],[17,"SYS_socketpair","","",N,N],[17,"SYS_setsockopt","","",N,N],[17,"SYS_getsockopt","","",N,N],[17,"SYS_clone","","",N,N],[17,"SYS_fork","","",N,N],[17,"SYS_vfork","","",N,N],[17,"SYS_execve","","",N,N],[17,"SYS_exit","","",N,N],[17,"SYS_wait4","","",N,N],[17,"SYS_kill","","",N,N],[17,"SYS_uname","","",N,N],[17,"SYS_semget","","",N,N],[17,"SYS_semop","","",N,N],[17,"SYS_semctl","","",N,N],[17,"SYS_shmdt","","",N,N],[17,"SYS_msgget","","",N,N],[17,"SYS_msgsnd","","",N,N],[17,"SYS_msgrcv","","",N,N],[17,"SYS_msgctl","","",N,N],[17,"SYS_fcntl","","",N,N],[17,"SYS_flock","","",N,N],[17,"SYS_fsync","","",N,N],[17,"SYS_fdatasync","","",N,N],[17,"SYS_truncate","","",N,N],[17,"SYS_ftruncate","","",N,N],[17,"SYS_getdents","","",N,N],[17,"SYS_getcwd","","",N,N],[17,"SYS_chdir","","",N,N],[17,"SYS_fchdir","","",N,N],[17,"SYS_rename","","",N,N],[17,"SYS_mkdir","","",N,N],[17,"SYS_rmdir","","",N,N],[17,"SYS_creat","","",N,N],[17,"SYS_link","","",N,N],[17,"SYS_unlink","","",N,N],[17,"SYS_symlink","","",N,N],[17,"SYS_readlink","","",N,N],[17,"SYS_chmod","","",N,N],[17,"SYS_fchmod","","",N,N],[17,"SYS_chown","","",N,N],[17,"SYS_fchown","","",N,N],[17,"SYS_lchown","","",N,N],[17,"SYS_umask","","",N,N],[17,"SYS_gettimeofday","","",N,N],[17,"SYS_getrlimit","","",N,N],[17,"SYS_getrusage","","",N,N],[17,"SYS_sysinfo","","",N,N],[17,"SYS_times","","",N,N],[17,"SYS_ptrace","","",N,N],[17,"SYS_getuid","","",N,N],[17,"SYS_syslog","","",N,N],[17,"SYS_getgid","","",N,N],[17,"SYS_setuid","","",N,N],[17,"SYS_setgid","","",N,N],[17,"SYS_geteuid","","",N,N],[17,"SYS_getegid","","",N,N],[17,"SYS_setpgid","","",N,N],[17,"SYS_getppid","","",N,N],[17,"SYS_getpgrp","","",N,N],[17,"SYS_setsid","","",N,N],[17,"SYS_setreuid","","",N,N],[17,"SYS_setregid","","",N,N],[17,"SYS_getgroups","","",N,N],[17,"SYS_setgroups","","",N,N],[17,"SYS_setresuid","","",N,N],[17,"SYS_getresuid","","",N,N],[17,"SYS_setresgid","","",N,N],[17,"SYS_getresgid","","",N,N],[17,"SYS_getpgid","","",N,N],[17,"SYS_setfsuid","","",N,N],[17,"SYS_setfsgid","","",N,N],[17,"SYS_getsid","","",N,N],[17,"SYS_capget","","",N,N],[17,"SYS_capset","","",N,N],[17,"SYS_rt_sigpending","","",N,N],[17,"SYS_rt_sigtimedwait","","",N,N],[17,"SYS_rt_sigqueueinfo","","",N,N],[17,"SYS_rt_sigsuspend","","",N,N],[17,"SYS_sigaltstack","","",N,N],[17,"SYS_utime","","",N,N],[17,"SYS_mknod","","",N,N],[17,"SYS_uselib","","",N,N],[17,"SYS_personality","","",N,N],[17,"SYS_ustat","","",N,N],[17,"SYS_statfs","","",N,N],[17,"SYS_fstatfs","","",N,N],[17,"SYS_sysfs","","",N,N],[17,"SYS_getpriority","","",N,N],[17,"SYS_setpriority","","",N,N],[17,"SYS_sched_setparam","","",N,N],[17,"SYS_sched_getparam","","",N,N],[17,"SYS_sched_setscheduler","","",N,N],[17,"SYS_sched_getscheduler","","",N,N],[17,"SYS_sched_get_priority_max","","",N,N],[17,"SYS_sched_get_priority_min","","",N,N],[17,"SYS_sched_rr_get_interval","","",N,N],[17,"SYS_mlock","","",N,N],[17,"SYS_munlock","","",N,N],[17,"SYS_mlockall","","",N,N],[17,"SYS_munlockall","","",N,N],[17,"SYS_vhangup","","",N,N],[17,"SYS_modify_ldt","","",N,N],[17,"SYS_pivot_root","","",N,N],[17,"SYS__sysctl","","",N,N],[17,"SYS_prctl","","",N,N],[17,"SYS_arch_prctl","","",N,N],[17,"SYS_adjtimex","","",N,N],[17,"SYS_setrlimit","","",N,N],[17,"SYS_chroot","","",N,N],[17,"SYS_sync","","",N,N],[17,"SYS_acct","","",N,N],[17,"SYS_settimeofday","","",N,N],[17,"SYS_mount","","",N,N],[17,"SYS_umount2","","",N,N],[17,"SYS_swapon","","",N,N],[17,"SYS_swapoff","","",N,N],[17,"SYS_reboot","","",N,N],[17,"SYS_sethostname","","",N,N],[17,"SYS_setdomainname","","",N,N],[17,"SYS_iopl","","",N,N],[17,"SYS_ioperm","","",N,N],[17,"SYS_create_module","","",N,N],[17,"SYS_init_module","","",N,N],[17,"SYS_delete_module","","",N,N],[17,"SYS_get_kernel_syms","","",N,N],[17,"SYS_query_module","","",N,N],[17,"SYS_quotactl","","",N,N],[17,"SYS_nfsservctl","","",N,N],[17,"SYS_getpmsg","","",N,N],[17,"SYS_putpmsg","","",N,N],[17,"SYS_afs_syscall","","",N,N],[17,"SYS_tuxcall","","",N,N],[17,"SYS_security","","",N,N],[17,"SYS_gettid","","",N,N],[17,"SYS_readahead","","",N,N],[17,"SYS_setxattr","","",N,N],[17,"SYS_lsetxattr","","",N,N],[17,"SYS_fsetxattr","","",N,N],[17,"SYS_getxattr","","",N,N],[17,"SYS_lgetxattr","","",N,N],[17,"SYS_fgetxattr","","",N,N],[17,"SYS_listxattr","","",N,N],[17,"SYS_llistxattr","","",N,N],[17,"SYS_flistxattr","","",N,N],[17,"SYS_removexattr","","",N,N],[17,"SYS_lremovexattr","","",N,N],[17,"SYS_fremovexattr","","",N,N],[17,"SYS_tkill","","",N,N],[17,"SYS_time","","",N,N],[17,"SYS_futex","","",N,N],[17,"SYS_sched_setaffinity","","",N,N],[17,"SYS_sched_getaffinity","","",N,N],[17,"SYS_set_thread_area","","",N,N],[17,"SYS_io_setup","","",N,N],[17,"SYS_io_destroy","","",N,N],[17,"SYS_io_getevents","","",N,N],[17,"SYS_io_submit","","",N,N],[17,"SYS_io_cancel","","",N,N],[17,"SYS_get_thread_area","","",N,N],[17,"SYS_lookup_dcookie","","",N,N],[17,"SYS_epoll_create","","",N,N],[17,"SYS_epoll_ctl_old","","",N,N],[17,"SYS_epoll_wait_old","","",N,N],[17,"SYS_remap_file_pages","","",N,N],[17,"SYS_getdents64","","",N,N],[17,"SYS_set_tid_address","","",N,N],[17,"SYS_restart_syscall","","",N,N],[17,"SYS_semtimedop","","",N,N],[17,"SYS_fadvise64","","",N,N],[17,"SYS_timer_create","","",N,N],[17,"SYS_timer_settime","","",N,N],[17,"SYS_timer_gettime","","",N,N],[17,"SYS_timer_getoverrun","","",N,N],[17,"SYS_timer_delete","","",N,N],[17,"SYS_clock_settime","","",N,N],[17,"SYS_clock_gettime","","",N,N],[17,"SYS_clock_getres","","",N,N],[17,"SYS_clock_nanosleep","","",N,N],[17,"SYS_exit_group","","",N,N],[17,"SYS_epoll_wait","","",N,N],[17,"SYS_epoll_ctl","","",N,N],[17,"SYS_tgkill","","",N,N],[17,"SYS_utimes","","",N,N],[17,"SYS_vserver","","",N,N],[17,"SYS_mbind","","",N,N],[17,"SYS_set_mempolicy","","",N,N],[17,"SYS_get_mempolicy","","",N,N],[17,"SYS_mq_open","","",N,N],[17,"SYS_mq_unlink","","",N,N],[17,"SYS_mq_timedsend","","",N,N],[17,"SYS_mq_timedreceive","","",N,N],[17,"SYS_mq_notify","","",N,N],[17,"SYS_mq_getsetattr","","",N,N],[17,"SYS_kexec_load","","",N,N],[17,"SYS_waitid","","",N,N],[17,"SYS_add_key","","",N,N],[17,"SYS_request_key","","",N,N],[17,"SYS_keyctl","","",N,N],[17,"SYS_ioprio_set","","",N,N],[17,"SYS_ioprio_get","","",N,N],[17,"SYS_inotify_init","","",N,N],[17,"SYS_inotify_add_watch","","",N,N],[17,"SYS_inotify_rm_watch","","",N,N],[17,"SYS_migrate_pages","","",N,N],[17,"SYS_openat","","",N,N],[17,"SYS_mkdirat","","",N,N],[17,"SYS_mknodat","","",N,N],[17,"SYS_fchownat","","",N,N],[17,"SYS_futimesat","","",N,N],[17,"SYS_newfstatat","","",N,N],[17,"SYS_unlinkat","","",N,N],[17,"SYS_renameat","","",N,N],[17,"SYS_linkat","","",N,N],[17,"SYS_symlinkat","","",N,N],[17,"SYS_readlinkat","","",N,N],[17,"SYS_fchmodat","","",N,N],[17,"SYS_faccessat","","",N,N],[17,"SYS_pselect6","","",N,N],[17,"SYS_ppoll","","",N,N],[17,"SYS_unshare","","",N,N],[17,"SYS_set_robust_list","","",N,N],[17,"SYS_get_robust_list","","",N,N],[17,"SYS_splice","","",N,N],[17,"SYS_tee","","",N,N],[17,"SYS_sync_file_range","","",N,N],[17,"SYS_vmsplice","","",N,N],[17,"SYS_move_pages","","",N,N],[17,"SYS_utimensat","","",N,N],[17,"SYS_epoll_pwait","","",N,N],[17,"SYS_signalfd","","",N,N],[17,"SYS_timerfd_create","","",N,N],[17,"SYS_eventfd","","",N,N],[17,"SYS_fallocate","","",N,N],[17,"SYS_timerfd_settime","","",N,N],[17,"SYS_timerfd_gettime","","",N,N],[17,"SYS_accept4","","",N,N],[17,"SYS_signalfd4","","",N,N],[17,"SYS_eventfd2","","",N,N],[17,"SYS_epoll_create1","","",N,N],[17,"SYS_dup3","","",N,N],[17,"SYS_pipe2","","",N,N],[17,"SYS_inotify_init1","","",N,N],[17,"SYS_preadv","","",N,N],[17,"SYS_pwritev","","",N,N],[17,"SYS_rt_tgsigqueueinfo","","",N,N],[17,"SYS_perf_event_open","","",N,N],[17,"SYS_recvmmsg","","",N,N],[17,"SYS_fanotify_init","","",N,N],[17,"SYS_fanotify_mark","","",N,N],[17,"SYS_prlimit64","","",N,N],[17,"SYS_name_to_handle_at","","",N,N],[17,"SYS_open_by_handle_at","","",N,N],[17,"SYS_clock_adjtime","","",N,N],[17,"SYS_syncfs","","",N,N],[17,"SYS_sendmmsg","","",N,N],[17,"SYS_setns","","",N,N],[17,"SYS_getcpu","","",N,N],[17,"SYS_process_vm_readv","","",N,N],[17,"SYS_process_vm_writev","","",N,N],[17,"SYS_kcmp","","",N,N],[17,"SYS_finit_module","","",N,N],[17,"SYS_sched_setattr","","",N,N],[17,"SYS_sched_getattr","","",N,N],[17,"SYS_renameat2","","",N,N],[17,"SYS_seccomp","","",N,N],[17,"SYS_getrandom","","",N,N],[17,"SYS_memfd_create","","",N,N],[17,"SYS_kexec_file_load","","",N,N],[17,"SYS_bpf","","",N,N],[17,"SYS_execveat","","",N,N],[17,"SYS_userfaultfd","","",N,N],[17,"SYS_membarrier","","",N,N],[17,"SYS_mlock2","","",N,N],[17,"SYS_copy_file_range","","",N,N],[17,"SYS_preadv2","","",N,N],[17,"SYS_pwritev2","","",N,N],[17,"SYS_pkey_mprotect","","",N,N],[17,"SYS_pkey_alloc","","",N,N],[17,"SYS_pkey_free","","",N,N]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"rtentry"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"statvfs"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"fd_set"],[3,"in6_rtmsg"]]};
searchIndex["linked_hash_map"]={"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",N,N],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",N,N],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",N,N],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",N,N],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",N,N],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",N,N],[0,"serde","","An optional implementation of serialization/deserialization. Reference implementations used:",N,N],[3,"LinkedHashMapVisitor","linked_hash_map::serde","`serde::de::Visitor` for a linked hash map.",N,N],[11,"serialize","linked_hash_map","",0,[[["self"],["t"]],["result"]]],[11,"new","linked_hash_map::serde","Creates a new visitor for a linked hash map.",1,[[],["self"]]],[11,"visit_unit","","",1,[[["self"]],["result"]]],[11,"visit_map","","",1,[[["self"],["visitor"]],["result"]]],[11,"deserialize","linked_hash_map","",0,[[["d"]],["result",["linkedhashmap"]]]],[11,"new","","Creates a linked hash map.",0,[[],["self"]]],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",0,[[["usize"]],["self"]]],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",0,[[["s"]],["self"]]],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",0,[[["usize"],["s"]],["self"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",0,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",0,[[["self"]]]],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",0,[[["self"],["k"],["v"]],["option"]]],[11,"contains_key","","Checks if the map contains the given key.",0,[[["self"],["q"]],["bool"]]],[11,"get","","Returns the value corresponding to the key in the map.",0,[[["self"],["q"]],["option"]]],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",0,[[["self"],["q"]],["option"]]],[11,"get_refresh","","Returns the value corresponding to the key in the map.",0,[[["self"],["q"]],["option"]]],[11,"remove","","Removes and returns the value corresponding to the key from the map.",0,[[["self"],["q"]],["option"]]],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",0,[[["self"]],["usize"]]],[11,"pop_front","","Removes the first entry.",0,[[["self"]],["option"]]],[11,"front","","Gets the first entry.",0,[[["self"]],["option"]]],[11,"pop_back","","Removes the last entry.",0,[[["self"]],["option"]]],[11,"back","","Gets the last entry.",0,[[["self"]],["option"]]],[11,"len","","Returns the number of key-value pairs in the map.",0,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the map is currently empty.",0,[[["self"]],["bool"]]],[11,"hasher","","Returns a reference to the map's hasher.",0,[[["self"]],["s"]]],[11,"clear","","Clears the map of all key-value pairs.",0,[[["self"]]]],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",0,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",0,[[["self"]],["itermut"]]],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",0,[[["self"]],["keys"]]],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",0,[[["self"]],["values"]]],[11,"index","","",0,[[["self"],["q"]],["v"]]],[11,"index_mut","","",0,[[["self"],["q"]],["v"]]],[11,"clone","","",0,[[["self"]],["self"]]],[11,"default","","",0,[[],["self"]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"extend","","",0,[[["self"],["i"]]]],[11,"from_iter","","",0,[[["i"]],["self"]]],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"ne","","",0,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["self"]],["bool"]]],[11,"le","","",0,[[["self"],["self"]],["bool"]]],[11,"ge","","",0,[[["self"],["self"]],["bool"]]],[11,"gt","","",0,[[["self"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"drop","","",0,[[["self"]]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"size_hint","","",2,N],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",2,[[["self"]],["option"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"drop","","",3,[[["self"]]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"len","","",5,[[["self"]],["usize"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"len","","",6,[[["self"]],["usize"]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]]],"paths":[[3,"LinkedHashMap"],[3,"LinkedHashMapVisitor"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
searchIndex["lock_api"]={"doc":"This library provides type-safe and fully-featured `Mutex` and `RwLock` types which wrap a simple raw mutex or rwlock type. This has several benefits: not only does it eliminate a large portion of the work in implementing custom lock types, it also allows users to write code which is generic with regards to different lock implementations.","items":[[3,"GuardSend","lock_api","Marker type which indicates that the Guard type for a lock is `Send`.",N,N],[3,"GuardNoSend","","Marker type which indicates that the Guard type for a lock is not `Send`.",N,N],[3,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[3,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[3,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"RwLock","","A reader-writer lock",N,N],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[3,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[3,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[3,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[11,"new","","Creates a new mutex in an unlocked state ready for use.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[["self"]],["t"]]],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,[[["self"]],["mutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",0,[[["self"]],["option",["mutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",0,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",0,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",0,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",0,N],[11,"default","","",0,[[],["mutex"]]],[11,"from","","",0,[[["t"]],["mutex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"mutex","","Returns a reference to the original `Mutex` object.",1,[[["self"]],["mutex"]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",1,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",1,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",1,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",1,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",1,[[["self"]]]],[11,"deref","","",1,[[["self"]],["t"]]],[11,"deref_mut","","",1,[[["self"]],["t"]]],[11,"drop","","",1,[[["self"]]]],[11,"map","","Makes a new `MappedMutexGuard` for a component of the locked data.",2,[[["self"],["f"]],["mappedmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",2,[[["self"],["f"]],["result",["mappedmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",2,[[["self"]]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"new","","Creates a new reentrant mutex in an unlocked state ready for use.",3,[[["t"]],["reentrantmutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",3,[[["self"]],["t"]]],[11,"lock","","Acquires a reentrant mutex, blocking the current thread until it is able to do so.",3,[[["self"]],["reentrantmutexguard"]]],[11,"try_lock","","Attempts to acquire this lock.",3,[[["self"]],["option",["reentrantmutexguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",3,[[["self"]],["t"]]],[11,"force_unlock","","Forcibly unlocks the mutex.",3,[[["self"]]]],[11,"raw","","Returns the underlying raw mutex object.",3,[[["self"]],["r"]]],[11,"force_unlock_fair","","Forcibly unlocks the mutex using a fair unlock procotol.",3,[[["self"]]]],[11,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",3,N],[11,"default","","",3,[[],["reentrantmutex"]]],[11,"from","","",3,[[["t"]],["reentrantmutex"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"remutex","","Returns a reference to the original `ReentrantMutex` object.",4,[[["self"]],["reentrantmutex"]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",4,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",4,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlocked","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",4,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the mutex to execute the given function.",4,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",4,[[["self"]]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"drop","","",4,[[["self"]]]],[11,"map","","Makes a new `MappedReentrantMutexGuard` for a component of the locked data.",5,[[["self"],["f"]],["mappedreentrantmutexguard"]]],[11,"try_map","","Attempts to make  a new `MappedReentrantMutexGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",5,[[["self"],["f"]],["result",["mappedreentrantmutexguard"]]]],[11,"unlock_fair","","Unlocks the mutex using a fair unlock protocol.",5,[[["self"]]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"drop","","",5,[[["self"]]]],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",6,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",6,[[["self"]],["t"]]],[11,"read","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"write","","Locks this `RwLock` with exclusive write access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempts to lock this `RwLock` with exclusive write access.",6,[[["self"]],["option",["rwlockwriteguard"]]]],[11,"get_mut","","Returns a mutable reference to the underlying data.",6,[[["self"]],["t"]]],[11,"force_unlock_read","","Forcibly unlocks a read lock.",6,[[["self"]]]],[11,"force_unlock_write","","Forcibly unlocks a write lock.",6,[[["self"]]]],[11,"raw","","Returns the underlying raw reader-writer lock object.",6,[[["self"]],["r"]]],[11,"force_unlock_read_fair","","Forcibly unlocks a read lock using a fair unlock procotol.",6,[[["self"]]]],[11,"force_unlock_write_fair","","Forcibly unlocks a write lock using a fair unlock procotol.",6,[[["self"]]]],[11,"try_read_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_write_for","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"try_write_until","","Attempts to acquire this `RwLock` with exclusive write access until a timeout is reached.",6,N],[11,"read_recursive","","Locks this `RwLock` with shared read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockreadguard"]]],[11,"try_read_recursive","","Attempts to acquire this `RwLock` with shared read access.",6,[[["self"]],["option",["rwlockreadguard"]]]],[11,"try_read_recursive_for","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"try_read_recursive_until","","Attempts to acquire this `RwLock` with shared read access until a timeout is reached.",6,N],[11,"upgradable_read","","Locks this `RwLock` with upgradable read access, blocking the current thread until it can be acquired.",6,[[["self"]],["rwlockupgradablereadguard"]]],[11,"try_upgradable_read","","Attempts to acquire this `RwLock` with upgradable read access.",6,[[["self"]],["option",["rwlockupgradablereadguard"]]]],[11,"try_upgradable_read_for","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"try_upgradable_read_until","","Attempts to acquire this `RwLock` with upgradable read access until a timeout is reached.",6,N],[11,"default","","",6,[[],["rwlock"]]],[11,"from","","",6,[[["t"]],["rwlock"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",7,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",7,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",7,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",7,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",7,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",7,[[["self"]]]],[11,"deref","","",7,[[["self"]],["t"]]],[11,"drop","","",7,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",8,[[["self"]],["rwlock"]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",8,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",8,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockreadguard"]]],[11,"downgrade_to_upgradable","","Atomically downgrades a write lock into an upgradable read lock without allowing any writers to take exclusive access of the lock in the meantime.",8,[[["self"]],["rwlockupgradablereadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",8,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",8,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",8,[[["self"]]]],[11,"deref","","",8,[[["self"]],["t"]]],[11,"deref_mut","","",8,[[["self"]],["t"]]],[11,"drop","","",8,[[["self"]]]],[11,"rwlock","","Returns a reference to the original reader-writer lock object.",9,[[["self"]],["rwlock"]]],[11,"unlocked","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"upgrade","","Atomically upgrades an upgradable read lock lock into a exclusive write lock, blocking the current thread until it can be aquired.",9,[[["self"]],["rwlockwriteguard"]]],[11,"try_upgrade","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock.",9,[[["self"]],["result",["rwlockwriteguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",9,[[["self"]]]],[11,"unlocked_fair","","Temporarily unlocks the `RwLock` to execute the given function.",9,[[["self"],["f"]],["u"]]],[11,"bump","","Temporarily yields the `RwLock` to a waiting thread if there is one.",9,[[["self"]]]],[11,"downgrade","","Atomically downgrades an upgradable read lock lock into a shared read lock without allowing any writers to take exclusive access of the lock in the meantime.",9,[[["self"]],["rwlockreadguard"]]],[11,"try_upgrade_for","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"try_upgrade_until","","Tries to atomically upgrade an upgradable read lock into a exclusive write lock, until a timeout is reached.",9,N],[11,"deref","","",9,[[["self"]],["t"]]],[11,"drop","","",9,[[["self"]]]],[11,"map","","Make a new `MappedRwLockReadGuard` for a component of the locked data.",10,[[["self"],["f"]],["mappedrwlockreadguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockReadGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",10,[[["self"],["f"]],["result",["mappedrwlockreadguard"]]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",10,[[["self"]]]],[11,"deref","","",10,[[["self"]],["t"]]],[11,"drop","","",10,[[["self"]]]],[11,"map","","Make a new `MappedRwLockWriteGuard` for a component of the locked data.",11,[[["self"],["f"]],["mappedrwlockwriteguard"]]],[11,"try_map","","Attempts to make  a new `MappedRwLockWriteGuard` for a component of the locked data. The original guard is return if the closure returns `None`.",11,[[["self"],["f"]],["result",["mappedrwlockwriteguard"]]]],[11,"downgrade","","Atomically downgrades a write lock into a read lock without allowing any writers to take exclusive access of the lock in the meantime.",11,[[["self"]],["mappedrwlockreadguard"]]],[11,"unlock_fair","","Unlocks the `RwLock` using a fair unlock protocol.",11,[[["self"]]]],[11,"deref","","",11,[[["self"]],["t"]]],[11,"deref_mut","","",11,[[["self"]],["t"]]],[11,"drop","","",11,[[["self"]]]],[8,"RawMutex","","Basic operations for a mutex.",N,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",12,N],[10,"lock","","Acquires this mutex, blocking the current thread until it is able to do so.",12,[[["self"]]]],[10,"try_lock","","Attempts to acquire this mutex without blocking.",12,[[["self"]],["bool"]]],[10,"unlock","","Unlocks this mutex.",12,[[["self"]]]],[8,"RawMutexFair","","Additional methods for mutexes which support fair unlocking.",N,N],[10,"unlock_fair","","Unlocks this mutex using a fair unlock protocol.",13,[[["self"]]]],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[8,"RawMutexTimed","","Additional methods for mutexes which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",14,N],[16,"Instant","","Instant type used for `try_lock_until`.",14,N],[10,"try_lock_for","","Attempts to acquire this lock until a timeout is reached.",14,N],[10,"try_lock_until","","Attempts to acquire this lock until a timeout is reached.",14,N],[8,"GetThreadId","","Helper trait which returns a non-zero thread ID.",N,N],[18,"INIT","","Initial value.",15,N],[10,"nonzero_thread_id","","Returns a non-zero thread ID which identifies the current thread of execution.",15,[[["self"]],["usize"]]],[8,"RawRwLock","","Basic operations for a reader-writer lock.",N,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[16,"GuardMarker","","Marker type which determines whether a lock guard should be `Send`. Use one of the `GuardSend` or `GuardNoSend` helper types here.",16,N],[10,"lock_shared","","Acquires a shared lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_shared","","Attempts to acquire a shared lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_shared","","Releases a shared lock.",16,[[["self"]]]],[10,"lock_exclusive","","Acquires an exclusive lock, blocking the current thread until it is able to do so.",16,[[["self"]]]],[10,"try_lock_exclusive","","Attempts to acquire an exclusive lock without blocking.",16,[[["self"]],["bool"]]],[10,"unlock_exclusive","","Releases an exclusive lock.",16,[[["self"]]]],[8,"RawRwLockFair","","Additional methods for RwLocks which support fair unlocking.",N,N],[10,"unlock_shared_fair","","Releases a shared lock using a fair unlock protocol.",17,[[["self"]]]],[10,"unlock_exclusive_fair","","Releases an exclusive lock using a fair unlock protocol.",17,[[["self"]]]],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[8,"RawRwLockDowngrade","","Additional methods for RwLocks which support atomically downgrading an exclusive lock to a shared lock.",N,N],[10,"downgrade","","Atomically downgrades an exclusive lock into a shared lock without allowing any thread to take an exclusive lock in the meantime.",18,[[["self"]]]],[8,"RawRwLockTimed","","Additional methods for RwLocks which support locking with timeouts.",N,N],[16,"Duration","","Duration type used for `try_lock_for`.",19,N],[16,"Instant","","Instant type used for `try_lock_until`.",19,N],[10,"try_lock_shared_for","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_shared_until","","Attempts to acquire a shared lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_for","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[10,"try_lock_exclusive_until","","Attempts to acquire an exclusive lock until a timeout is reached.",19,N],[8,"RawRwLockRecursive","","Additional methods for RwLocks which support recursive read locks.",N,N],[10,"lock_shared_recursive","","Acquires a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]]]],[10,"try_lock_shared_recursive","","Attempts to acquire a shared lock without deadlocking in case of a recursive lock.",20,[[["self"]],["bool"]]],[8,"RawRwLockRecursiveTimed","","Additional methods for RwLocks which support recursive read locks and timeouts.",N,N],[10,"try_lock_shared_recursive_for","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[10,"try_lock_shared_recursive_until","","Attempts to acquire a shared lock until a timeout is reached, without deadlocking in case of a recursive lock.",21,N],[8,"RawRwLockUpgrade","","Additional methods for RwLocks which support atomically upgrading a shared lock to an exclusive lock.",N,N],[10,"lock_upgradable","","Acquires an upgradable lock, blocking the current thread until it is able to do so.",22,[[["self"]]]],[10,"try_lock_upgradable","","Attempts to acquire an upgradable lock without blocking.",22,[[["self"]],["bool"]]],[10,"unlock_upgradable","","Releases an upgradable lock.",22,[[["self"]]]],[10,"upgrade","","Upgrades an upgradable lock to an exclusive lock.",22,[[["self"]]]],[10,"try_upgrade","","Attempts to upgrade an upgradable lock to an exclusive lock without blocking.",22,[[["self"]],["bool"]]],[8,"RawRwLockUpgradeFair","","Additional methods for RwLocks which support upgradable locks and fair unlocking.",N,N],[10,"unlock_upgradable_fair","","Releases an upgradable lock using a fair unlock protocol.",23,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]],[8,"RawRwLockUpgradeDowngrade","","Additional methods for RwLocks which support upgradable locks and lock downgrading.",N,N],[10,"downgrade_upgradable","","Downgrades an upgradable lock to a shared lock.",24,[[["self"]]]],[10,"downgrade_to_upgradable","","Downgrades an exclusive lock to an upgradable lock.",24,[[["self"]]]],[8,"RawRwLockUpgradeTimed","","Additional methods for RwLocks which support upgradable locks and locking with timeouts.",N,N],[10,"try_lock_upgradable_for","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_lock_upgradable_until","","Attempts to acquire an upgradable lock until a timeout is reached.",25,N],[10,"try_upgrade_for","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[10,"try_upgrade_until","","Attempts to upgrade an upgradable lock to an exclusive lock until a timeout is reached.",25,N],[18,"INIT","","Initial value for an unlocked mutex.",12,N],[11,"bump","","Temporarily yields the mutex to a waiting thread if there is one.",13,[[["self"]]]],[18,"INIT","","Initial value.",15,N],[18,"INIT","","Initial value for an unlocked `RwLock`.",16,N],[11,"bump_shared","","Temporarily yields a shared lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_exclusive","","Temporarily yields an exclusive lock to a waiting thread if there is one.",17,[[["self"]]]],[11,"bump_upgradable","","Temporarily yields an upgradable lock to a waiting thread if there is one.",23,[[["self"]]]]],"paths":[[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutex"],[8,"RawMutexFair"],[8,"RawMutexTimed"],[8,"GetThreadId"],[8,"RawRwLock"],[8,"RawRwLockFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockTimed"],[8,"RawRwLockRecursive"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgrade"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockUpgradeTimed"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has already been called.",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't match any of the log levels.",N,N],[4,"Level","","An enum representing the available verbosity levels of the logger.",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters of the logger.",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with `MetadataBuilder`.",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"hash","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",6,N],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",N,N]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["manager"]={"doc":"","items":[[5,"main","manager","Configures and runs a new scaling manager",N,[[],["result"]]]],"paths":[]};
searchIndex["memchr"]={"doc":"The `memchr` crate provides heavily optimized routines for searching bytes.","items":[[3,"Memchr","memchr","An iterator for `memchr`.",N,N],[3,"Memchr2","","An iterator for `memchr2`.",N,N],[3,"Memchr3","","An iterator for `memchr3`.",N,N],[5,"memchr_iter","","An iterator over all occurrences of the needle in a haystack.",N,N],[5,"memchr2_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memchr3_iter","","An iterator over all occurrences of the needles in a haystack.",N,N],[5,"memrchr_iter","","An iterator over all occurrences of the needle in a haystack, in reverse.",N,N],[5,"memrchr2_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memrchr3_iter","","An iterator over all occurrences of the needles in a haystack, in reverse.",N,N],[5,"memchr","","Search for the first occurrence of a byte in a slice.",N,N],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",N,N],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",N,N],[5,"memrchr","","Search for the last occurrence of a byte in a slice.",N,N],[5,"memrchr2","","Like `memrchr`, but searches for two bytes instead of one.",N,N],[5,"memrchr3","","Like `memrchr`, but searches for three bytes instead of one.",N,N],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,N],[11,"next","","",0,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",0,N],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,N],[11,"next","","",1,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",1,N],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"new","","Create a new `Memchr3` that's initialized to zero with a haystack",2,N],[11,"next","","",2,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",2,N],[11,"next_back","","",2,[[["self"]],["option"]]]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["mio"]={"doc":"A fast, low-level IO library for Rust focusing on non-blocking APIs, event notification, and other useful utilities for building high performance IO apps.","items":[[3,"Poll","mio","Polls for readiness events on all registered values.",N,N],[3,"Registration","","Handle to a user space `Poll` registration.",N,N],[3,"SetReadiness","","Updates the readiness state of the associated `Registration`.",N,N],[3,"PollOpt","","Options supplied when registering an `Evented` handle with `Poll`",N,N],[3,"Ready","","A set of readiness event kinds",N,N],[3,"Token","","Associates readiness notifications with [`Evented`] handles.",N,N],[12,"0","","",0,N],[3,"Events","","A collection of readiness events.",N,N],[11,"eq","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ne","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"clone","","",1,[[["self"]],["pollopt"]]],[11,"partial_cmp","","",1,[[["self"],["pollopt"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"le","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"gt","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"ge","","",1,[[["self"],["pollopt"]],["bool"]]],[11,"cmp","","",1,[[["self"],["pollopt"]],["ordering"]]],[11,"empty","","Return a `PollOpt` representing no set options.",1,[[],["pollopt"]]],[11,"edge","","Return a `PollOpt` representing edge-triggered notifications.",1,[[],["pollopt"]]],[11,"level","","Return a `PollOpt` representing level-triggered notifications.",1,[[],["pollopt"]]],[11,"oneshot","","Return a `PollOpt` representing oneshot notifications.",1,[[],["pollopt"]]],[11,"is_edge","","Returns true if the options include edge-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_level","","Returns true if the options include level-triggered notifications.",1,[[["self"]],["bool"]]],[11,"is_oneshot","","Returns true if the options includes oneshot.",1,[[["self"]],["bool"]]],[11,"contains","","Returns true if `self` is a superset of `other`.",1,[[["self"],["pollopt"]],["bool"]]],[11,"insert","","Adds all options represented by `other` into `self`.",1,[[["self"],["pollopt"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",1,[[["self"],["pollopt"]]]],[11,"bitor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitxor","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"bitand","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"sub","","",1,[[["self"],["pollopt"]],["pollopt"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["ready"]],["bool"]]],[11,"ne","","",2,[[["self"],["ready"]],["bool"]]],[11,"clone","","",2,[[["self"]],["ready"]]],[11,"partial_cmp","","",2,[[["self"],["ready"]],["option",["ordering"]]]],[11,"lt","","",2,[[["self"],["ready"]],["bool"]]],[11,"le","","",2,[[["self"],["ready"]],["bool"]]],[11,"gt","","",2,[[["self"],["ready"]],["bool"]]],[11,"ge","","",2,[[["self"],["ready"]],["bool"]]],[11,"cmp","","",2,[[["self"],["ready"]],["ordering"]]],[11,"empty","","Returns the empty `Ready` set.",2,[[],["ready"]]],[11,"readable","","Returns a `Ready` representing readable readiness.",2,[[],["ready"]]],[11,"writable","","Returns a `Ready` representing writable readiness.",2,[[],["ready"]]],[11,"all","","Returns a `Ready` representing readiness for all operations.",2,[[],["ready"]]],[11,"is_empty","","Returns true if `Ready` is the empty set",2,[[["self"]],["bool"]]],[11,"is_readable","","Returns true if the value includes readable readiness",2,[[["self"]],["bool"]]],[11,"is_writable","","Returns true if the value includes writable readiness",2,[[["self"]],["bool"]]],[11,"insert","","Adds all readiness represented by `other` into `self`.",2,[[["self"],["t"]]]],[11,"remove","","Removes all options represented by `other` from `self`.",2,[[["self"],["t"]]]],[11,"contains","","Returns true if `self` is a superset of `other`.",2,[[["self"],["t"]],["bool"]]],[11,"from_usize","","Create a `Ready` instance using the given `usize` representation.",2,[[["usize"]],["ready"]]],[11,"as_usize","","Returns a `usize` representation of the `Ready` value.",2,[[["self"]],["usize"]]],[11,"bitor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitor_assign","","",2,[[["self"],["t"]]]],[11,"bitxor","","",2,[[["self"],["t"]],["ready"]]],[11,"bitxor_assign","","",2,[[["self"],["t"]]]],[11,"bitand","","",2,[[["self"],["t"]],["ready"]]],[11,"bitand_assign","","",2,[[["self"],["t"]]]],[11,"sub","","",2,[[["self"],["t"]],["ready"]]],[11,"sub_assign","","",2,[[["self"],["t"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["setreadiness"]]],[11,"new","","Return a new `Poll` handle.",4,[[],["result",["poll"]]]],[11,"register","","Register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","Re-register an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","Deregister an `Evented` handle with the `Poll` instance.",4,[[["self"],["e"]],["result"]]],[11,"poll","","Wait for readiness events",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"poll_interruptible","","Like `poll`, but may be interrupted by a signal",4,[[["self"],["events"],["option",["duration"]]],["result",["usize"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"as_raw_fd","","",4,[[["self"]],["rawfd"]]],[11,"with_capacity","","Return a new `Events` capable of holding up to `capacity` events.",5,[[["usize"]],["events"]]],[11,"capacity","","Returns the number of `Event` values that `self` can hold.",5,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if `self` contains no `Event` values.",5,[[["self"]],["bool"]]],[11,"iter","","Returns an iterator over the `Event` values.",5,[[["self"]],["iter"]]],[11,"clear","","Clearing all `Event` values from container explicitly.",5,[[["self"]]]],[11,"into_iter","","",5,N],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new2","","Create and return a new `Registration` and the associated `SetReadiness`.",6,N],[11,"register","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",6,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",6,[[["self"],["poll"]],["result"]]],[11,"drop","","",6,[[["self"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"readiness","","Returns the registration's current readiness.",3,[[["self"]],["ready"]]],[11,"set_readiness","","Set the registration's readiness",3,[[["self"],["ready"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"from","","",2,[[["unixready"]],["ready"]]],[11,"clone","","",0,[[["self"]],["token"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["token"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["token"]],["bool"]]],[11,"le","","",0,[[["self"],["token"]],["bool"]]],[11,"gt","","",0,[[["self"],["token"]],["bool"]]],[11,"ge","","",0,[[["self"],["token"]],["bool"]]],[11,"cmp","","",0,[[["self"],["token"]],["ordering"]]],[11,"hash","","",0,N],[11,"from","","",0,[[["usize"]],["token"]]],[0,"net","","Networking primitives",N,N],[3,"TcpListener","mio::net","A structure representing a socket server",N,N],[3,"TcpStream","","A non-blocking TCP stream between a local socket and a remote socket.",N,N],[3,"UdpSocket","","A User Datagram Protocol socket.",N,N],[11,"connect","","Create a new TCP stream and issue a non-blocking connect to the specified address.",7,[[["socketaddr"]],["result",["tcpstream"]]]],[11,"connect_stream","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpBuilder`, connecting it to the address specified.",7,[[["tcpstream"],["socketaddr"]],["result",["tcpstream"]]]],[11,"from_stream","","Creates a new `TcpStream` from a standard `net::TcpStream`.",7,[[["tcpstream"]],["result",["tcpstream"]]]],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",7,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",7,[[["self"]],["result",["tcpstream"]]]],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",7,[[["self"],["shutdown"]],["result"]]],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"],["usize"]],["result"]]],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",7,[[["self"]],["result",["usize"]]]],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",7,[[["self"]],["result",["option"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",7,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",7,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",7,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",7,[[["self"]],["result",["bool"]]]],[11,"set_linger","","Sets the value for the `SO_LINGER` option on this socket.",7,[[["self"],["option",["duration"]]],["result"]]],[11,"linger","","Gets the value of the `SO_LINGER` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",7,[[["self"]],["result",["option"]]]],[11,"peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",7,N],[11,"read_bufs","","Read in a list of buffers all at once.",7,N],[11,"write_bufs","","Write a list of buffers all at once.",7,N],[11,"read","","",7,N],[11,"write","","",7,N],[11,"flush","","",7,[[["self"]],["result"]]],[11,"register","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",7,[[["self"],["poll"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"bind","","Convenience method to bind a new TCP listener to the specified address to receive new connections.",8,[[["socketaddr"]],["result",["tcplistener"]]]],[11,"from_std","","Creates a new `TcpListener` from an instance of a `std::net::TcpListener` type.",8,[[["tcplistener"]],["result",["tcplistener"]]]],[11,"accept","","Accepts a new `TcpStream`.",8,[[["self"]],["result"]]],[11,"accept_std","","Accepts a new `std::net::TcpStream`.",8,[[["self"]],["result"]]],[11,"local_addr","","Returns the local socket address of this listener.",8,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",8,[[["self"]],["result",["tcplistener"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",8,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",8,[[["self"]],["result",["u32"]]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",8,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",8,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",8,[[["self"]],["result",["option"]]]],[11,"register","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",8,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",8,[[["self"],["poll"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",7,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",7,[[["rawfd"]],["tcpstream"]]],[11,"into_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",8,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",8,[[["rawfd"]],["tcplistener"]]],[11,"bind","","Creates a UDP socket from the given address.",9,[[["socketaddr"]],["result",["udpsocket"]]]],[11,"from_socket","","Creates a new mio-wrapped socket from an underlying and bound std socket.",9,[[["udpsocket"]],["result",["udpsocket"]]]],[11,"local_addr","","Returns the socket address that this socket was created from.",9,[[["self"]],["result",["socketaddr"]]]],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",9,[[["self"]],["result",["udpsocket"]]]],[11,"send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",9,N],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"send","","Sends data on the socket to the address previously bound via connect(). On success, returns the number of bytes written.",9,N],[11,"recv","","Receives data from the socket previously bound with connect(). On success, returns the number of bytes read and the address from whence the data came.",9,N],[11,"connect","","Connects the UDP socket setting the default destination for `send()` and limiting packets that are read via `recv` from the address specified in `addr`.",9,[[["self"],["socketaddr"]],["result"]]],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"],["u32"]],["result"]]],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"],["bool"]],["result"]]],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",9,[[["self"],["u32"]],["result"]]],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",9,[[["self"]],["result",["u32"]]]],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",9,[[["self"],["ipv6addr"],["u32"]],["result"]]],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",9,[[["self"],["bool"]],["result"]]],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",9,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",9,[[["self"]],["result",["option"]]]],[11,"register","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",9,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",9,[[["self"],["poll"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"as_raw_fd","","",9,[[["self"]],["rawfd"]]],[11,"from_raw_fd","","",9,[[["rawfd"]],["udpsocket"]]],[0,"event","mio","Readiness event types and utilities.",N,N],[3,"Events","mio::event","A collection of readiness events.",N,N],[3,"Iter","","[`Events`] iterator.",N,N],[3,"Event","","An readiness event returned by [`Poll::poll`].",N,N],[8,"Evented","","A value that may be registered with `Poll`",N,N],[10,"register","","Register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"reregister","","Re-register `self` with the given `Poll` instance.",10,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[10,"deregister","","Deregister `self` from the given `Poll` instance",10,[[["self"],["poll"]],["result"]]],[0,"unix","mio","Unix only extensions",N,N],[3,"EventedFd","mio::unix","Adapter for `RawFd` providing an [`Evented`] implementation.",N,N],[12,"0","","",11,N],[3,"UnixReady","","Unix specific extensions to `Ready`",N,N],[11,"clone","mio::event","",12,[[["self"]],["event"]]],[11,"eq","","",12,[[["self"],["event"]],["bool"]]],[11,"ne","","",12,[[["self"],["event"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `Event` containing `readiness` and `token`",12,[[["ready"],["token"]],["event"]]],[11,"readiness","","Returns the event's readiness.",12,[[["self"]],["ready"]]],[11,"token","","Returns the event's token.",12,[[["self"]],["token"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["iter"]]],[11,"next","","",13,[[["self"]],["option",["event"]]]],[11,"fmt","mio::unix","",11,[[["self"],["formatter"]],["result"]]],[11,"register","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",11,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",11,[[["self"],["poll"]],["result"]]],[11,"eq","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ne","","",14,[[["self"],["unixready"]],["bool"]]],[11,"clone","","",14,[[["self"]],["unixready"]]],[11,"partial_cmp","","",14,[[["self"],["unixready"]],["option",["ordering"]]]],[11,"lt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"le","","",14,[[["self"],["unixready"]],["bool"]]],[11,"gt","","",14,[[["self"],["unixready"]],["bool"]]],[11,"ge","","",14,[[["self"],["unixready"]],["bool"]]],[11,"cmp","","",14,[[["self"],["unixready"]],["ordering"]]],[11,"error","","Returns a `Ready` representing error readiness.",14,[[],["unixready"]]],[11,"hup","","Returns a `Ready` representing HUP readiness.",14,[[],["unixready"]]],[11,"priority","","Returns a `Ready` representing priority (`EPOLLPRI`) readiness",14,[[],["unixready"]]],[11,"is_error","","Returns true if the value includes error readiness",14,[[["self"]],["bool"]]],[11,"is_hup","","Returns true if the value includes HUP readiness",14,[[["self"]],["bool"]]],[11,"is_priority","","Returns true if `Ready` contains priority (`EPOLLPRI`) readiness",14,[[["self"]],["bool"]]],[11,"from","","",14,[[["ready"]],["unixready"]]],[11,"deref","","",14,[[["self"]],["ready"]]],[11,"deref_mut","","",14,[[["self"]],["ready"]]],[11,"bitor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitxor","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"bitand","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"sub","","",14,[[["self"],["unixready"]],["unixready"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Token"],[3,"PollOpt"],[3,"Ready"],[3,"SetReadiness"],[3,"Poll"],[3,"Events"],[3,"Registration"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[8,"Evented"],[3,"EventedFd"],[3,"Event"],[3,"Iter"],[3,"UnixReady"]]};
searchIndex["mio_extras"]={"doc":"Extra components for use with Mio.","items":[[0,"channel","mio_extras","Thread safe communication channel implementing `Evented`",N,N],[3,"Sender","mio_extras::channel","The sending half of a channel.",N,N],[3,"SyncSender","","The sending half of a synchronous channel.",N,N],[3,"Receiver","","The receiving half of a channel.",N,N],[4,"SendError","","An error returned from the `Sender::send` or `SyncSender::send` function.",N,N],[13,"Io","","An IO error.",0,N],[13,"Disconnected","","The receiving half of the channel has disconnected.",0,N],[4,"TrySendError","","An error returned from the `SyncSender::try_send` function.",N,N],[13,"Io","","An IO error.",1,N],[13,"Full","","Data could not be sent because it would require the callee to block.",1,N],[13,"Disconnected","","The receiving half of the channel has disconnected.",1,N],[5,"channel","","Creates a new asynchronous channel, where the `Receiver` can be registered with `Poll`.",N,N],[5,"sync_channel","","Creates a new synchronous, bounded channel where the `Receiver` can be registered with `Poll`.",N,N],[11,"send","","Attempts to send a value on this channel, returning it back if it could not be sent.",2,[[["self"],["t"]],["result",["senderror"]]]],[11,"clone","","",2,[[["self"]],["sender"]]],[11,"send","","Sends a value on this synchronous channel.",3,[[["self"],["t"]],["result",["senderror"]]]],[11,"try_send","","Attempts to send a value on this channel without blocking.",3,[[["self"],["t"]],["result",["trysenderror"]]]],[11,"clone","","",3,[[["self"]],["syncsender"]]],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking.",4,[[["self"]],["result",["tryrecverror"]]]],[11,"register","","",4,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",4,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",4,[[["self"],["poll"]],["result"]]],[11,"from","","",0,[[["senderror"]],["senderror"]]],[11,"from","","",0,[[["error"]],["senderror"]]],[11,"from","","",1,[[["trysenderror"]],["trysenderror"]]],[11,"from","","",1,[[["senderror"]],["trysenderror"]]],[11,"from","","",1,[[["error"]],["trysenderror"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[0,"timer","mio_extras","Timer optimized for I/O related operations",N,N],[3,"Timer","mio_extras::timer","A timer.",N,N],[3,"Builder","","Used to create a `Timer`.",N,N],[3,"Timeout","","A timeout, as returned by `Timer::set_timeout`.",N,N],[11,"clone","","",5,[[["self"]],["timeout"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"tick_duration","","Set the tick duration.  Default is 100ms.",6,[[["self"],["duration"]],["builder"]]],[11,"num_slots","","Set the number of slots.  Default is 256.",6,[[["self"],["usize"]],["builder"]]],[11,"capacity","","Set the capacity.  Default is 65536.",6,[[["self"],["usize"]],["builder"]]],[11,"build","","Build a `Timer` with the parameters set on this `Builder`.",6,[[["self"]],["timer"]]],[11,"default","","",6,[[],["builder"]]],[11,"set_timeout","","Set a timeout.",7,[[["self"],["duration"],["t"]],["timeout"]]],[11,"cancel_timeout","","Cancel a timeout.",7,[[["self"],["timeout"]],["option"]]],[11,"poll","","Poll for an expired timer.",7,[[["self"]],["option"]]],[11,"default","","",7,[[],["timer"]]],[11,"register","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"reregister","","",7,[[["self"],["poll"],["token"],["ready"],["pollopt"]],["result"]]],[11,"deregister","","",7,[[["self"],["poll"]],["result"]]]],"paths":[[4,"SendError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Timeout"],[3,"Builder"],[3,"Timer"]]};
searchIndex["net2"]={"doc":"Extensions to `std::net` networking types.","items":[[3,"TcpBuilder","net2","An \"in progress\" TCP socket which has not yet been connected or listened.",N,N],[3,"UdpBuilder","","An \"in progress\" UDP socket which has not yet been connected.",N,N],[11,"new_v4","","Constructs a new TcpBuilder with the `AF_INET` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"new_v6","","Constructs a new TcpBuilder with the `AF_INET6` domain, the `SOCK_STREAM` type, and with a protocol argument of 0.",0,[[],["result",["tcpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpbuilder"]]]],[11,"listen","","Mark a socket as ready to accept incoming connection requests using accept()",0,[[["self"],["i32"]],["result",["tcplistener"]]]],[11,"connect","","Initiate a connection on this socket to the specified address.",0,[[["self"],["t"]],["result",["tcpstream"]]]],[11,"to_tcp_stream","","Converts this builder into a `TcpStream`",0,[[["self"]],["result",["tcpstream"]]]],[11,"to_tcp_listener","","Converts this builder into a `TcpListener`",0,[[["self"]],["result",["tcplistener"]]]],[11,"local_addr","","Returns the address of the local half of this TCP socket.",0,[[["self"]],["result",["socketaddr"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new_v4","","Constructs a new UdpBuilder with the `AF_INET` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"new_v6","","Constructs a new UdpBuilder with the `AF_INET6` domain, the `SOCK_DGRAM` type, and with a protocol argument of 0.",1,[[],["result",["udpbuilder"]]]],[11,"bind","","Binds this socket to the specified address.",1,[[["self"],["t"]],["result",["udpsocket"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",0,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",0,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",0,[[["self"]],["result",["option"]]]],[11,"ttl","","Sets the value for the `IP_TTL` option on this socket.",1,[[["self"],["u32"]],["result"]]],[11,"only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"reuse_address","","Set value for the `SO_REUSEADDR` option on this socket.",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_address","","Check the `SO_REUSEADDR` option on this socket.",1,[[["self"]],["result",["bool"]]]],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",1,[[["self"]],["result",["option"]]]],[11,"from_raw_fd","","",0,[[["c_int"]],["tcpbuilder"]]],[11,"as_raw_fd","","",0,[[["self"]],["c_int"]]],[11,"from_raw_fd","","",1,[[["c_int"]],["udpbuilder"]]],[11,"as_raw_fd","","",1,[[["self"]],["c_int"]]],[0,"unix","","Unix-specific extensions to the `std::net` types.",N,N],[8,"UnixTcpBuilderExt","net2::unix","Unix-specific extensions for the `TcpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",2,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",2,[[["self"]],["result",["bool"]]]],[8,"UnixUdpBuilderExt","","Unix-specific extensions for the `UdpBuilder` type in this library.",N,N],[10,"reuse_port","","Set value for the `SO_REUSEPORT` option on this socket.",3,[[["self"],["bool"]],["result"]]],[10,"get_reuse_port","","Check the value of the `SO_REUSEPORT` option on this socket.",3,[[["self"]],["result",["bool"]]]],[11,"reuse_port","net2","",0,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",0,[[["self"]],["result",["bool"]]]],[11,"reuse_port","","",1,[[["self"],["bool"]],["result"]]],[11,"get_reuse_port","","",1,[[["self"]],["result",["bool"]]]],[8,"TcpStreamExt","","Extension methods for the standard [`TcpStream` type][link] in `std::net`.",N,N],[10,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",4,[[["self"]],["result",["bool"]]]],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",4,[[["self"]],["result",["usize"]]]],[10,"set_keepalive_ms","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"keepalive_ms","","Returns whether keepalive messages are enabled on this socket, and if so the amount of milliseconds between them.",4,[[["self"]],["result",["option"]]]],[10,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",4,[[["self"]],["result",["option"]]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",4,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",4,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",4,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",4,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",4,[[["self"]],["result",["bool"]]]],[10,"connect","","Executes a `connect` operation on this socket, establishing a connection to the host specified by `addr`.",4,[[["self"],["t"]],["result"]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",4,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",4,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",4,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",4,[[["self"]],["result",["option"]]]],[8,"TcpListenerExt","","Extension methods for the standard [`TcpListener` type][link] in `std::net`.",N,N],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",5,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",5,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",5,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",5,[[["self"]],["result",["bool"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",5,[[["self"]],["result",["option"]]]],[10,"set_nonblocking","","Moves this TCP listener into or out of nonblocking mode.",5,[[["self"],["bool"]],["result"]]],[10,"set_linger","","Sets the linger duration of this socket by setting the SO_LINGER option",5,[[["self"],["option",["duration"]]],["result"]]],[10,"linger","","reads the linger duration for this socket by getting the SO_LINGER option",5,[[["self"]],["result",["option"]]]],[8,"UdpSocketExt","","Extension methods for the standard [`UdpSocket` type][link] in `std::net`.",N,N],[10,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"],["usize"]],["result"]]],[10,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",6,[[["self"]],["result",["usize"]]]],[10,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_hops_v6","","Sets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"],["u32"]],["result"]]],[10,"multicast_hops_v6","","Gets the value of the `IPV6_MULTICAST_HOPS` option for this socket",6,[[["self"]],["result",["u32"]]]],[10,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"],["bool"]],["result"]]],[10,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"set_multicast_if_v4","","Sets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"],["ipv4addr"]],["result"]]],[10,"multicast_if_v4","","Gets the value of the `IP_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["ipv4addr"]]]],[10,"set_multicast_if_v6","","Sets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"],["u32"]],["result"]]],[10,"multicast_if_v6","","Gets the value of the `IPV6_MULTICAST_IF` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"ttl","","Gets the value of the `IP_TTL` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_unicast_hops_v6","","Sets the value for the `IPV6_UNICAST_HOPS` option on this socket.",6,[[["self"],["u32"]],["result"]]],[10,"unicast_hops_v6","","Gets the value of the `IPV6_UNICAST_HOPS` option for this socket.",6,[[["self"]],["result",["u32"]]]],[10,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",6,[[["self"],["bool"]],["result"]]],[10,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",6,[[["self"]],["result",["bool"]]]],[10,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv4addr"],["ipv4addr"]],["result"]]],[10,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",6,[[["self"],["ipv6addr"],["u32"]],["result"]]],[10,"set_read_timeout_ms","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_read_timeout","","Sets the `SO_RCVTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"read_timeout_ms","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"read_timeout","","Gets the value of the `SO_RCVTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"set_write_timeout_ms","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["u32"]]],["result"]]],[10,"set_write_timeout","","Sets the `SO_SNDTIMEO` option for this socket.",6,[[["self"],["option",["duration"]]],["result"]]],[10,"write_timeout_ms","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"write_timeout","","Gets the value of the `SO_SNDTIMEO` option for this socket.",6,[[["self"]],["result",["option"]]]],[10,"take_error","","Get the value of the `SO_ERROR` option on this socket.",6,[[["self"]],["result",["option"]]]],[10,"connect","","Connects this UDP socket to a remote address, allowing the `send` and `recv` syscalls to be used to send data and also applies filters to only receive data from the specified address.",6,[[["self"],["a"]],["result"]]],[10,"send","","Sends data on the socket to the remote address to which it is connected.",6,N],[10,"recv","","Receives data on the socket from the remote address to which it is connected.",6,N],[10,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",6,[[["self"],["bool"]],["result"]]]],"paths":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UdpSocketExt"]]};
searchIndex["nom"]={"doc":"nom, eating data byte by byte","items":[[4,"CompareResult","nom","indicates wether a comparison was successful, an error, or if more data was needed",N,N],[13,"Ok","","",0,N],[13,"Incomplete","","",0,N],[13,"Error","","",0,N],[4,"ErrorKind","","indicates which parser returned an error",N,N],[13,"Custom","","",1,N],[13,"Tag","","",1,N],[13,"MapRes","","",1,N],[13,"MapOpt","","",1,N],[13,"Alt","","",1,N],[13,"IsNot","","",1,N],[13,"IsA","","",1,N],[13,"SeparatedList","","",1,N],[13,"SeparatedNonEmptyList","","",1,N],[13,"Many0","","",1,N],[13,"Many1","","",1,N],[13,"ManyTill","","",1,N],[13,"Count","","",1,N],[13,"TakeUntilAndConsume","","",1,N],[13,"TakeUntil","","",1,N],[13,"TakeUntilEitherAndConsume","","",1,N],[13,"TakeUntilEither","","",1,N],[13,"LengthValue","","",1,N],[13,"TagClosure","","",1,N],[13,"Alpha","","",1,N],[13,"Digit","","",1,N],[13,"HexDigit","","",1,N],[13,"OctDigit","","",1,N],[13,"AlphaNumeric","","",1,N],[13,"Space","","",1,N],[13,"MultiSpace","","",1,N],[13,"LengthValueFn","","",1,N],[13,"Eof","","",1,N],[13,"ExprOpt","","",1,N],[13,"ExprRes","","",1,N],[13,"CondReduce","","",1,N],[13,"Switch","","",1,N],[13,"TagBits","","",1,N],[13,"OneOf","","",1,N],[13,"NoneOf","","",1,N],[13,"Char","","",1,N],[13,"CrLf","","",1,N],[13,"RegexpMatch","","",1,N],[13,"RegexpMatches","","",1,N],[13,"RegexpFind","","",1,N],[13,"RegexpCapture","","",1,N],[13,"RegexpCaptures","","",1,N],[13,"TakeWhile1","","",1,N],[13,"Complete","","",1,N],[13,"Fix","","",1,N],[13,"Escaped","","",1,N],[13,"EscapedTransform","","",1,N],[13,"TagStr","","",1,N],[13,"IsNotStr","","",1,N],[13,"IsAStr","","",1,N],[13,"TakeWhile1Str","","",1,N],[13,"NonEmpty","","",1,N],[13,"ManyMN","","",1,N],[13,"TakeUntilAndConsumeStr","","",1,N],[13,"TakeUntilStr","","",1,N],[13,"Not","","",1,N],[13,"Permutation","","",1,N],[13,"Verify","","",1,N],[13,"TakeTill1","","",1,N],[13,"TakeUntilAndConsume1","","",1,N],[13,"TakeWhileMN","","",1,N],[13,"ParseTo","","",1,N],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",N,N],[13,"Unknown","","needs more data, but we do not know how much",2,N],[13,"Size","","contains the required data size",2,N],[4,"Err","","The `Err` enum indicates the parser was not successful",N,N],[13,"Incomplete","","There was not enough data",3,N],[13,"Error","","The parser had an error (recoverable)",3,N],[13,"Failure","","The parser had an unrecoverable error: we got to the right branch and we know other branches won't work, so backtrack as fast as possible",3,N],[4,"Endianness","","Configurable endianness",N,N],[13,"Big","","",4,N],[13,"Little","","",4,N],[5,"need_more","","",N,[[["i"],["needed"]],["iresult"]]],[5,"need_more_err","","",N,[[["i"],["needed"],["errorkind"]],["iresult"]]],[5,"slice_to_offsets","","",N,N],[5,"code_from_offset","","",N,N],[5,"reset_color","","",N,[[["vec"]]]],[5,"write_color","","",N,[[["vec"],["u8"]]]],[5,"print_codes","","",N,[[["hashmap"],["hashmap"]],["string"]]],[5,"error_to_u32","","",N,[[["errorkind"]],["u32"]]],[5,"newline","","Matches a newline character '\\n'",N,N],[5,"tab","","Matches a tab character '\\t'",N,N],[5,"anychar","","matches one byte as a character. Note that the input type will accept a `str`, but not a `&[u8]`, unlike many other nom parsers.",N,[[["t"]],["iresult",["char"]]]],[5,"tag_cl","","",N,N],[5,"print","","",N,[[["t"]],["iresult"]]],[5,"begin","","",N,N],[5,"crlf","","",N,[[["t"]],["iresult"]]],[5,"not_line_ending","","",N,[[["t"]],["iresult"]]],[5,"line_ending","","Recognizes an end of line (both '\\n' and '\\r\\n')",N,[[["t"]],["iresult"]]],[5,"eol","","",N,[[["t"]],["iresult"]]],[5,"is_alphabetic","","Tests if byte is ASCII alphabetic: A-Z, a-z",N,[[["u8"]],["bool"]]],[5,"is_digit","","Tests if byte is ASCII digit: 0-9",N,[[["u8"]],["bool"]]],[5,"is_hex_digit","","Tests if byte is ASCII hex digit: 0-9, A-F, a-f",N,[[["u8"]],["bool"]]],[5,"is_oct_digit","","Tests if byte is ASCII octal digit: 0-7",N,[[["u8"]],["bool"]]],[5,"is_alphanumeric","","Tests if byte is ASCII alphanumeric: A-Z, a-z, 0-9",N,[[["u8"]],["bool"]]],[5,"is_space","","Tests if byte is ASCII space or tab",N,[[["u8"]],["bool"]]],[5,"alpha","","Recognizes one or more lowercase and uppercase alphabetic characters. For ASCII strings: a-zA-Z For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)",N,[[["t"]],["iresult",["u32"]]]],[5,"alpha0","","Recognizes zero or more lowercase and uppercase alphabetic characters. For ASCII strings: a-zA-Z For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)",N,[[["t"]],["iresult",["u32"]]]],[5,"alpha1","","Recognizes one or more lowercase and uppercase alphabetic characters For ASCII strings: a-zA-Z For UTF8 strings, any alphabetic code point (ie, not only the ASCII ones)",N,[[["t"]],["iresult",["u32"]]]],[5,"digit","","Recognizes one or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"digit0","","Recognizes zero or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"digit1","","Recognizes one or more numerical characters: 0-9",N,[[["t"]],["iresult"]]],[5,"hex_digit","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"hex_digit0","","Recognizes zero or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"hex_digit1","","Recognizes one or more hexadecimal numerical characters: 0-9, A-F, a-f",N,[[["t"]],["iresult"]]],[5,"oct_digit","","Recognizes one or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"oct_digit0","","Recognizes zero or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"oct_digit1","","Recognizes one or more octal characters: 0-7",N,[[["t"]],["iresult"]]],[5,"alphanumeric","","Recognizes one or more numerical and alphabetic characters For ASCII strings: 0-9a-zA-Z For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)",N,[[["t"]],["iresult"]]],[5,"alphanumeric0","","Recognizes zero or more numerical and alphabetic characters. For ASCII strings: 0-9a-zA-Z For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)",N,[[["t"]],["iresult"]]],[5,"alphanumeric1","","Recognizes one or more numerical and alphabetic characters. For ASCII strings: 0-9a-zA-Z For UTF8 strings, 0-9 and any alphabetic code point (ie, not only the ASCII ones)",N,[[["t"]],["iresult"]]],[5,"space","","Recognizes one or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"space0","","Recognizes zero or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"space1","","Recognizes one or more spaces and tabs",N,[[["t"]],["iresult"]]],[5,"multispace","","Recognizes one or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"multispace0","","Recognizes zero or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"multispace1","","Recognizes one or more spaces, tabs, carriage returns and line feeds",N,[[["t"]],["iresult"]]],[5,"sized_buffer","","",N,N],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",N,N],[5,"be_u24","","Recognizes big endian unsigned 3 byte integer",N,N],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",N,N],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",N,N],[5,"be_u128","","Recognizes big endian unsigned 16 bytes integer",N,N],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",N,N],[5,"be_i24","","Recognizes big endian signed 3 bytes integer",N,N],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",N,N],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",N,N],[5,"be_i128","","Recognizes big endian signed 16 bytes integer",N,N],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",N,N],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",N,N],[5,"le_u24","","Recognizes little endian unsigned 3 byte integer",N,N],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",N,N],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",N,N],[5,"le_u128","","Recognizes little endian unsigned 16 bytes integer",N,N],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",N,N],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",N,N],[5,"le_i24","","Recognizes little endian signed 3 bytes integer",N,N],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",N,N],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",N,N],[5,"le_i128","","Recognizes little endian signed 16 bytes integer",N,N],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",N,N],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",N,N],[5,"le_f32","","Recognizes little endian 4 bytes floating point number",N,N],[5,"le_f64","","Recognizes little endian 8 bytes floating point number",N,N],[5,"hex_u32","","Recognizes a hex-encoded integer",N,N],[5,"non_empty","","Recognizes non empty buffers",N,[[["t"]],["iresult"]]],[5,"rest","","Return the remaining input.",N,[[["t"]],["iresult"]]],[5,"rest_len","","Return the length of the remaining input.",N,[[["t"]],["iresult",["usize"]]]],[5,"rest_s","","Return the remaining input, for strings.",N,[[["str"]],["iresult",["str","str"]]]],[5,"recognize_float","","",N,[[["t"]],["iresult",["u32"]]]],[5,"float","","Recognizes floating point number in a byte string and returns a f32",N,[[["t"]],["iresult",["f32","u32"]]]],[5,"float_s","","Recognizes floating point number in a string and returns a f32",N,[[["t"]],["iresult",["f32","u32"]]]],[5,"double","","Recognizes floating point number in a byte string and returns a f64",N,[[["t"]],["iresult",["f64","u32"]]]],[5,"double_s","","Recognizes floating point number in a string and returns a f64",N,[[["t"]],["iresult",["f64","u32"]]]],[0,"lib","","Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does it, albeit there it is not public.",N,N],[0,"std","nom::lib","",N,N],[0,"boxed","nom::lib::std","A pointer type for heap allocation.",N,N],[3,"Box","nom::lib::std::boxed","A pointer type for heap allocation.",N,N],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed closure objects. The idea is that where one would normally store a `Box<FnOnce()>` in a data structure, you should use `Box<FnBox()>`. The two traits behave essentially the same, except that a `FnBox` closure can only be called if it is boxed. (Note that `FnBox` may be deprecated in the future if `Box<FnOnce()>` closures become directly usable.)",N,N],[16,"Output","","",5,N],[10,"call_box","","",5,N],[3,"PinBox","","A pinned, heap allocated reference.",N,N],[0,"cmp","nom::lib::std","Functionality for ordering and comparison.",N,N],[8,"PartialEq","nom::lib::std::cmp","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",6,[[["self"],["rhs"]],["bool"]]],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",N,N],[13,"Less","","An ordering where a compared value is less [than another].",7,N],[13,"Equal","","An ordering where a compared value is equal [to another].",7,N],[13,"Greater","","An ordering where a compared value is greater [than another].",7,N],[3,"Reverse","","A helper struct for reverse ordering.",N,N],[12,"0","","",8,N],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",9,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",9,[[["self"],["self"]],["self"]]],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,[[["self"],["rhs"]],["bool"]]],[5,"min","","Compares and returns the minimum of two values.",N,[[["t"],["t"]],["t"]]],[5,"max","","Compares and returns the maximum of two values.",N,[[["t"],["t"]],["t"]]],[0,"collections","nom::lib::std","Collection types.",N,N],[0,"hash_map","nom::lib::std::collections","A hash map implemented with linear probing and Robin Hood bucket stealing.",N,N],[3,"VacantEntry","nom::lib::std::collections::hash_map","A view into a vacant entry in a `HashMap`. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over the entries of a `HashMap`.",N,N],[3,"IterMut","","A mutable iterator over the entries of a `HashMap`.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Occupied","","An occupied entry.",11,N],[13,"Vacant","","A vacant entry.",11,N],[3,"ValuesMut","","A mutable iterator over the values of a `HashMap`.",N,N],[3,"HashMap","","A hash map implemented with linear probing and Robin Hood bucket stealing.",N,N],[3,"Drain","","A draining iterator over the entries of a `HashMap`.",N,N],[3,"Keys","","An iterator over the keys of a `HashMap`.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `HashMap`.",N,N],[3,"DefaultHasher","","The default [`Hasher`] used by [`RandomState`].",N,N],[3,"Values","","An iterator over the values of a `HashMap`.",N,N],[3,"OccupiedEntry","","A view into an occupied entry in a `HashMap`. It is part of the [`Entry`] enum.",N,N],[3,"RandomState","","`RandomState` is the default state for [`HashMap`] types.",N,N],[0,"hash_set","nom::lib::std::collections","A hash set implemented as a `HashMap` where the value is `()`.",N,N],[3,"Iter","nom::lib::std::collections::hash_set","An iterator over the items of a `HashSet`.",N,N],[3,"Intersection","","A lazy iterator producing elements in the intersection of `HashSet`s.",N,N],[3,"Drain","","A draining iterator over the items of a `HashSet`.",N,N],[3,"Difference","","A lazy iterator producing elements in the difference of `HashSet`s.",N,N],[3,"IntoIter","","An owning iterator over the items of a `HashSet`.",N,N],[3,"Union","","A lazy iterator producing elements in the union of `HashSet`s.",N,N],[3,"HashSet","","A hash set implemented as a `HashMap` where the value is `()`.",N,N],[3,"SymmetricDifference","","A lazy iterator producing elements in the symmetric difference of `HashSet`s.",N,N],[0,"btree_set","nom::lib::std::collections","A set based on a B-Tree.",N,N],[3,"SymmetricDifference","nom::lib::std::collections::btree_set","A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.",N,N],[3,"BTreeSet","","A set based on a B-Tree.",N,N],[3,"Difference","","A lazy iterator producing elements in the difference of `BTreeSet`s.",N,N],[3,"Intersection","","A lazy iterator producing elements in the intersection of `BTreeSet`s.",N,N],[3,"Range","","An iterator over a sub-range of items in a `BTreeSet`.",N,N],[3,"Union","","A lazy iterator producing elements in the union of `BTreeSet`s.",N,N],[3,"IntoIter","","An owning iterator over the items of a `BTreeSet`.",N,N],[3,"Iter","","An iterator over the items of a `BTreeSet`.",N,N],[3,"BinaryHeap","nom::lib::std::collections","A priority queue implemented with a binary heap.",N,N],[0,"vec_deque","","A double-ended queue implemented with a growable ring buffer.",N,N],[3,"VecDeque","nom::lib::std::collections::vec_deque","A double-ended queue implemented with a growable ring buffer.",N,N],[3,"Iter","","An iterator over the elements of a `VecDeque`.",N,N],[3,"IterMut","","A mutable iterator over the elements of a `VecDeque`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `VecDeque`.",N,N],[3,"Drain","","A draining iterator over the elements of a `VecDeque`.",N,N],[4,"CollectionAllocErr","nom::lib::std::collections","Augments `AllocErr` with a CapacityOverflow variant.",N,N],[13,"CapacityOverflow","","Error due to the computed capacity exceeding the collection's maximum (usually `isize::MAX` bytes).",12,N],[13,"AllocErr","","Error due to the allocator (see the `AllocErr` type's docs).",12,N],[4,"Bound","","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",13,N],[13,"Excluded","","An exclusive bound.",13,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",13,N],[3,"BTreeMap","","A map based on a B-Tree.",N,N],[0,"binary_heap","","A priority queue implemented with a binary heap.",N,N],[3,"PeekMut","nom::lib::std::collections::binary_heap","Structure wrapping a mutable reference to the greatest item on a `BinaryHeap`.",N,N],[3,"Iter","","An iterator over the elements of a `BinaryHeap`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `BinaryHeap`.",N,N],[3,"Drain","","A draining iterator over the elements of a `BinaryHeap`.",N,N],[3,"LinkedList","nom::lib::std::collections","A doubly-linked list with owned nodes.",N,N],[0,"btree_map","","A map based on a B-Tree.",N,N],[4,"Entry","nom::lib::std::collections::btree_map","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant entry.",14,N],[13,"Occupied","","An occupied entry.",14,N],[3,"ValuesMut","","A mutable iterator over the values of a `BTreeMap`.",N,N],[3,"Values","","An iterator over the values of a `BTreeMap`.",N,N],[3,"VacantEntry","","A view into a vacant entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[3,"RangeMut","","A mutable iterator over a sub-range of entries in a `BTreeMap`.",N,N],[3,"Range","","An iterator over a sub-range of entries in a `BTreeMap`.",N,N],[3,"IterMut","","A mutable iterator over the entries of a `BTreeMap`.",N,N],[3,"Keys","","An iterator over the keys of a `BTreeMap`.",N,N],[3,"OccupiedEntry","","A view into an occupied entry in a `BTreeMap`. It is part of the [`Entry`] enum.",N,N],[3,"IntoIter","","An owning iterator over the entries of a `BTreeMap`.",N,N],[3,"Iter","","An iterator over the entries of a `BTreeMap`.",N,N],[0,"linked_list","nom::lib::std::collections","A doubly-linked list with owned nodes.",N,N],[3,"Iter","nom::lib::std::collections::linked_list","An iterator over the elements of a `LinkedList`.",N,N],[3,"IterMut","","A mutable iterator over the elements of a `LinkedList`.",N,N],[3,"IntoIter","","An owning iterator over the elements of a `LinkedList`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on LinkedList.",N,N],[0,"convert","nom::lib::std","Traits for conversions between types.",N,N],[8,"AsRef","nom::lib::std::convert","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",15,[[["self"]],["t"]]],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",16,[[["self"]],["t"]]],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",17,[[["self"]],["t"]]],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",18,[[["t"]],["self"]]],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",N,N],[16,"Error","","The type returned in the event of a conversion error.",19,N],[10,"try_into","","Performs the conversion.",19,[[["self"]],["result"]]],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",N,N],[16,"Error","","The type returned in the event of a conversion error.",20,N],[10,"try_from","","Performs the conversion.",20,[[["t"]],["result"]]],[0,"fmt","nom::lib::std","Utilities for formatting and printing `String`s.",N,N],[5,"format","nom::lib::std::fmt","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string.",N,[[["arguments"]],["string"]]],[8,"Display","","Format trait for an empty format, `{}`.",N,N],[10,"fmt","","Formats the value using the given formatter.",21,[[["self"],["formatter"]],["result",["error"]]]],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they should be formatted. A mutable version of this is passed to all formatting traits.",N,N],[3,"Arguments","","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification.",N,N],[8,"UpperExp","","`E` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",22,[[["self"],["formatter"]],["result",["error"]]]],[5,"write","","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro.",N,[[["write"],["arguments"]],["result",["error"]]]],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",N,N],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",N,N],[6,"Result","","The type returned by formatter methods.",N,N],[8,"Binary","","`b` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",23,[[["self"],["formatter"]],["result",["error"]]]],[8,"LowerExp","","`e` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",24,[[["self"],["formatter"]],["result",["error"]]]],[3,"Error","","The error type which is returned from formatting a message into a stream.",N,N],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"LowerHex","","`x` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",25,[[["self"],["formatter"]],["result",["error"]]]],[8,"Pointer","","`p` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",26,[[["self"],["formatter"]],["result",["error"]]]],[8,"UpperHex","","`X` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",27,[[["self"],["formatter"]],["result",["error"]]]],[4,"Alignment","","Possible alignments returned by `Formatter::align`",N,N],[13,"Left","","Indication that contents should be left-aligned.",28,N],[13,"Right","","Indication that contents should be right-aligned.",28,N],[13,"Center","","Indication that contents should be center-aligned.",28,N],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"Debug","","`?` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",29,[[["self"],["formatter"]],["result",["error"]]]],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",N,N],[8,"Write","","A collection of methods that are required to format a message into a stream.",N,N],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write succeeded.",30,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","Writes a [`char`] into this writer, returning whether the write succeeded.",30,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","Glue for usage of the [`write!`] macro with implementors of this trait.",30,[[["self"],["arguments"]],["result",["error"]]]],[8,"Octal","","`o` formatting.",N,N],[10,"fmt","","Formats the value using the given formatter.",31,[[["self"],["formatter"]],["result",["error"]]]],[0,"hash","nom::lib::std","Generic hashing support.",N,N],[8,"Hash","nom::lib::std::hash","A hashable type.",N,N],[10,"hash","","Feeds this value into the given [`Hasher`].",32,N],[11,"hash_slice","","Feeds a slice of this type into the given [`Hasher`].",32,N],[8,"Hasher","","A trait for hashing an arbitrary stream of bytes.",N,N],[10,"finish","","Returns the hash value for the values written so far.",33,[[["self"]],["u64"]]],[10,"write","","Writes some data into this `Hasher`.",33,N],[11,"write_u8","","Writes a single `u8` into this hasher.",33,N],[11,"write_u16","","Writes a single `u16` into this hasher.",33,N],[11,"write_u32","","Writes a single `u32` into this hasher.",33,N],[11,"write_u64","","Writes a single `u64` into this hasher.",33,N],[11,"write_u128","","Writes a single `u128` into this hasher.",33,N],[11,"write_usize","","Writes a single `usize` into this hasher.",33,N],[11,"write_i8","","Writes a single `i8` into this hasher.",33,N],[11,"write_i16","","Writes a single `i16` into this hasher.",33,N],[11,"write_i32","","Writes a single `i32` into this hasher.",33,N],[11,"write_i64","","Writes a single `i64` into this hasher.",33,N],[11,"write_i128","","Writes a single `i128` into this hasher.",33,N],[11,"write_isize","","Writes a single `isize` into this hasher.",33,N],[8,"BuildHasher","","A trait for creating instances of [`Hasher`].",N,N],[16,"Hasher","","Type of the hasher that will be created.",34,N],[10,"build_hasher","","Creates a new hasher.",34,N],[3,"BuildHasherDefault","","Used to create a default [`BuildHasher`] instance for types that implement [`Hasher`] and [`Default`].",N,N],[3,"SipHasher","","An implementation of SipHash 2-4.",N,N],[0,"iter","nom::lib::std","Composable external iteration.",N,N],[3,"Rev","nom::lib::std::iter","A double-ended iterator with the direction inverted.",N,N],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",N,N],[3,"Cycle","","An iterator that repeats endlessly.",N,N],[3,"StepBy","","An iterator for stepping iterators by a custom amount.",N,N],[3,"Chain","","An iterator that strings two iterators together.",N,N],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",N,N],[3,"Map","","An iterator that maps the values of `iter` with `f`.",N,N],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",N,N],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",N,N],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",N,N],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element.",N,N],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",N,N],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",N,N],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",N,N],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",N,N],[3,"Scan","","An iterator to maintain state while iterating another iterator.",N,N],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements of the produced iterators.",N,N],[3,"Flatten","","An iterator that flattens one level of nesting in an iterator of things that can be turned into iterators.",N,N],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator yields `None` once.",N,N],[3,"Inspect","","An iterator that calls a function with a reference to each element before yielding it.",N,N],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",35,N],[3,"Repeat","","An iterator that repeats an element endlessly.",N,N],[5,"empty","","Creates an iterator that yields nothing.",N,[[],["empty"]]],[8,"TrustedLen","","An iterator that reports an accurate length using size_hint.",N,N],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",36,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",36,N],[10,"into_iter","","Creates an iterator from a value.",36,N],[8,"Product","","Trait to represent types that can be created by multiplying elements of an iterator.",N,N],[10,"product","","Method which takes an iterator and generates `Self` from the elements by multiplying the items.",37,[[["i"]],["self"]]],[8,"Sum","","Trait to represent types that can be created by summing up an iterator.",N,N],[10,"sum","","Method which takes an iterator and generates `Self` from the elements by \"summing up\" the items.",38,[[["i"]],["self"]]],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",39,N],[10,"next","","Advances the iterator and returns the next value.",39,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",39,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",39,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",39,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",39,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",39,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",39,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",39,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",39,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",39,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",39,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",39,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",39,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",39,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",39,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",39,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",39,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",39,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",39,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",39,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",39,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",39,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",39,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",39,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",39,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",39,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",39,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",39,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",39,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",39,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",39,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",39,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",39,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",39,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",39,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",39,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",39,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",39,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",39,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",39,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",39,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",39,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",39,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",39,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",39,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",39,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",39,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",39,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",39,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",39,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",39,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",39,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",39,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",39,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",39,[[["self"],["i"]],["bool"]]],[5,"repeat_with","","Creates a new iterator that repeats elements of type `A` endlessly by applying the provided closure, the repeater, `F: FnMut() -> A`.",N,[[["f"]],["repeatwith"]]],[3,"RepeatWith","","An iterator that repeats elements of type `A` endlessly by applying the provided closure `F: FnMut() -> A`.",N,N],[8,"Step","","Objects that can be stepped over in both directions.",N,N],[10,"steps_between","","Returns the number of steps between two step objects. The count is inclusive of `start` and exclusive of `end`.",40,[[["self"],["self"]],["option",["usize"]]]],[10,"replace_one","","Replaces this step with `1`, returning itself",40,[[["self"]],["self"]]],[10,"replace_zero","","Replaces this step with `0`, returning itself",40,[[["self"]],["self"]]],[10,"add_one","","Adds one to this step, returning the result",40,[[["self"]],["self"]]],[10,"sub_one","","Subtracts one to this step, returning the result",40,[[["self"]],["self"]]],[10,"add_usize","","Add an usize, returning None on overflow",40,[[["self"],["usize"]],["option"]]],[8,"FromIterator","","Conversion from an `Iterator`.",N,N],[10,"from_iter","","Creates a value from an iterator.",41,[[["t"]],["self"]]],[3,"Once","","An iterator that yields an element exactly once.",N,N],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",42,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",42,[[["self"]],["bool"]]],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",43,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",43,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",43,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",43,[[["self"],["p"]],["option"]]],[8,"FusedIterator","","An iterator that always continues to yield `None` when exhausted.",N,N],[5,"once","","Creates an iterator that yields an element exactly once.",N,[[["t"]],["once"]]],[3,"Empty","","An iterator that yields nothing.",N,N],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",N,[[["t"]],["repeat"]]],[0,"mem","nom::lib::std","Basic functions for dealing with memory.",N,N],[5,"forget","nom::lib::std::mem","Leaks a value: takes ownership and \"forgets\" about the value without running its destructor.",N,N],[5,"size_of","","Returns the size of a type in bytes.",N,[[],["usize"]]],[5,"size_of_val","","Returns the size of the pointed-to value in bytes.",N,[[["t"]],["usize"]]],[5,"min_align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"min_align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"align_of","","Returns the [ABI]-required minimum alignment of a type.",N,[[],["usize"]]],[5,"align_of_val","","Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.",N,[[["t"]],["usize"]]],[5,"needs_drop","","Returns whether dropping values of type `T` matters.",N,[[],["bool"]]],[5,"zeroed","","Creates a value whose bytes are all zero.",N,[[],["t"]]],[5,"uninitialized","","Bypasses Rust's normal memory-initialization checks by pretending to produce a value of type `T`, while doing nothing at all.",N,[[],["t"]]],[5,"swap","","Swaps the values at two mutable locations, without deinitializing either one.",N,N],[5,"replace","","Moves `src` into the referenced `dest`, returning the previous `dest` value.",N,[[["t"],["t"]],["t"]]],[5,"drop","","Disposes of a value.",N,N],[5,"transmute_copy","","Interprets `src` as having type `&U`, and then reads `src` without moving the contained value.",N,[[["t"]],["u"]]],[3,"Discriminant","","Opaque type representing the discriminant of an enum.",N,N],[5,"discriminant","","Returns a value uniquely identifying the enum variant in `v`.",N,[[["t"]],["discriminant"]]],[3,"ManuallyDrop","","A wrapper to inhibit compiler from automatically calling `T`’s destructor.",N,N],[3,"PinMut","","A pinned reference.",N,N],[5,"transmute","","Reinterprets the bits of a value of one type as another type.",N,[[["t"]],["u"]]],[0,"ops","nom::lib::std","Overloadable operators.",N,N],[8,"BitAnd","nom::lib::std::ops","The bitwise AND operator `&`.",N,N],[16,"Output","","The resulting type after applying the `&` operator.",44,N],[10,"bitand","","Performs the `&` operation.",44,N],[8,"BitXor","","The bitwise XOR operator `^`.",N,N],[16,"Output","","The resulting type after applying the `^` operator.",45,N],[10,"bitxor","","Performs the `^` operation.",45,N],[3,"RangeInclusive","","An range bounded inclusively below and above (`start..=end`).",N,N],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",46,N],[10,"call_once","","Performs the call operation.",46,N],[8,"Deref","","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",47,N],[10,"deref","","Dereferences the value.",47,N],[3,"RangeToInclusive","","A range only bounded inclusively above (`..=end`).",N,N],[12,"end","","The upper bound of the range (inclusive)",48,N],[8,"Not","","The unary logical negation operator `!`.",N,N],[16,"Output","","The resulting type after applying the `!` operator.",49,N],[10,"not","","Performs the unary `!` operation.",49,N],[8,"BitOr","","The bitwise OR operator `|`.",N,N],[16,"Output","","The resulting type after applying the `|` operator.",50,N],[10,"bitor","","Performs the `|` operation.",50,N],[8,"SubAssign","","The subtraction assignment operator `-=`.",N,N],[10,"sub_assign","","Performs the `-=` operation.",51,N],[3,"RangeFrom","","A range only bounded inclusively below (`start..`).",N,N],[12,"start","","The lower bound of the range (inclusive).",52,N],[8,"Add","","The addition operator `+`.",N,N],[16,"Output","","The resulting type after applying the `+` operator.",53,N],[10,"add","","Performs the `+` operation.",53,N],[8,"Neg","","The unary negation operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",54,N],[10,"neg","","Performs the unary `-` operation.",54,N],[4,"Bound","","An endpoint of a range of keys.",N,N],[13,"Included","","An inclusive bound.",13,N],[13,"Excluded","","An exclusive bound.",13,N],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",13,N],[8,"Fn","","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",55,N],[8,"BitAndAssign","","The bitwise AND assignment operator `&=`.",N,N],[10,"bitand_assign","","Performs the `&=` operation.",56,N],[8,"MulAssign","","The multiplication assignment operator `*=`.",N,N],[10,"mul_assign","","Performs the `*=` operation.",57,N],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",58,N],[8,"Sub","","The subtraction operator `-`.",N,N],[16,"Output","","The resulting type after applying the `-` operator.",59,N],[10,"sub","","Performs the `-` operation.",59,N],[3,"Range","","A (half-open) range bounded inclusively below and exclusively above (`start..end`).",N,N],[12,"start","","The lower bound of the range (inclusive).",60,N],[12,"end","","The upper bound of the range (exclusive).",60,N],[8,"Div","","The division operator `/`.",N,N],[16,"Output","","The resulting type after applying the `/` operator.",61,N],[10,"div","","Performs the `/` operation.",61,N],[8,"ShlAssign","","The left shift assignment operator `<<=`.",N,N],[10,"shl_assign","","Performs the `<<=` operation.",62,N],[8,"RangeBounds","","`RangeBounds` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",N,N],[10,"start_bound","","Start index bound.",63,[[["self"]],["bound"]]],[10,"end_bound","","End index bound.",63,[[["self"]],["bound"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",63,[[["self"],["u"]],["bool"]]],[8,"ShrAssign","","The right shift assignment operator `>>=`.",N,N],[10,"shr_assign","","Performs the `>>=` operation.",64,N],[8,"Shl","","The left shift operator `<<`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ << _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a << b` and `a.shl(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `<<` operator.",65,N],[10,"shl","","Performs the `<<` operation.",65,N],[8,"BitOrAssign","","The bitwise OR assignment operator `|=`.",N,N],[10,"bitor_assign","","Performs the `|=` operation.",66,N],[8,"Mul","","The multiplication operator `*`.",N,N],[16,"Output","","The resulting type after applying the `*` operator.",67,N],[10,"mul","","Performs the `*` operation.",67,N],[8,"Try","","A trait for customizing the behavior of the `?` operator.",N,N],[16,"Ok","","The type of this value when viewed as successful.",68,N],[16,"Error","","The type of this value when viewed as failed.",68,N],[10,"into_result","","Applies the \"?\" operator. A return of `Ok(t)` means that the execution should continue normally, and the result of `?` is the value `t`. A return of `Err(e)` means that execution should branch to the innermost enclosing `catch`, or return from the function.",68,[[["self"]],["result"]]],[10,"from_error","","Wrap an error value to construct the composite result. For example, `Result::Err(x)` and `Result::from_error(x)` are equivalent.",68,N],[10,"from_ok","","Wrap an OK value to construct the composite result. For example, `Result::Ok(x)` and `Result::from_ok(x)` are equivalent.",68,N],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one, where unsizing can be performed on the pointee.",N,N],[8,"BitXorAssign","","The bitwise XOR assignment operator `^=`.",N,N],[10,"bitxor_assign","","Performs the `^=` operation.",69,N],[4,"GeneratorState","","The result of a generator resumption.",N,N],[13,"Yielded","","The generator suspended with a value.",70,N],[13,"Complete","","The generator completed with a return value.",70,N],[8,"DivAssign","","The division assignment operator `/=`.",N,N],[10,"div_assign","","Performs the `/=` operation.",71,N],[3,"RangeFull","","An unbounded range (`..`).",N,N],[8,"AddAssign","","The addition assignment operator `+=`.",N,N],[10,"add_assign","","Performs the `+=` operation.",72,N],[8,"IndexMut","","Used for indexing operations (`container[index]`) in mutable contexts.",N,N],[10,"index_mut","","Performs the mutable indexing (`container[index]`) operation.",73,N],[8,"RemAssign","","The remainder assignment operator `%=`.",N,N],[10,"rem_assign","","Performs the `%=` operation.",74,N],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",75,N],[3,"RangeTo","","A range only bounded exclusively above (`..end`).",N,N],[12,"end","","The upper bound of the range (exclusive).",76,N],[8,"Generator","","The trait implemented by builtin generator types.",N,N],[16,"Yield","","The type of value this generator yields.",77,N],[16,"Return","","The type of value this generator returns.",77,N],[10,"resume","","Resumes the execution of this generator.",77,[[["self"]],["generatorstate"]]],[8,"Index","","Used for indexing operations (`container[index]`) in immutable contexts.",N,N],[16,"Output","","The returned type after indexing.",78,N],[10,"index","","Performs the indexing (`container[index]`) operation.",78,N],[8,"Shr","","The right shift operator `>>`. Note that because this trait is implemented for all integer types with multiple right-hand-side types, Rust's type checker has special handling for `_ >> _`, setting the result type for integer operations to the type of the left-hand-side operand. This means that though `a >> b` and `a.shr(b)` are one and the same from an evaluation standpoint, they are different when it comes to type inference.",N,N],[16,"Output","","The resulting type after applying the `>>` operator.",79,N],[10,"shr","","Performs the `>>` operation.",79,N],[8,"Rem","","The remainder operator `%`.",N,N],[16,"Output","","The resulting type after applying the `%` operator.",80,N],[10,"rem","","Performs the `%` operation.",80,N],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v = 1;`.",N,N],[10,"deref_mut","","Mutably dereferences the value.",81,N],[0,"option","nom::lib::std","Optional values.",N,N],[4,"Option","nom::lib::std::option","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",82,N],[13,"Some","","Some value `T`",82,N],[3,"Iter","","An iterator over a reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Some`] variant of an [`Option`].",N,N],[3,"IntoIter","","An iterator over the value in [`Some`] variant of an [`Option`].",N,N],[3,"NoneError","","The error type that results from applying the try operator (`?`) to a `None` value. If you wish to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.",N,N],[0,"result","nom::lib::std","Error handling with the `Result` type.",N,N],[4,"Result","nom::lib::std::result","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",83,N],[13,"Err","","Contains the error value",83,N],[3,"Iter","","An iterator over a reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IterMut","","An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].",N,N],[3,"IntoIter","","An iterator over the value in a [`Ok`] variant of a [`Result`].",N,N],[0,"slice","nom::lib::std","A dynamically-sized view into a contiguous sequence, `[T]`.",N,N],[8,"SliceConcatExt","nom::lib::std::slice","An extension trait for concatenating slices",N,N],[16,"Output","","The resulting type after concatenation",84,N],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",84,N],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",84,N],[10,"connect","","",84,N],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time). When the slice len is not evenly divided by the chunk size, the last slice of the iteration will be the remainder.",N,N],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[8,"SliceIndex","","A helper trait used for indexing operations.",N,N],[16,"Output","","The output type returned by methods.",85,N],[10,"get","","Returns a shared reference to the output at this location, if in bounds.",85,[[["self"],["t"]],["option"]]],[10,"get_mut","","Returns a mutable reference to the output at this location, if in bounds.",85,[[["self"],["t"]],["option"]]],[10,"get_unchecked","","Returns a shared reference to the output at this location, without performing any bounds checking.",85,N],[10,"get_unchecked_mut","","Returns a mutable reference to the output at this location, without performing any bounds checking.",85,N],[10,"index","","Returns a shared reference to the output at this location, panicking if out of bounds.",85,N],[10,"index_mut","","Returns a mutable reference to the output at this location, panicking if out of bounds.",85,N],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",N,N],[3,"SplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`.",N,N],[5,"from_ref","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[3,"RSplit","","An iterator over subslices separated by elements that match a predicate function, starting from the end of the slice.",N,N],[3,"Iter","","Immutable slice iterator",N,N],[3,"Windows","","An iterator over overlapping subslices of length `size`.",N,N],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable slice is returned.",N,N],[3,"RSplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits, starting from the end of the slice.",N,N],[3,"ExactChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`chunk_size` elements at a time).",N,N],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"ExactChunks","","An iterator over a slice in (non-overlapping) chunks (`chunk_size` elements at a time).",N,N],[3,"IterMut","","Mutable slice iterator.",N,N],[3,"Split","","An iterator over subslices separated by elements that match a predicate function.",N,N],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate function, limited to a given number of splits.",N,N],[5,"from_mut","","Converts a reference to T into a slice of length 1 (without copying).",N,N],[3,"RSplitMut","","An iterator over the subslices of the vector which are separated by elements that match `pred`, starting from the end of the slice.",N,N],[0,"str","nom::lib::std","Unicode string slices.",N,N],[5,"from_boxed_utf8_unchecked","nom::lib::std::str","Converts a boxed slice of bytes to a boxed string slice without checking that the string contains valid UTF-8.",N,[[["box"]],["box",["str"]]]],[3,"LinesAny","","Created with the method [`lines_any`].",N,N],[3,"RMatches","","Created with the method [`rmatches`].",N,N],[3,"Matches","","Created with the method [`matches`].",N,N],[5,"from_utf8_mut","","Converts a mutable slice of bytes to a mutable string slice.",N,N],[3,"SplitAsciiWhitespace","","An iterator over the non-ASCII-whitespace substrings of a string, separated by any amount of ASCII whitespace.",N,N],[3,"Bytes","","An iterator over the bytes of a string slice.",N,N],[3,"SplitWhitespace","","An iterator over the non-whitespace substrings of a string, separated by any amount of whitespace.",N,N],[0,"pattern","","The string Pattern API.",N,N],[8,"Pattern","nom::lib::std::str::pattern","A string pattern.",N,N],[16,"Searcher","","Associated searcher for this pattern",86,N],[10,"into_searcher","","Constructs the associated searcher from `self` and the `haystack` to search in.",86,N],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",86,[[["self"],["str"]],["bool"]]],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",86,[[["self"],["str"]],["bool"]]],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",86,[[["self"],["str"]],["bool"]]],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",N,N],[13,"Match","","Expresses that a match of the pattern has been found at `haystack[a..b]`.",87,N],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match of the pattern.",87,N],[13,"Done","","Expresses that every byte of the haystack has been visited, ending the iteration.",87,N],[8,"Searcher","","A searcher for a string pattern.",N,N],[10,"haystack","","Getter for the underlying string to be searched in",88,[[["self"]],["str"]]],[10,"next","","Performs the next search step starting from the front.",88,[[["self"]],["searchstep"]]],[11,"next_match","","Find the next `Match` result. See `next()`",88,[[["self"]],["option"]]],[11,"next_reject","","Find the next `Reject` result. See `next()` and `next_match()`",88,[[["self"]],["option"]]],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",N,N],[10,"next_back","","Performs the next search step starting from the back.",89,[[["self"]],["searchstep"]]],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",89,[[["self"]],["option"]]],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",89,[[["self"]],["option"]]],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher` can be used for a `DoubleEndedIterator` implementation.",N,N],[3,"CharSearcher","","Associated type for `<char as Pattern<'a>>::Searcher`.",N,N],[3,"CharSliceSearcher","","Associated type for `<&[char] as Pattern<'a>>::Searcher`.",N,N],[3,"CharPredicateSearcher","","Associated type for `<F as Pattern<'a>>::Searcher`.",N,N],[3,"StrSearcher","","Associated type for `<&str as Pattern<'a>>::Searcher`.",N,N],[3,"Lines","nom::lib::std::str","An iterator over the lines of a string, as string slices.",N,N],[3,"RSplit","","Created with the method [`rsplit`].",N,N],[3,"ParseBoolError","","An error returned when parsing a `bool` using [`from_str`] fails",N,N],[3,"RMatchIndices","","Created with the method [`rmatch_indices`].",N,N],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of [`u8`] as a string.",N,N],[3,"CharIndices","","An iterator over the [`char`]s of a string slice, and their positions.",N,N],[5,"from_utf8","","Converts a slice of bytes to a string slice.",N,N],[3,"RSplitN","","Created with the method [`rsplitn`].",N,N],[3,"EncodeUtf16","","An iterator of [`u16`] over the string encoded as UTF-16.",N,N],[3,"MatchIndices","","Created with the method [`match_indices`].",N,N],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator`].",N,N],[3,"Chars","","An iterator over the [`char`]s of a string slice.",N,N],[5,"from_utf8_unchecked_mut","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8; mutable version.",N,N],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a string.",N,N],[16,"Err","","The associated error which can be returned from parsing.",90,N],[10,"from_str","","Parses a string `s` to return a value of this type.",90,[[["str"]],["result"]]],[3,"SplitTerminator","","Created with the method [`split_terminator`].",N,N],[3,"SplitN","","Created with the method [`splitn`].",N,N],[3,"Split","","Created with the method [`split`].",N,N],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking that the string contains valid UTF-8.",N,N],[0,"string","nom::lib::std","A UTF-8 encoded, growable string.",N,N],[3,"String","nom::lib::std::string","A UTF-8 encoded, growable string.",N,N],[3,"FromUtf8Error","","A possible error value when converting a `String` from a UTF-8 byte vector.",N,N],[3,"FromUtf16Error","","A possible error value when converting a `String` from a UTF-16 byte slice.",N,N],[4,"ParseError","","An error when parsing a `String`.",N,N],[8,"ToString","","A trait for converting a value to a `String`.",N,N],[10,"to_string","","Converts the given value to a `String`.",91,[[["self"]],["string"]]],[3,"Drain","","A draining iterator for `String`.",N,N],[0,"vec","nom::lib::std","A contiguous growable array type with heap-allocated contents, written `Vec<T>`.",N,N],[3,"Vec","nom::lib::std::vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[3,"IntoIter","","An iterator that moves out of a vector.",N,N],[3,"Drain","","A draining iterator for `Vec<T>`.",N,N],[3,"Splice","","A splicing iterator for `Vec`.",N,N],[3,"DrainFilter","","An iterator produced by calling `drain_filter` on Vec.",N,N],[0,"prelude","nom::lib::std","",N,N],[0,"v1","nom::lib::std::prelude","The Rust Prelude.",N,N],[0,"v1","nom::lib::std::prelude::v1","The first version of the prelude of The Rust Standard Library.",N,N],[8,"Sync","nom::lib::std::prelude::v1::v1","Types for which it is safe to share references between threads.",N,N],[8,"FnOnce","","The version of the call operator that takes a by-value receiver.",N,N],[16,"Output","","The returned type after the call operator is used.",46,N],[10,"call_once","","Performs the call operation.",46,N],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",N,N],[16,"Owned","","",92,N],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",92,N],[11,"clone_into","","Uses borrowed data to replace owned data, usually by cloning.",92,N],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",N,N],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",10,[[["self"],["rhs"]],["option",["ordering"]]]],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `<=` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `>` operator.",10,[[["self"],["rhs"]],["bool"]]],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `>=` operator.",10,[[["self"],["rhs"]],["bool"]]],[8,"ExactSizeIterator","","An iterator that knows its exact length.",N,N],[11,"len","","Returns the exact number of times the iterator will iterate.",42,[[["self"]],["usize"]]],[11,"is_empty","","Returns whether the iterator is empty.",42,[[["self"]],["bool"]]],[4,"Result","","`Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).",N,N],[13,"Ok","","Contains the success value",83,N],[13,"Err","","Contains the error value",83,N],[8,"Default","","A trait for giving a type a useful default value.",N,N],[10,"default","","Returns the \"default value\" for a type.",93,[[],["self"]]],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",N,N],[10,"next_back","","Removes and returns an element from the end of the iterator.",43,[[["self"]],["option"]]],[11,"try_rfold","","This is the reverse version of [`try_fold()`]: it takes elements starting from the back of the iterator.",43,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","An iterator method that reduces the iterator's elements to a single, final value, starting from the back.",43,[[["self"],["b"],["f"]],["b"]]],[11,"rfind","","Searches for an element of an iterator from the back that satisfies a predicate.",43,[[["self"],["p"]],["option"]]],[8,"Sized","","Types with a constant size known at compile time.",N,N],[8,"AsRef","","A cheap reference-to-reference conversion. Used to convert a value to a reference value within generic code.",N,N],[10,"as_ref","","Performs the conversion.",15,[[["self"]],["t"]]],[8,"FnMut","","The version of the call operator that takes a mutable receiver.",N,N],[10,"call_mut","","Performs the call operation.",75,N],[3,"Box","","A pointer type for heap allocation.",N,N],[8,"PartialEq","","Trait for equality comparisons which are partial equivalence relations.",N,N],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",6,[[["self"],["rhs"]],["bool"]]],[11,"ne","","This method tests for `!=`.",6,[[["self"],["rhs"]],["bool"]]],[8,"IntoIterator","","Conversion into an `Iterator`.",N,N],[16,"Item","","The type of the elements being iterated over.",36,N],[16,"IntoIter","","Which kind of iterator are we turning this into?",36,N],[10,"into_iter","","Creates an iterator from a value.",36,N],[8,"Send","","Types that can be transferred across thread boundaries.",N,N],[8,"Fn","","The version of the call operator that takes an immutable receiver.",N,N],[10,"call","","Performs the call operation.",55,N],[8,"ToString","","A trait for converting a value to a `String`.",N,N],[10,"to_string","","Converts the given value to a `String`.",91,[[["self"]],["string"]]],[8,"Clone","","A common trait for the ability to explicitly duplicate an object.",N,N],[10,"clone","","Returns a copy of the value.",94,[[["self"]],["self"]]],[11,"clone_from","","Performs copy-assignment from `source`.",94,N],[8,"Copy","","Types whose values can be duplicated simply by copying bits.",N,N],[8,"From","","Simple and safe type conversions in to `Self`. It is the reciprocal of `Into`.",N,N],[10,"from","","Performs the conversion.",18,[[["t"]],["self"]]],[8,"Drop","","Used to run some code when a value goes out of scope. This is sometimes called a 'destructor'.",N,N],[10,"drop","","Executes the destructor for this type.",58,N],[5,"drop","","Disposes of a value.",N,N],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive. The reciprocal of [`From`][From].",N,N],[10,"into","","Performs the conversion.",17,[[["self"]],["t"]]],[8,"Ord","","Trait for types that form a total order.",N,N],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",9,[[["self"],["self"]],["ordering"]]],[11,"max","","Compares and returns the maximum of two values.",9,[[["self"],["self"]],["self"]]],[11,"min","","Compares and returns the minimum of two values.",9,[[["self"],["self"]],["self"]]],[3,"String","","A UTF-8 encoded, growable string.",N,N],[4,"Option","","The `Option` type. See the module level documentation for more.",N,N],[13,"None","","No value",82,N],[13,"Some","","Some value `T`",82,N],[8,"Extend","","Extend a collection with the contents of an iterator.",N,N],[10,"extend","","Extends a collection with the contents of an iterator.",35,N],[3,"Vec","","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.",N,N],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",N,N],[10,"as_mut","","Performs the conversion.",16,[[["self"]],["t"]]],[8,"Eq","","Trait for equality comparisons which are equivalence relations.",N,N],[8,"SliceConcatExt","","An extension trait for concatenating slices",N,N],[16,"Output","","The resulting type after concatenation",84,N],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",84,N],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a given separator between each.",84,N],[10,"connect","","",84,N],[8,"Iterator","","An interface for dealing with iterators.",N,N],[16,"Item","","The type of the elements being iterated over.",39,N],[10,"next","","Advances the iterator and returns the next value.",39,[[["self"]],["option"]]],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",39,N],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",39,[[["self"]],["usize"]]],[11,"last","","Consumes the iterator, returning the last element.",39,[[["self"]],["option"]]],[11,"nth","","Returns the `n`th element of the iterator.",39,[[["self"],["usize"]],["option"]]],[11,"step_by","","Creates an iterator starting at the same point, but stepping by the given amount at each iteration.",39,[[["self"],["usize"]],["stepby"]]],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",39,[[["self"],["u"]],["chain"]]],[11,"zip","","'Zips up' two iterators into a single iterator of pairs.",39,[[["self"],["u"]],["zip"]]],[11,"map","","Takes a closure and creates an iterator which calls that closure on each element.",39,[[["self"],["f"]],["map"]]],[11,"for_each","","Calls a closure on each element of an iterator.",39,N],[11,"filter","","Creates an iterator which uses a closure to determine if an element should be yielded.",39,[[["self"],["p"]],["filter"]]],[11,"filter_map","","Creates an iterator that both filters and maps.",39,[[["self"],["f"]],["filtermap"]]],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as the next value.",39,[[["self"]],["enumerate"]]],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of the iterator without consuming it.",39,[[["self"]],["peekable"]]],[11,"skip_while","","Creates an iterator that [`skip`]s elements based on a predicate.",39,[[["self"],["p"]],["skipwhile"]]],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",39,[[["self"],["p"]],["takewhile"]]],[11,"skip","","Creates an iterator that skips the first `n` elements.",39,[[["self"],["usize"]],["skip"]]],[11,"take","","Creates an iterator that yields its first `n` elements.",39,[[["self"],["usize"]],["take"]]],[11,"scan","","An iterator adaptor similar to [`fold`] that holds internal state and produces a new iterator.",39,[[["self"],["st"],["f"]],["scan"]]],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",39,[[["self"],["f"]],["flatmap"]]],[11,"flatten","","Creates an iterator that flattens nested structure.",39,[[["self"]],["flatten"]]],[11,"fuse","","Creates an iterator which ends after the first [`None`].",39,[[["self"]],["fuse"]]],[11,"inspect","","Do something with each element of an iterator, passing the value on.",39,[[["self"],["f"]],["inspect"]]],[11,"by_ref","","Borrows an iterator, rather than consuming it.",39,[[["self"]],["self"]]],[11,"collect","","Transforms an iterator into a collection.",39,[[["self"]],["b"]]],[11,"partition","","Consumes an iterator, creating two collections from it.",39,N],[11,"try_fold","","An iterator method that applies a function as long as it returns successfully, producing a single, final value.",39,[[["self"],["b"],["f"]],["r"]]],[11,"try_for_each","","An iterator method that applies a fallible function to each item in the iterator, stopping at the first error and returning that error.",39,[[["self"],["f"]],["r"]]],[11,"fold","","An iterator method that applies a function, producing a single, final value.",39,[[["self"],["b"],["f"]],["b"]]],[11,"all","","Tests if every element of the iterator matches a predicate.",39,[[["self"],["f"]],["bool"]]],[11,"any","","Tests if any element of the iterator matches a predicate.",39,[[["self"],["f"]],["bool"]]],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",39,[[["self"],["p"]],["option"]]],[11,"find_map","","Applies function to the elements of iterator and returns the first non-none result.",39,[[["self"],["f"]],["option"]]],[11,"position","","Searches for an element in an iterator, returning its index.",39,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","Searches for an element in an iterator from the right, returning its index.",39,[[["self"],["p"]],["option",["usize"]]]],[11,"max","","Returns the maximum element of an iterator.",39,[[["self"]],["option"]]],[11,"min","","Returns the minimum element of an iterator.",39,[[["self"]],["option"]]],[11,"max_by_key","","Returns the element that gives the maximum value from the specified function.",39,[[["self"],["f"]],["option"]]],[11,"max_by","","Returns the element that gives the maximum value with respect to the specified comparison function.",39,[[["self"],["f"]],["option"]]],[11,"min_by_key","","Returns the element that gives the minimum value from the specified function.",39,[[["self"],["f"]],["option"]]],[11,"min_by","","Returns the element that gives the minimum value with respect to the specified comparison function.",39,[[["self"],["f"]],["option"]]],[11,"rev","","Reverses an iterator's direction.",39,[[["self"]],["rev"]]],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",39,N],[11,"cloned","","Creates an iterator which [`clone`]s all of its elements.",39,[[["self"]],["cloned"]]],[11,"cycle","","Repeats an iterator endlessly.",39,[[["self"]],["cycle"]]],[11,"sum","","Sums the elements of an iterator.",39,[[["self"]],["s"]]],[11,"product","","Iterates over the entire iterator, multiplying all the elements",39,[[["self"]],["p"]]],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",39,[[["self"],["i"]],["ordering"]]],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those of another.",39,[[["self"],["i"]],["option",["ordering"]]]],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of another.",39,[[["self"],["i"]],["bool"]]],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of another.",39,[[["self"],["i"]],["bool"]]],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically less than those of another.",39,[[["self"],["i"]],["bool"]]],[11,"le","","Determines if the elements of this `Iterator` are lexicographically less or equal to those of another.",39,[[["self"],["i"]],["bool"]]],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically greater than those of another.",39,[[["self"],["i"]],["bool"]]],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically greater than or equal to those of another.",39,[[["self"],["i"]],["bool"]]],[11,"fmt","nom","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",1,[[["self"],["errorkind"]],["bool"]]],[11,"hash","","",1,N],[11,"clone","","",1,[[["self"]],["errorkind"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"into_error_kind","","Convert Err into an ErrorKind.",1,[[["self"]],["errorkind"]]],[11,"convert","","",1,[[["errorkind"]],["self"]]],[0,"simple_errors","","Error management",N,N],[4,"Context","nom::simple_errors","",N,N],[13,"Code","","",95,N],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["context"]]],[11,"eq","","",95,[[["self"],["context"]],["bool"]]],[11,"ne","","",95,[[["self"],["context"]],["bool"]]],[11,"convert","","",95,[[["context"]],["self"]]],[11,"into_error_kind","","Convert Err into ErrorKind.",95,[[["self"]],["errorkind"]]],[11,"fmt","nom","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["needed"]],["bool"]]],[11,"ne","","",2,[[["self"],["needed"]],["bool"]]],[11,"clone","","",2,[[["self"]],["needed"]]],[11,"is_known","","",2,[[["self"]],["bool"]]],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,[[["self"],["f"]],["needed"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["err"]]],[11,"eq","","",3,[[["self"],["err"]],["bool"]]],[11,"ne","","",3,[[["self"],["err"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"convert","","",3,[[["err"]],["self"]]],[11,"into_error_kind","","",3,[[["self"]],["errorkind"]]],[11,"is_incomplete","","",3,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["compareresult"]],["bool"]]],[0,"methods","","Method macro combinators",N,N],[0,"bits","","Bit level parsers and combinators",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["endianness"]],["bool"]]],[11,"clone","","",4,[[["self"]],["endianness"]]],[0,"whitespace","","Support for whitespace delimited formats",N,N],[5,"sp","nom::whitespace","",N,[[["t"]],["iresult"]]],[0,"types","nom","Custom input types",N,N],[3,"CompleteStr","nom::types","Holds a complete String, for which the `at_eof` method always returns true",N,N],[12,"0","","",96,N],[3,"CompleteByteSlice","","Holds a complete byte array, for which the `at_eof` method always returns true",N,N],[12,"0","","",97,N],[3,"Input","","",N,N],[12,"inner","","",98,N],[12,"at_eof","","",98,N],[11,"clone","","",96,[[["self"]],["completestr"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"eq","","",96,[[["self"],["completestr"]],["bool"]]],[11,"ne","","",96,[[["self"],["completestr"]],["bool"]]],[11,"hash","","",96,N],[11,"from","","",96,[[["str"]],["self"]]],[11,"from","","",96,[[["str"]],["self"]]],[11,"fmt","","",96,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",96,[[["self"]],["str"]]],[11,"deref","","",96,N],[11,"at_eof","","",96,[[["self"]],["bool"]]],[11,"slice","","",96,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",96,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",96,N],[11,"iter_elements","","",96,N],[11,"position","","",96,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",96,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",96,[[["self"],["usize"]],["self"]]],[11,"take_split","","",96,N],[11,"input_len","","",96,[[["self"]],["usize"]]],[11,"compare","","",96,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",96,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",96,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",96,[[["self"],["char"]],["bool"]]],[11,"find_token","","",96,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",96,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",96,[[["self"]],["option"]]],[11,"offset","","",96,[[["self"],["completestr"]],["usize"]]],[11,"as_bytes","","",96,N],[11,"new_builder","","",96,[[["self"]],["string"]]],[11,"extend_into","","",96,[[["self"],["string"]]]],[11,"clone","","",97,[[["self"]],["completebyteslice"]]],[11,"fmt","","",97,[[["self"],["formatter"]],["result"]]],[11,"eq","","",97,[[["self"],["completebyteslice"]],["bool"]]],[11,"ne","","",97,[[["self"],["completebyteslice"]],["bool"]]],[11,"hash","","",97,N],[11,"from","","",97,N],[11,"from","","",97,N],[11,"deref","","",97,N],[11,"at_eof","","",97,[[["self"]],["bool"]]],[11,"slice","","",97,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",97,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",97,N],[11,"iter_elements","","",97,N],[11,"position","","",97,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",97,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",97,[[["self"],["usize"]],["self"]]],[11,"take_split","","",97,N],[11,"input_len","","",97,[[["self"]],["usize"]]],[11,"compare","","",97,N],[11,"compare_no_case","","",97,N],[11,"compare","","",97,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",97,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",97,N],[11,"find_substring","","",97,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",97,[[["self"],["char"]],["bool"]]],[11,"find_token","","",97,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",97,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",97,[[["self"]],["option"]]],[11,"offset","","",97,[[["self"],["completebyteslice"]],["usize"]]],[11,"as_bytes","","",97,N],[11,"to_hex","","",97,[[["self"],["usize"]],["string"]]],[11,"to_hex_from","","",97,[[["self"],["usize"],["usize"]],["string"]]],[11,"clone","","",98,[[["self"]],["input"]]],[11,"fmt","","",98,[[["self"],["formatter"]],["result"]]],[11,"eq","","",98,[[["self"],["input"]],["bool"]]],[11,"ne","","",98,[[["self"],["input"]],["bool"]]],[11,"hash","","",98,N],[11,"at_eof","","",98,[[["self"]],["bool"]]],[11,"slice","","",98,[[["self"],["range",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangeto",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangefrom",["usize"]]],["self"]]],[11,"slice","","",98,[[["self"],["rangefull"]],["self"]]],[11,"iter_indices","","",98,N],[11,"iter_elements","","",98,N],[11,"position","","",98,[[["self"],["p"]],["option",["usize"]]]],[11,"slice_index","","",98,[[["self"],["usize"]],["option",["usize"]]]],[11,"take","","",98,[[["self"],["usize"]],["self"]]],[11,"take_split","","",98,N],[11,"input_len","","",98,[[["self"]],["usize"]]],[11,"compare","","",98,[[["self"],["str"]],["compareresult"]]],[11,"compare_no_case","","",98,[[["self"],["str"]],["compareresult"]]],[11,"find_substring","","",98,[[["self"],["str"]],["option",["usize"]]]],[11,"find_token","","",98,[[["self"],["char"]],["bool"]]],[11,"find_token","","",98,[[["self"],["u8"]],["bool"]]],[11,"find_token","","",98,[[["self"],["u8"]],["bool"]]],[11,"parse_to","","",98,[[["self"]],["option"]]],[11,"offset","","",98,[[["self"],["input"]],["usize"]]],[11,"as_bytes","","",98,N],[6,"IResult","nom","Holds the result of parsing functions",N,N],[8,"InputLength","","abstract method to calculate the input length",N,N],[10,"input_len","","calculates the input length, as indicated by its name, and the name of the trait itself",99,[[["self"]],["usize"]]],[8,"Offset","","useful functions to calculate the offset between slices and show a hexdump of a slice",N,N],[10,"offset","","offset between the first byte of self and the first byte of the argument",100,[[["self"],["self"]],["usize"]]],[8,"AsBytes","","casts the input type to a byte slice",N,N],[10,"as_bytes","","",101,N],[8,"AsChar","","transforms common types to a char for basic token parsing",N,N],[10,"as_char","","makes a char from self",102,[[["self"]],["char"]]],[10,"is_alpha","","tests that self is an alphabetic character",102,[[["self"]],["bool"]]],[10,"is_alphanum","","tests that self is an alphabetic character or a decimal digit",102,[[["self"]],["bool"]]],[10,"is_dec_digit","","tests that self is a decimal digit",102,[[["self"]],["bool"]]],[10,"is_hex_digit","","tests that self is an hex digit",102,[[["self"]],["bool"]]],[10,"is_oct_digit","","tests that self is an octal digit",102,[[["self"]],["bool"]]],[10,"len","","gets the len in bytes for self",102,[[["self"]],["usize"]]],[8,"InputIter","","abstracts common iteration operations on the input type",N,N],[16,"Item","","",103,N],[16,"RawItem","","",103,N],[16,"Iter","","",103,N],[16,"IterElem","","",103,N],[10,"iter_indices","","returns an iterator over the elements and their byte offsets",103,N],[10,"iter_elements","","returns an iterator over the elements",103,N],[10,"position","","finds the byte position of the element",103,[[["self"],["p"]],["option",["usize"]]]],[10,"slice_index","","get the byte offset from the element's position in the stream",103,[[["self"],["usize"]],["option",["usize"]]]],[8,"InputTake","","abstracts slicing operations",N,N],[10,"take","","returns a slice of `count` bytes. panics if count > length",104,[[["self"],["usize"]],["self"]]],[10,"take_split","","split the stream at the `count` byte offset. panics if count > length",104,N],[8,"UnspecializedInput","","Dummy trait used for default implementations (currently only used for `InputTakeAtPosition`).",N,N],[8,"InputTakeAtPosition","","methods to take as much input as possible until the provided function returns true for the current element",N,N],[16,"Item","","",105,N],[10,"split_at_position","","",105,[[["self"],["p"]],["iresult",["u32"]]]],[10,"split_at_position1","","",105,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[8,"Compare","","abstracts comparison operations",N,N],[10,"compare","","compares self to another value for equality",106,[[["self"],["t"]],["compareresult"]]],[10,"compare_no_case","","compares self to another value for equality independently of the case.",106,[[["self"],["t"]],["compareresult"]]],[8,"FindToken","","look for self in the given input stream",N,N],[10,"find_token","","",107,[[["self"],["t"]],["bool"]]],[8,"FindSubstring","","look for a substring in self",N,N],[10,"find_substring","","",108,[[["self"],["t"]],["option",["usize"]]]],[8,"ParseTo","","used to integrate str's parse() method",N,N],[10,"parse_to","","",109,[[["self"]],["option"]]],[8,"Slice","","slicing operations using ranges",N,N],[10,"slice","","",110,[[["self"],["r"]],["self"]]],[8,"AtEof","","indicates whether more data can come later in input",N,N],[10,"at_eof","","",111,[[["self"]],["bool"]]],[8,"ExtendInto","","abtracts something which can extend an `Extend`",N,N],[16,"Item","","",112,N],[16,"Extender","","",112,N],[10,"new_builder","","create a new `Extend` of the correct type",112,N],[10,"extend_into","","accumulate the input into an accumulator",112,N],[8,"HexDisplay","","",N,N],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned string.",113,[[["self"],["usize"]],["string"]]],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned string.",113,[[["self"],["usize"],["usize"]],["string"]]],[8,"Convert","","",N,N],[10,"convert","","",114,[[["t"]],["self"]]],[14,"dbg","","Prints a message if the parser fails",N,N],[14,"dbg_dmp","","Prints a message and the input if the parser fails",N,N],[14,"fix_error","","translate parser result from IResult<I,O,u32> to IResult<I,O,E> with a custom type",N,N],[14,"flat_map","","`flat_map!(R -> IResult<R,S>, S -> IResult<S,T>) => R -> IResult<R, T>`",N,N],[14,"error_position","","creates a parse error from a `nom::ErrorKind` and the position in the input if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"error_node_position","","creates a parse error from a `nom::ErrorKind`, the position in the input and the next error in the parsing tree. if \"verbose-errors\" is not activated, it default to only the error code",N,N],[14,"closure","","Wraps a parser in a closure",N,N],[14,"named","","Makes a function from a parser combination",N,N],[14,"named_args","","Makes a function from a parser combination with arguments.",N,N],[14,"named_attr","","Makes a function from a parser combination, with attributes",N,N],[14,"call","","Used to wrap common expressions and function as macros",N,N],[14,"apply","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",N,N],[14,"return_error","","Prevents backtracking if the child parser fails",N,N],[14,"add_return_error","","Add an error if the child parser fails",N,N],[14,"complete","","replaces a `Incomplete` returned by the child parser with an `Error`",N,N],[14,"try_parse","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Ok`, and will do an early return for the `Err` side.",N,N],[14,"map","","`map!(I -> IResult<I,O>, O -> P) => I -> IResult<I, P>` maps a function on the result of a parser",N,N],[14,"map_res","","`map_res!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser",N,N],[14,"map_res_err","","`map_res_err!(I -> IResult<I,O>, O -> Result<P>) => I -> IResult<I, P>` maps a function returning a Result on the output of a parser, preserving the returned error",N,N],[14,"map_opt","","`map_opt!(I -> IResult<I,O>, O -> Option<P>) => I -> IResult<I, P>` maps a function returning an Option on the output of a parser",N,N],[14,"parse_to","","`parse_to!(O) => I -> IResult<I, O>` uses the `parse` method from `std::str::FromStr` to convert the current input to the specified type",N,N],[14,"verify","","`verify!(I -> IResult<I,O>, O -> bool) => I -> IResult<I, O>` returns the result of the child parser if it satisfies a verification function",N,N],[14,"value","","`value!(T, R -> IResult<R, S> ) => R -> IResult<R, T>`",N,N],[14,"expr_res","","`expr_res!(Result<E,O>) => I -> IResult<I, O>` evaluate an expression that returns a Result<T,E> and returns a Ok((I,T)) if Ok",N,N],[14,"expr_opt","","`expr_opt!(Option<O>) => I -> IResult<I, O>` evaluate an expression that returns a Option and returns a Ok((I,T)) if Some",N,N],[14,"opt","","`opt!(I -> IResult<I,O>) => I -> IResult<I, Option<O>>` make the underlying parser optional",N,N],[14,"opt_res","","`opt_res!(I -> IResult<I,O>) => I -> IResult<I, Result<nom::Err,O>>` make the underlying parser optional",N,N],[14,"cond_with_error","","`cond_with_error!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond","","`cond!(bool, I -> IResult<I,O>) => I -> IResult<I, Option<O>>` Conditional combinator",N,N],[14,"cond_reduce","","`cond_reduce!(bool, I -> IResult<I,O>) => I -> IResult<I, O>` Conditional combinator with error",N,N],[14,"peek","","`peek!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result without consuming the input",N,N],[14,"not","","`not!(I -> IResult<I,O>) => I -> IResult<I, O>` returns a result only if the embedded parser returns Error or Err(Err::Incomplete) does not consume the input",N,N],[14,"tap","","`tap!(name: I -> IResult<I,O> => { block }) => I -> IResult<I, O>` allows access to the parser's result without affecting it",N,N],[14,"eof","","`eof!()` returns its input if it is at the end of input data",N,N],[14,"exact","","`exact!()` will fail if the child parser does not consume the whole data",N,N],[14,"recognize","","`recognize!(I -> IResult<I, O> ) => I -> IResult<I, I>` if the child parser was successful, return the consumed input as produced value",N,N],[14,"alt","","Try a list of parsers and return the result of the first successful one",N,N],[14,"alt_complete","","Is equivalent to the `alt!` combinator, except that it will not return `Incomplete` when one of the constituting parsers returns `Incomplete`. Instead, it will try the next alternative in the chain.",N,N],[14,"switch","","`switch!(I -> IResult<I,P>, P => I -> IResult<I,O> | ... | P => I -> IResult<I,O> ) => I -> IResult<I, O>` choose the next parser depending on the result of the first one, if successful, and returns the result of the second parser",N,N],[14,"permutation","","`permutation!(I -> IResult<I,A>, I -> IResult<I,B>, ... I -> IResult<I,X> ) => I -> IResult<I, (A,B,...X)>` applies its sub parsers in a sequence, but independent from their order this parser will only succeed if all of its sub parsers succeed",N,N],[14,"tuple","","`tuple!(I->IResult<I,A>, I->IResult<I,B>, ... I->IResult<I,X>) => I -> IResult<I, (A, B, ..., X)>` chains parsers and assemble the sub results in a tuple.",N,N],[14,"pair","","`pair!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` pair(X,Y), returns (x,y)",N,N],[14,"separated_pair","","`separated_pair!(I -> IResult<I,O>, I -> IResult<I, T>, I -> IResult<I,P>) => I -> IResult<I, (O,P)>` separated_pair(X,sep,Y) returns (x,y)",N,N],[14,"preceded","","`preceded!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, O>` preceded(opening, X) returns X",N,N],[14,"terminated","","`terminated!(I -> IResult<I,O>, I -> IResult<I,T>) => I -> IResult<I, O>` terminated(X, closing) returns X",N,N],[14,"delimited","","`delimited!(I -> IResult<I,T>, I -> IResult<I,O>, I -> IResult<I,U>) => I -> IResult<I, O>` delimited(opening, X, closing) returns X",N,N],[14,"do_parse","","`do_parse!(I->IResult<I,A> >> I->IResult<I,B> >> ... I->IResult<I,X> , ( O ) ) => I -> IResult<I, O>` do_parse applies sub parsers in a sequence. it can store intermediary results and make them available for later parsers",N,N],[14,"separated_list","","`separated_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_nonempty_list","","`separated_nonempty_list!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` separated_nonempty_list(sep, X) returns Vec will return Incomplete if there may be more elements",N,N],[14,"separated_list_complete","","`separated_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"separated_nonempty_list_complete","","`separated_nonempty_list_complete!(I -> IResult<I,T>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` This is equivalent to the `separated_nonempty_list!` combinator, except that it will return `Error` when either the separator or element subparser returns `Incomplete`.",N,N],[14,"many0","","`many0!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 0 or more times and returns the list of results in a Vec.",N,N],[14,"many1","","`many1!(I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser 1 or more times and returns the list of results in a Vec",N,N],[14,"many_till","","`many_till!(I -> IResult<I,O>, I -> IResult<I,P>) => I -> IResult<I, (Vec<O>, P)>` Applies the first parser until the second applies. Returns a tuple containing the list of results from the first in a Vec and the result of the second.",N,N],[14,"many_m_n","","`many_m_n!(usize, usize, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` Applies the parser between m and n times (n included) and returns the list of results in a Vec",N,N],[14,"count","","`count!(I -> IResult<I,O>, nb) => I -> IResult<I, Vec<O>>` Applies the child parser a specified number of times",N,N],[14,"count_fixed","","`count_fixed!(O, I -> IResult<I,O>, nb) => I -> IResult<I, [O; nb]>` Applies the child parser a fixed number of times and returns a fixed size array The type must be specified and it must be `Copy`",N,N],[14,"length_count","","`length_count!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, Vec<O>>` gets a number from the first parser, then applies the second parser that many times",N,N],[14,"length_data","","`length_data!(I -> IResult<I, nb>) => O`",N,N],[14,"length_value","","`length_value!(I -> IResult<I, nb>, I -> IResult<I,O>) => I -> IResult<I, O>`",N,N],[14,"fold_many0","","`fold_many0!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 0 or more times and folds the list of return values",N,N],[14,"fold_many1","","`fold_many1!(I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser 1 or more times and folds the list of return values",N,N],[14,"fold_many_m_n","","`fold_many_m_n!(usize, usize, I -> IResult<I,O>, R, Fn(R, O) -> R) => I -> IResult<I, R>` Applies the parser between m and n times (n included) and folds the list of return value",N,N],[14,"method","","Makes a method from a parser combination",N,N],[14,"call_m","","Used to called methods then move self back into self",N,N],[14,"apply_m","","emulate function currying for method calls on structs `apply_m!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",N,N],[14,"tag","","`tag!(&[T]: nom::AsBytes) => &[T] -> IResult<&[T], &[T]>` declares a byte array as a suite to recognize",N,N],[14,"tag_no_case","","`tag_no_case!(&[T]) => &[T] -> IResult<&[T], &[T]>` declares a case insensitive ascii string as a suite to recognize",N,N],[14,"is_not","","`is_not!(&[T:AsBytes]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that do not appear in the provided array",N,N],[14,"is_a","","`is_a!(&[T]) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes that appear in the provided array",N,N],[14,"escaped","","`escaped!(T -> IResult<T, T>, U, T -> IResult<T, T>) => T -> IResult<T, T> where T: InputIter, U: AsChar` matches a byte string with escaped characters.",N,N],[14,"escaped_transform","","`escaped_transform!(&[T] -> IResult<&[T], &[T]>, T, &[T] -> IResult<&[T], &[T]>) => &[T] -> IResult<&[T], Vec<T>>` matches a byte string with escaped characters.",N,N],[14,"take_while","","`take_while!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function fails.",N,N],[14,"take_while1","","`take_while1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest (non empty) list of bytes until the provided function fails.",N,N],[14,"take_while_m_n","","`take_while_m_n!(m: usize, n: usize, T -> bool) => &[T] -> IResult<&[T], &[T]>` returns a list of bytes or characters for which the provided function returns true. the returned list's size will be at least m, and at most n",N,N],[14,"take_till","","`take_till!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest list of bytes until the provided function succeeds",N,N],[14,"take_till1","","`take_till1!(T -> bool) => &[T] -> IResult<&[T], &[T]>` returns the longest non empty list of bytes until the provided function succeeds",N,N],[14,"take","","`take!(nb) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming the specified number of bytes",N,N],[14,"take_str","","`take_str!(nb) => &[T] -> IResult<&[T], &str>` same as take! but returning a &str",N,N],[14,"take_until_and_consume","","`take_until_and_consume!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes until the specified byte sequence is found, and consumes it",N,N],[14,"take_until_and_consume1","","`take_until_and_consume1!(tag) => &[T] -> IResult<&[T], &[T]>` generates a parser consuming bytes (at least 1) until the specified byte sequence is found, and consumes it",N,N],[14,"take_until","","`take_until!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds the specified tag.",N,N],[14,"take_until1","","`take_until1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds the specified tag",N,N],[14,"take_until_either_and_consume","","`take_until_either_and_consume!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters, and consume it",N,N],[14,"take_until_either_and_consume1","","`take_until_either_and_consume1!(chars) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters, and consume it",N,N],[14,"take_until_either","","`take_until_either!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data until it finds any of the specified characters",N,N],[14,"take_until_either1","","`take_until_either1!(tag) => &[T] -> IResult<&[T], &[T]>` consumes data (at least one byte) until it finds any of the specified characters",N,N],[14,"length_bytes","","`length_bytes!(&[T] -> IResult<&[T], nb>) => &[T] -> IResult<&[T], &[T]>` Gets a number from the first parser, then extracts that many bytes from the remaining stream",N,N],[14,"bits","","Transforms its byte slice input into a bit stream for the underlying parser. This allows the given bit stream parser to work on a byte slice input.",N,N],[14,"bytes","","Counterpart to bits, bytes! transforms its bit stream input into a byte slice for the underlying parser, allowing byte-slice parsers to work on bit streams.",N,N],[14,"take_bits","","Consumes the specified number of bits and returns them as the specified type.",N,N],[14,"tag_bits","","Matches the given bit pattern.",N,N],[14,"one_of","","matches one of the provided characters",N,N],[14,"none_of","","matches anything but the provided characters",N,N],[14,"char","","matches one character: `char!(char) => &[u8] -> IResult<&[u8], char>",N,N],[14,"u16","","if the parameter is nom::Endianness::Big, parse a big endian u16 integer, otherwise a little endian u16 integer",N,N],[14,"u32","","if the parameter is nom::Endianness::Big, parse a big endian u32 integer, otherwise a little endian u32 integer",N,N],[14,"u64","","if the parameter is nom::Endianness::Big, parse a big endian u64 integer, otherwise a little endian u64 integer",N,N],[14,"u128","","if the parameter is nom::Endianness::Big, parse a big endian u128 integer, otherwise a little endian u128 integer",N,N],[14,"i16","","if the parameter is nom::Endianness::Big, parse a big endian i16 integer, otherwise a little endian i16 integer",N,N],[14,"i32","","if the parameter is nom::Endianness::Big, parse a big endian i32 integer, otherwise a little endian i32 integer",N,N],[14,"i64","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",N,N],[14,"i128","","if the parameter is nom::Endianness::Big, parse a big endian i64 integer, otherwise a little endian i64 integer",N,N],[14,"wrap_sep","","",N,N],[14,"eat_separator","","helper macros to build a separator parser",N,N],[14,"sep","","sep is the parser rewriting macro for whitespace separated formats",N,N],[14,"ws","","`ws!(I -> IResult<I,O>) => I -> IResult<I, O>`",N,N],[14,"tag_s","","`tag_s!(&str) => &str -> IResult<&str, &str>` declares a string as a suite to recognize",N,N],[14,"tag_no_case_s","","`tag_no_case_s!(&str) => &str -> IResult<&str, &str>` declares a case-insensitive string as a suite to recognize",N,N],[14,"take_s","","`take_s!(nb) => &str -> IResult<&str, &str>` generates a parser consuming the specified number of characters",N,N],[14,"is_not_s","","`is_not_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that do not appear in the provided array",N,N],[14,"is_a_s","","`is_a_s!(&str) => &str -> IResult<&str, &str>` returns the longest list of characters that appear in the provided array",N,N],[14,"take_while_s","","`take_while_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function fails.",N,N],[14,"take_while1_s","","`take_while1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest (non empty) list of characters until the provided function fails.",N,N],[14,"take_till_s","","`take_till_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest list of characters until the provided function succeeds",N,N],[14,"take_till1_s","","`take_till1_s!(char -> bool) => &str -> IResult<&str, &str>` returns the longest non empty list of characters until the provided function succeeds",N,N],[14,"take_until_and_consume_s","","`take_until_and_consume_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and consumes it",N,N],[14,"take_until_s","","`take_until_s!(&str) => &str -> IResult<&str, &str>` generates a parser consuming all chars until the specified string is found and leaves it in the remaining input",N,N],[11,"new","nom::lib::std::prelude::v1::v1","Allocates memory on the heap and then places `x` into it.",115,[[["t"]],["box"]]],[11,"from_raw","","Constructs a box from a raw pointer.",115,N],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",115,N],[11,"into_raw_non_null","","Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.",115,[[["box"]],["nonnull"]]],[11,"leak","","Consumes and leaks the `Box`, returning a mutable reference, `&'a mut T`. Note that the type `T` must outlive the chosen lifetime `'a`. If the type has only static references, or none at all, then this may be chosen to be `'static`.",115,[[["box"]],["t"]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,[[["self"]],["result",["box","box"]]]],[11,"downcast","","Attempt to downcast the box to a concrete type.",115,[[["self"]],["result",["box","box"]]]],[11,"fill_buf","","",115,[[["self"]],["result",["error"]]]],[11,"consume","","",115,N],[11,"read_until","","",115,[[["self"],["u8"],["vec"]],["result",["usize","error"]]]],[11,"read_line","","",115,[[["self"],["string"]],["result",["usize","error"]]]],[11,"seek","","",115,[[["self"],["seekfrom"]],["result",["u64","error"]]]],[11,"from_iter","nom::lib::std::collections::hash_set","",116,[[["i"]],["hashset"]]],[11,"from_iter","nom::lib::std::collections::hash_map","",117,[[["t"]],["hashmap"]]],[11,"write","nom::lib::std::prelude::v1::v1","",115,N],[11,"flush","","",115,[[["self"]],["result",["error"]]]],[11,"write_all","","",115,N],[11,"write_fmt","","",115,[[["self"],["arguments"]],["result",["error"]]]],[11,"write","","",118,N],[11,"write_all","","",118,N],[11,"flush","","",118,[[["self"]],["result",["error"]]]],[11,"into_iter","nom::lib::std::collections::hash_set","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",116,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::hash_map","Creates a consuming iterator, that is, one that moves each key-value pair out of the map in arbitrary order. The map cannot be used after calling this.",117,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::hash_set","",119,[[["self"]],["difference"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["osstr"]]]],[11,"clone","nom::lib::std::collections::hash_map","",120,[[["self"]],["keys"]]],[11,"clone","nom::lib::std::collections::hash_set","",121,[[["self"]],["symmetricdifference"]]],[11,"clone","nom::lib::std::collections::hash_map","",122,[[["self"]],["values"]]],[11,"clone","","",123,[[["self"]],["randomstate"]]],[11,"clone","nom::lib::std::collections::hash_set","",124,[[["self"]],["intersection"]]],[11,"clone","","",125,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::hash_map","",117,[[["self"]],["hashmap"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["cstr"]]]],[11,"clone","nom::lib::std::collections::hash_map","",126,[[["self"]],["defaulthasher"]]],[11,"clone","nom::lib::std::collections::hash_set","",127,[[["self"]],["union"]]],[11,"clone","nom::lib::std::collections::hash_map","",128,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["path"]]]],[11,"clone","nom::lib::std::collections::hash_set","",116,[[["self"]],["hashset"]]],[11,"fmt","nom::lib::std::collections::hash_map","",120,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",121,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",129,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",130,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",123,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",116,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",131,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",124,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",128,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",117,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",132,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",127,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",125,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",133,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",119,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",122,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_set","",134,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::hash_map","",135,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",136,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",126,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","","",131,[[["self"]],["option"]]],[11,"size_hint","","",131,N],[11,"next","","",122,[[["self"]],["option"]]],[11,"size_hint","","",122,N],[11,"next","nom::lib::std::collections::hash_set","",121,[[["self"]],["option"]]],[11,"size_hint","","",121,N],[11,"next","","",125,[[["self"]],["option"]]],[11,"size_hint","","",125,N],[11,"next","","",134,[[["self"]],["option"]]],[11,"size_hint","","",134,N],[11,"next","nom::lib::std::collections::hash_map","",132,[[["self"]],["option"]]],[11,"size_hint","","",132,N],[11,"next","","",120,[[["self"]],["option"]]],[11,"size_hint","","",120,N],[11,"next","","",136,[[["self"]],["option"]]],[11,"size_hint","","",136,N],[11,"next","","",135,[[["self"]],["option"]]],[11,"size_hint","","",135,N],[11,"next","nom::lib::std::collections::hash_set","",124,[[["self"]],["option"]]],[11,"size_hint","","",124,N],[11,"next","","",119,[[["self"]],["option"]]],[11,"size_hint","","",119,N],[11,"next","","",130,[[["self"]],["option"]]],[11,"size_hint","","",130,N],[11,"next","nom::lib::std::collections::hash_map","",128,[[["self"]],["option"]]],[11,"size_hint","","",128,N],[11,"next","nom::lib::std::collections::hash_set","",127,[[["self"]],["option"]]],[11,"size_hint","","",127,N],[11,"extend","","",116,N],[11,"extend","","",116,N],[11,"extend","nom::lib::std::collections::hash_map","",117,N],[11,"extend","","",117,N],[11,"as_ref","nom::lib::std::prelude::v1::v1","",137,[[["self"]],["path"]]],[11,"as_ref","","",137,[[["self"]],["osstr"]]],[11,"build_hasher","nom::lib::std::collections::hash_map","",123,[[["self"]],["defaulthasher"]]],[11,"report","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["i32"]]],[11,"report","","",83,[[["self"]],["i32"]]],[11,"description","nom::lib::std::string","",138,[[["self"]],["str"]]],[11,"description","nom::lib::std::fmt","",139,[[["self"]],["str"]]],[11,"description","nom::lib::std::str","",140,[[["self"]],["str"]]],[11,"description","nom::lib::std::string","",141,[[["self"]],["str"]]],[11,"description","nom::lib::std::str","",142,[[["self"]],["str"]]],[11,"description","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["str"]]],[11,"cause","","",115,[[["self"]],["option",["error"]]]],[11,"description","nom::lib::std::string","",143,[[["self"]],["str"]]],[11,"index","nom::lib::std::collections::hash_map","Returns a reference to the value corresponding to the supplied key.",117,[[["self"],["q"]],["v"]]],[11,"default","","Creates an empty `HashMap<K, V, S>`, with the `Default` value for the hasher.",117,[[],["hashmap"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["osstr"]]]],[11,"default","nom::lib::std::collections::hash_map","Creates a new `DefaultHasher` using [`new`]. See its documentation for more.",126,[[],["defaulthasher"]]],[11,"default","","Constructs a new `RandomState`.",123,[[],["randomstate"]]],[11,"default","nom::lib::std::collections::hash_set","Creates an empty `HashSet<T, S>` with the `Default` value for the hasher.",116,[[],["hashset"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["cstr"]]]],[11,"len","nom::lib::std::collections::hash_map","",120,[[["self"]],["usize"]]],[11,"len","","",131,[[["self"]],["usize"]]],[11,"len","","",128,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_set","",130,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_map","",122,[[["self"]],["usize"]]],[11,"len","","",135,[[["self"]],["usize"]]],[11,"len","","",132,[[["self"]],["usize"]]],[11,"len","","",136,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::hash_set","",125,[[["self"]],["usize"]]],[11,"len","","",134,[[["self"]],["usize"]]],[11,"eq","","",116,[[["self"],["hashset"]],["bool"]]],[11,"eq","nom::lib::std::collections::hash_map","",117,[[["self"],["hashmap"]],["bool"]]],[11,"from","nom::lib::std::prelude::v1::v1","",115,[[["string"]],["box",["error"]]]],[11,"from","","",115,[[["osstring"]],["box",["osstr"]]]],[11,"from","","",115,[[["osstr"]],["box",["osstr"]]]],[11,"from","","",115,[[["string"]],["box",["error"]]]],[11,"from","","",115,[[["pathbuf"]],["box",["path"]]]],[11,"from","","",115,[[["cstr"]],["box",["cstr"]]]],[11,"from","","",118,[[["cstring"]],["vec",["u8"]]]],[11,"from","","",115,[[["cow",["str"]]],["box",["error"]]]],[11,"from","","",115,[[["path"]],["box",["path"]]]],[11,"from","","",115,[[["e"]],["box",["error"]]]],[11,"from","","",115,[[["e"]],["box",["error"]]]],[11,"from","","",115,[[["cstring"]],["box",["cstr"]]]],[11,"from","","",115,[[["str"]],["box",["error"]]]],[11,"from","","",115,[[["cow",["str"]]],["box",["error"]]]],[11,"from","","",115,[[["str"]],["box",["error"]]]],[11,"write","nom::lib::std::collections::hash_map","",126,N],[11,"finish","","",126,[[["self"]],["u64"]]],[11,"read","nom::lib::std::prelude::v1::v1","",115,N],[11,"initializer","","",115,[[["self"]],["initializer"]]],[11,"read_to_end","","",115,[[["self"],["vec"]],["result",["usize","error"]]]],[11,"read_to_string","","",115,[[["self"],["string"]],["result",["usize","error"]]]],[11,"read_exact","","",115,N],[11,"to_socket_addrs","","",137,[[["self"]],["result",["intoiter","error"]]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",82,[[["self"]],["intoiter"]]],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",83,[[["self"]],["intoiter"]]],[11,"write","nom::lib::std::hash","",144,N],[11,"finish","","",144,[[["self"]],["u64"]]],[11,"start_bound","nom::lib::std::ops","",145,[[["self"]],["bound"]]],[11,"end_bound","","",145,[[["self"]],["bound"]]],[11,"start_bound","","",52,[[["self"]],["bound"]]],[11,"end_bound","","",52,[[["self"]],["bound"]]],[11,"start_bound","","",48,[[["self"]],["bound"]]],[11,"end_bound","","",48,[[["self"]],["bound"]]],[11,"start_bound","","",146,[[["self"]],["bound"]]],[11,"end_bound","","",146,[[["self"]],["bound"]]],[11,"start_bound","","",52,[[["self"]],["bound"]]],[11,"end_bound","","",52,[[["self"]],["bound"]]],[11,"start_bound","","",76,[[["self"]],["bound"]]],[11,"end_bound","","",76,[[["self"]],["bound"]]],[11,"start_bound","","",60,[[["self"]],["bound"]]],[11,"end_bound","","",60,[[["self"]],["bound"]]],[11,"start_bound","","",145,[[["self"]],["bound"]]],[11,"end_bound","","",145,[[["self"]],["bound"]]],[11,"start_bound","","",60,[[["self"]],["bound"]]],[11,"end_bound","","",60,[[["self"]],["bound"]]],[11,"start_bound","","",48,[[["self"]],["bound"]]],[11,"end_bound","","",48,[[["self"]],["bound"]]],[11,"start_bound","","",76,[[["self"]],["bound"]]],[11,"end_bound","","",76,[[["self"]],["bound"]]],[11,"hash","","",145,N],[11,"hash","nom::lib::std::mem","",147,N],[11,"hash","nom::lib::std::ops","",146,N],[11,"hash","","",52,N],[11,"hash","","",13,N],[11,"hash","nom::lib::std::prelude::v1::v1","",83,N],[11,"hash","nom::lib::std::ops","",76,N],[11,"hash","nom::lib::std::cmp","",8,N],[11,"hash","nom::lib::std::option","",148,N],[11,"hash","nom::lib::std::fmt","",139,N],[11,"hash","nom::lib::std::ops","",48,N],[11,"hash","nom::lib::std::cmp","",7,N],[11,"hash","nom::lib::std::prelude::v1::v1","",82,N],[11,"hash","nom::lib::std::ops","",70,N],[11,"hash","","",60,N],[11,"hash","nom::lib::std::mem","",149,N],[11,"from","nom::lib::std::prelude::v1::v1","",82,[[["t"]],["option"]]],[11,"as_ref","nom::lib::std::slice","",150,N],[11,"sum","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the sum of all elements is returned.",83,[[["i"]],["result"]]],[11,"fmt","nom::lib::std::mem","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"is_empty","nom::lib::std::slice","",150,[[["self"]],["bool"]]],[11,"is_empty","","",152,[[["self"]],["bool"]]],[11,"is_empty","","",153,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",154,[[["self"]],["usize"]]],[11,"len","","",155,[[["self"]],["usize"]]],[11,"is_empty","","",155,[[["self"]],["bool"]]],[11,"len","","",156,[[["self"]],["usize"]]],[11,"is_empty","","",156,[[["self"]],["bool"]]],[11,"len","","",157,[[["self"]],["usize"]]],[11,"is_empty","","",157,[[["self"]],["bool"]]],[11,"len","","",158,[[["self"]],["usize"]]],[11,"is_empty","","",158,[[["self"]],["bool"]]],[11,"len","","",159,[[["self"]],["usize"]]],[11,"is_empty","","",159,[[["self"]],["bool"]]],[11,"len","nom::lib::std::str","",160,[[["self"]],["usize"]]],[11,"is_empty","","",160,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::slice","",161,[[["self"]],["bool"]]],[11,"len","nom::lib::std::iter","",162,[[["self"]],["usize"]]],[11,"is_empty","","",162,[[["self"]],["bool"]]],[11,"len","","",163,[[["self"]],["usize"]]],[11,"next_back","nom::lib::std::str::pattern","",164,[[["self"]],["searchstep"]]],[11,"next_match_back","","",164,[[["self"]],["option"]]],[11,"next_reject_back","","",164,[[["self"]],["option"]]],[11,"next_back","","",165,[[["self"]],["searchstep"]]],[11,"next_match_back","","",165,[[["self"]],["option"]]],[11,"next_back","","",166,[[["self"]],["searchstep"]]],[11,"next_match_back","","",166,[[["self"]],["option"]]],[11,"next_reject_back","","",166,[[["self"]],["option"]]],[11,"next_back","","",167,[[["self"]],["searchstep"]]],[11,"next_match_back","","",167,[[["self"]],["option"]]],[11,"clone","nom::lib::std::iter","",168,[[["self"]],["flatmap"]]],[11,"clone","nom::lib::std::hash","",144,[[["self"]],["siphasher"]]],[11,"clone","nom::lib::std::mem","",147,[[["self"]],["discriminant"]]],[11,"clone","nom::lib::std::str","",169,[[["self"]],["chars"]]],[11,"clone","","",170,[[["self"]],["lines"]]],[11,"clone","nom::lib::std::ops","",146,[[["self"]],["rangefull"]]],[11,"clone","nom::lib::std::str","",171,[[["self"]],["splitterminator"]]],[11,"clone","","",172,[[["self"]],["rsplitterminator"]]],[11,"clone","nom::lib::std::str::pattern","",165,[[["self"]],["charsearcher"]]],[11,"clone","nom::lib::std::iter","",163,[[["self"]],["once"]]],[11,"clone","nom::lib::std::slice","",150,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::cmp","",7,[[["self"]],["ordering"]]],[11,"clone","nom::lib::std::ops","",48,[[["self"]],["rangetoinclusive"]]],[11,"clone","nom::lib::std::slice","",173,[[["self"]],["chunks"]]],[11,"clone","nom::lib::std::str","",174,[[["self"]],["encodeutf16"]]],[11,"clone","nom::lib::std::slice","",175,[[["self"]],["split"]]],[11,"clone","nom::lib::std::str::pattern","",166,[[["self"]],["charslicesearcher"]]],[11,"clone","nom::lib::std::option","",148,[[["self"]],["noneerror"]]],[11,"clone","nom::lib::std::str","",160,[[["self"]],["bytes"]]],[11,"clone","nom::lib::std::iter","",176,[[["self"]],["repeat"]]],[11,"clone","","",154,[[["self"]],["empty"]]],[11,"clone","","",177,[[["self"]],["zip"]]],[11,"clone","","",158,[[["self"]],["fuse"]]],[11,"clone","","",178,[[["self"]],["skip"]]],[11,"clone","nom::lib::std::str","",179,[[["self"]],["rsplitn"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["result"]]],[11,"clone","nom::lib::std::str","",180,[[["self"]],["charindices"]]],[11,"clone","","",181,[[["self"]],["splitn"]]],[11,"clone","","",182,[[["self"]],["splitasciiwhitespace"]]],[11,"clone","","",183,[[["self"]],["rmatches"]]],[11,"clone","","",184,[[["self"]],["matchindices"]]],[11,"clone","nom::lib::std::iter","",185,[[["self"]],["flatten"]]],[11,"clone","","",186,[[["self"]],["chain"]]],[11,"clone","nom::lib::std::option","",187,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::str::pattern","",164,[[["self"]],["charpredicatesearcher"]]],[11,"clone","nom::lib::std::slice","",152,[[["self"]],["exactchunks"]]],[11,"clone","nom::lib::std::str","",188,[[["self"]],["rmatchindices"]]],[11,"clone","","",189,[[["self"]],["rsplit"]]],[11,"clone","nom::lib::std::ops","",76,[[["self"]],["rangeto"]]],[11,"clone","nom::lib::std::iter","",155,[[["self"]],["enumerate"]]],[11,"clone","nom::lib::std::fmt","",190,[[["self"]],["arguments"]]],[11,"clone","nom::lib::std::ops","",52,[[["self"]],["rangefrom"]]],[11,"clone","nom::lib::std::str","",140,[[["self"]],["utf8error"]]],[11,"clone","","",191,[[["self"]],["matches"]]],[11,"clone","nom::lib::std::ops","",60,[[["self"]],["range"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",82,[[["self"]],["option"]]],[11,"clone","nom::lib::std::result","",192,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::iter","",157,[[["self"]],["rev"]]],[11,"clone","","",193,[[["self"]],["peekable"]]],[11,"clone","nom::lib::std::str::pattern","",167,[[["self"]],["strsearcher"]]],[11,"clone","nom::lib::std::slice","",194,[[["self"]],["rsplit"]]],[11,"clone","nom::lib::std::fmt","",139,[[["self"]],["error"]]],[11,"clone","nom::lib::std::slice","",195,[[["self"]],["windows"]]],[11,"clone","nom::lib::std::iter","",162,[[["self"]],["inspect"]]],[11,"clone","nom::lib::std::hash","",196,[[["self"]],["buildhasherdefault"]]],[11,"clone","nom::lib::std::ops","",13,[[["self"]],["bound"]]],[11,"clone","nom::lib::std::iter","",197,[[["self"]],["cycle"]]],[11,"clone","nom::lib::std::str","",198,[[["self"]],["splitwhitespace"]]],[11,"clone","nom::lib::std::iter","",199,[[["self"]],["filter"]]],[11,"clone","nom::lib::std::str","",200,[[["self"]],["linesany"]]],[11,"clone","","",142,[[["self"]],["parseboolerror"]]],[11,"clone","nom::lib::std::iter","",201,[[["self"]],["scan"]]],[11,"clone","nom::lib::std::str","",202,[[["self"]],["split"]]],[11,"clone","nom::lib::std::iter","",203,[[["self"]],["stepby"]]],[11,"clone","nom::lib::std::ops","",70,[[["self"]],["generatorstate"]]],[11,"clone","nom::lib::std::cmp","",8,[[["self"]],["reverse"]]],[11,"clone","nom::lib::std::ops","",145,[[["self"]],["rangeinclusive"]]],[11,"clone","nom::lib::std::iter","",156,[[["self"]],["map"]]],[11,"clone","nom::lib::std::str::pattern","",87,[[["self"]],["searchstep"]]],[11,"clone","nom::lib::std::iter","",204,[[["self"]],["repeatwith"]]],[11,"clone","","",159,[[["self"]],["cloned"]]],[11,"clone","nom::lib::std::option","",205,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::result","",206,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::iter","",207,[[["self"]],["take"]]],[11,"clone","nom::lib::std::mem","",149,[[["self"]],["manuallydrop"]]],[11,"clone","nom::lib::std::iter","",208,[[["self"]],["takewhile"]]],[11,"clone","","",209,[[["self"]],["skipwhile"]]],[11,"clone","","",210,[[["self"]],["filtermap"]]],[11,"fmt","","",210,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",205,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",13,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",148,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",194,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",168,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::hash","",196,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",166,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",153,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",28,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",152,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",204,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",211,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",161,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",189,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::cmp","",8,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",176,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",52,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",180,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",171,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",188,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",60,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",169,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",179,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",167,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",212,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",192,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",199,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::hash","",144,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",174,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",182,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",187,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",197,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::option","",213,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",48,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",177,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",76,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",164,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",172,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",70,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",214,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",158,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",165,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",215,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",183,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str::pattern","",87,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",193,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",201,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",186,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",82,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",200,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",216,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",157,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",203,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",154,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",202,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",145,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",160,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",163,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",147,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",173,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",195,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",178,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",162,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::ops","",146,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",150,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",191,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",159,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",217,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",207,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",184,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",149,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",156,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",218,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",198,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",181,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",185,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",208,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::result","",206,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::slice","",175,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",219,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",209,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::cmp","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::iter","",155,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",170,[[["self"],["formatter"]],["result",["error"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["option",["ordering"]]]],[11,"lt","","",83,[[["self"],["result"]],["bool"]]],[11,"le","","",83,[[["self"],["result"]],["bool"]]],[11,"gt","","",83,[[["self"],["result"]],["bool"]]],[11,"ge","","",83,[[["self"],["result"]],["bool"]]],[11,"partial_cmp","nom::lib::std::ops","",70,[[["self"],["generatorstate"]],["option",["ordering"]]]],[11,"lt","","",70,[[["self"],["generatorstate"]],["bool"]]],[11,"le","","",70,[[["self"],["generatorstate"]],["bool"]]],[11,"gt","","",70,[[["self"],["generatorstate"]],["bool"]]],[11,"ge","","",70,[[["self"],["generatorstate"]],["bool"]]],[11,"partial_cmp","nom::lib::std::mem","",149,[[["self"],["manuallydrop"]],["option",["ordering"]]]],[11,"lt","","",149,[[["self"],["manuallydrop"]],["bool"]]],[11,"le","","",149,[[["self"],["manuallydrop"]],["bool"]]],[11,"gt","","",149,[[["self"],["manuallydrop"]],["bool"]]],[11,"ge","","",149,[[["self"],["manuallydrop"]],["bool"]]],[11,"partial_cmp","nom::lib::std::fmt","",139,[[["self"],["error"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["reverse"]],["bool"]]],[11,"le","","",8,[[["self"],["reverse"]],["bool"]]],[11,"ge","","",8,[[["self"],["reverse"]],["bool"]]],[11,"gt","","",8,[[["self"],["reverse"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["ordering"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::option","",148,[[["self"],["noneerror"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["option",["ordering"]]]],[11,"lt","","",82,[[["self"],["option"]],["bool"]]],[11,"le","","",82,[[["self"],["option"]],["bool"]]],[11,"gt","","",82,[[["self"],["option"]],["bool"]]],[11,"ge","","",82,[[["self"],["option"]],["bool"]]],[11,"cmp","nom::lib::std::option","",148,[[["self"],["noneerror"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["ordering"]]],[11,"cmp","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["ordering"]]],[11,"cmp","nom::lib::std::mem","",149,[[["self"],["manuallydrop"]],["ordering"]]],[11,"cmp","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["ordering"]]],[11,"cmp","nom::lib::std::fmt","",139,[[["self"],["error"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",83,[[["self"],["result"]],["ordering"]]],[11,"cmp","nom::lib::std::ops","",70,[[["self"],["generatorstate"]],["ordering"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",82,[[["i"]],["option"]]],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, a container with the values of each `Result` is returned.",83,[[["i"]],["result"]]],[11,"get","nom::lib::std::ops","",76,N],[11,"get_mut","","",76,N],[11,"get_unchecked","","",76,N],[11,"get_unchecked_mut","","",76,N],[11,"index","","",76,N],[11,"index_mut","","",76,N],[11,"get","","",60,[[["self"],["str"]],["option"]]],[11,"get_mut","","",60,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",60,N],[11,"get_unchecked_mut","","",60,N],[11,"index","","",60,N],[11,"index_mut","","",60,N],[11,"get","","",145,N],[11,"get_mut","","",145,N],[11,"get_unchecked","","",145,N],[11,"get_unchecked_mut","","",145,N],[11,"index","","",145,N],[11,"index_mut","","",145,N],[11,"get","","",60,N],[11,"get_mut","","",60,N],[11,"get_unchecked","","",60,N],[11,"get_unchecked_mut","","",60,N],[11,"index","","",60,N],[11,"index_mut","","",60,N],[11,"get","","",48,N],[11,"get_mut","","",48,N],[11,"get_unchecked","","",48,N],[11,"get_unchecked_mut","","",48,N],[11,"index","","",48,N],[11,"index_mut","","",48,N],[11,"get","","",52,[[["self"],["str"]],["option"]]],[11,"get_mut","","",52,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",52,N],[11,"get_unchecked_mut","","",52,N],[11,"index","","",52,N],[11,"index_mut","","",52,N],[11,"get","","",146,[[["self"],["str"]],["option"]]],[11,"get_mut","","",146,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",146,N],[11,"get_unchecked_mut","","",146,N],[11,"index","","",146,N],[11,"index_mut","","",146,N],[11,"get","","",48,[[["self"],["str"]],["option"]]],[11,"get_mut","","",48,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",48,N],[11,"get_unchecked_mut","","",48,N],[11,"index","","",48,N],[11,"index_mut","","",48,N],[11,"get","","",76,[[["self"],["str"]],["option"]]],[11,"get_mut","","",76,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",76,N],[11,"get_unchecked_mut","","",76,N],[11,"index","","",76,N],[11,"index_mut","","",76,N],[11,"get","","",52,N],[11,"get_mut","","",52,N],[11,"get_unchecked","","",52,N],[11,"get_unchecked_mut","","",52,N],[11,"index","","",52,N],[11,"index_mut","","",52,N],[11,"get","","",146,N],[11,"get_mut","","",146,N],[11,"get_unchecked","","",146,N],[11,"get_unchecked_mut","","",146,N],[11,"index","","",146,N],[11,"index_mut","","",146,N],[11,"get","","",145,[[["self"],["str"]],["option"]]],[11,"get_mut","","",145,[[["self"],["str"]],["option"]]],[11,"get_unchecked","","",145,N],[11,"get_unchecked_mut","","",145,N],[11,"index","","",145,N],[11,"index_mut","","",145,N],[11,"write_str","nom::lib::std::fmt","",220,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",220,[[["self"],["char"]],["result",["error"]]]],[11,"write_fmt","","",220,[[["self"],["arguments"]],["result",["error"]]]],[11,"eq","nom::lib::std::hash","",196,[[["self"],["buildhasherdefault"]],["bool"]]],[11,"eq","nom::lib::std::option","",148,[[["self"],["noneerror"]],["bool"]]],[11,"eq","nom::lib::std::mem","",149,[[["self"],["manuallydrop"]],["bool"]]],[11,"ne","","",149,[[["self"],["manuallydrop"]],["bool"]]],[11,"eq","nom::lib::std::str","",140,[[["self"],["utf8error"]],["bool"]]],[11,"ne","","",140,[[["self"],["utf8error"]],["bool"]]],[11,"eq","nom::lib::std::ops","",60,[[["self"],["range"]],["bool"]]],[11,"ne","","",60,[[["self"],["range"]],["bool"]]],[11,"eq","nom::lib::std::fmt","",139,[[["self"],["error"]],["bool"]]],[11,"eq","nom::lib::std::ops","",52,[[["self"],["rangefrom"]],["bool"]]],[11,"ne","","",52,[[["self"],["rangefrom"]],["bool"]]],[11,"eq","nom::lib::std::mem","",147,[[["self"],["discriminant"]],["bool"]]],[11,"eq","nom::lib::std::ops","",13,[[["self"],["bound"]],["bool"]]],[11,"ne","","",13,[[["self"],["bound"]],["bool"]]],[11,"eq","","",48,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"ne","","",48,[[["self"],["rangetoinclusive"]],["bool"]]],[11,"eq","","",76,[[["self"],["rangeto"]],["bool"]]],[11,"ne","","",76,[[["self"],["rangeto"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",82,[[["self"],["option"]],["bool"]]],[11,"ne","","",82,[[["self"],["option"]],["bool"]]],[11,"eq","","",83,[[["self"],["result"]],["bool"]]],[11,"ne","","",83,[[["self"],["result"]],["bool"]]],[11,"eq","nom::lib::std::cmp","",7,[[["self"],["ordering"]],["bool"]]],[11,"eq","nom::lib::std::str","",142,[[["self"],["parseboolerror"]],["bool"]]],[11,"ne","","",142,[[["self"],["parseboolerror"]],["bool"]]],[11,"eq","nom::lib::std::ops","",145,[[["self"],["rangeinclusive"]],["bool"]]],[11,"eq","nom::lib::std::cmp","",8,[[["self"],["reverse"]],["bool"]]],[11,"ne","","",8,[[["self"],["reverse"]],["bool"]]],[11,"eq","nom::lib::std::ops","",70,[[["self"],["generatorstate"]],["bool"]]],[11,"ne","","",70,[[["self"],["generatorstate"]],["bool"]]],[11,"eq","","",146,[[["self"],["rangefull"]],["bool"]]],[11,"eq","nom::lib::std::str::pattern","",87,[[["self"],["searchstep"]],["bool"]]],[11,"ne","","",87,[[["self"],["searchstep"]],["bool"]]],[11,"into_raw","nom::lib::std::mem","",151,N],[11,"poll","","",151,N],[11,"drop","","",151,N],[11,"haystack","nom::lib::std::str::pattern","",164,[[["self"]],["str"]]],[11,"next","","",164,[[["self"]],["searchstep"]]],[11,"next_match","","",164,[[["self"]],["option"]]],[11,"next_reject","","",164,[[["self"]],["option"]]],[11,"haystack","","",165,[[["self"]],["str"]]],[11,"next","","",165,[[["self"]],["searchstep"]]],[11,"next_match","","",165,[[["self"]],["option"]]],[11,"haystack","","",167,[[["self"]],["str"]]],[11,"next","","",167,[[["self"]],["searchstep"]]],[11,"next_match","","",167,[[["self"]],["option"]]],[11,"haystack","","",166,[[["self"]],["str"]]],[11,"next","","",166,[[["self"]],["searchstep"]]],[11,"next_match","","",166,[[["self"]],["option"]]],[11,"next_reject","","",166,[[["self"]],["option"]]],[11,"poll","nom::lib::std::mem","",151,[[["pinmut",["pinmut"]],["context"]],["poll"]]],[11,"into_result","nom::lib::std::prelude::v1::v1","",83,[[["self"]],["result"]]],[11,"from_ok","","",83,[[["t"]],["result"]]],[11,"from_error","","",83,[[["e"]],["result"]]],[11,"into_result","","",82,[[["self"]],["result",["noneerror"]]]],[11,"from_ok","","",82,[[["t"]],["option"]]],[11,"from_error","","",82,[[["noneerror"]],["option"]]],[11,"default","nom::lib::std::cmp","",8,[[],["reverse"]]],[11,"default","nom::lib::std::iter","",154,[[],["empty"]]],[11,"default","nom::lib::std::mem","",149,[[],["manuallydrop"]]],[11,"default","nom::lib::std::hash","",144,[[],["siphasher"]]],[11,"default","","",196,[[],["buildhasherdefault"]]],[11,"default","nom::lib::std::fmt","",139,[[],["error"]]],[11,"default","nom::lib::std::prelude::v1::v1","Returns [`None`].",82,[[],["option"]]],[11,"deref_mut","nom::lib::std::mem","",149,N],[11,"deref_mut","","",151,[[["self"]],["t"]]],[11,"product","nom::lib::std::prelude::v1::v1","Takes each element in the `Iterator`: if it is an `Err`, no further elements are taken, and the `Err` is returned. Should no `Err` occur, the product of all elements is returned.",83,[[["i"]],["result"]]],[11,"deref","nom::lib::std::mem","",149,N],[11,"deref","","",151,[[["self"]],["t"]]],[11,"build_hasher","nom::lib::std::hash","",196,[[["self"]],["h"]]],[11,"fmt","nom::lib::std::str","",140,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",190,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::mem","",151,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::str","",142,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::fmt","",139,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","nom::lib::std::slice","",219,[[["self"]],["option"]]],[11,"size_hint","","",219,N],[11,"next","nom::lib::std::iter","",177,[[["self"]],["option"]]],[11,"size_hint","","",177,N],[11,"nth","","",177,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::str","",160,[[["self"]],["option",["u8"]]]],[11,"size_hint","","",160,N],[11,"count","","",160,[[["self"]],["usize"]]],[11,"last","","",160,[[["self"]],["option"]]],[11,"nth","","",160,[[["self"],["usize"]],["option"]]],[11,"all","","",160,[[["self"],["f"]],["bool"]]],[11,"any","","",160,[[["self"],["f"]],["bool"]]],[11,"find","","",160,[[["self"],["p"]],["option"]]],[11,"position","","",160,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",160,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::iter","",159,[[["self"]],["option"]]],[11,"size_hint","","",159,N],[11,"try_fold","","",159,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",159,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","","",158,[[["self"]],["option"]]],[11,"nth","","",158,[[["self"],["usize"]],["option"]]],[11,"last","","",158,[[["self"]],["option"]]],[11,"count","","",158,[[["self"]],["usize"]]],[11,"size_hint","","",158,N],[11,"try_fold","","",158,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",158,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",171,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",178,[[["self"]],["option"]]],[11,"nth","","",178,[[["self"],["usize"]],["option"]]],[11,"count","","",178,[[["self"]],["usize"]]],[11,"last","","",178,[[["self"]],["option"]]],[11,"size_hint","","",178,N],[11,"try_fold","","",178,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",178,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::slice","",215,[[["self"]],["option"]]],[11,"size_hint","","",215,N],[11,"next","nom::lib::std::iter","",203,[[["self"]],["option"]]],[11,"size_hint","","",203,N],[11,"nth","","",203,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::slice","",152,[[["self"]],["option"]]],[11,"size_hint","","",152,N],[11,"count","","",152,[[["self"]],["usize"]]],[11,"nth","","",152,[[["self"],["usize"]],["option"]]],[11,"last","","",152,[[["self"]],["option"]]],[11,"next","","",153,[[["self"]],["option"]]],[11,"size_hint","","",153,N],[11,"count","","",153,[[["self"]],["usize"]]],[11,"nth","","",153,[[["self"],["usize"]],["option"]]],[11,"last","","",153,[[["self"]],["option"]]],[11,"next","nom::lib::std::result","",214,[[["self"]],["option"]]],[11,"size_hint","","",214,N],[11,"next","nom::lib::std::iter","",168,[[["self"]],["option"]]],[11,"size_hint","","",168,N],[11,"try_fold","","",168,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",168,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",183,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",157,[[["self"]],["option"]]],[11,"size_hint","","",157,N],[11,"try_fold","","",157,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",157,[[["self"],["acc"],["f"]],["acc"]]],[11,"find","","",157,[[["self"],["p"]],["option"]]],[11,"rposition","","",157,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::slice","",195,[[["self"]],["option"]]],[11,"size_hint","","",195,N],[11,"count","","",195,[[["self"]],["usize"]]],[11,"nth","","",195,[[["self"],["usize"]],["option"]]],[11,"last","","",195,[[["self"]],["option"]]],[11,"next","","",211,[[["self"]],["option"]]],[11,"size_hint","","",211,N],[11,"next","","",161,[[["self"]],["option"]]],[11,"size_hint","","",161,N],[11,"count","","",161,[[["self"]],["usize"]]],[11,"nth","","",161,[[["self"],["usize"]],["option"]]],[11,"last","","",161,[[["self"]],["option"]]],[11,"try_fold","","",161,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",161,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",161,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",161,[[["self"],["p"]],["option",["usize"]]]],[11,"next","nom::lib::std::option","",187,[[["self"]],["option"]]],[11,"size_hint","","",187,N],[11,"next","nom::lib::std::str","",198,[[["self"]],["option",["str"]]]],[11,"size_hint","","",198,N],[11,"next","nom::lib::std::slice","",217,[[["self"]],["option"]]],[11,"size_hint","","",217,N],[11,"count","","",217,[[["self"]],["usize"]]],[11,"nth","","",217,[[["self"],["usize"]],["option"]]],[11,"last","","",217,[[["self"]],["option"]]],[11,"next","nom::lib::std::str","",180,[[["self"]],["option"]]],[11,"count","","",180,[[["self"]],["usize"]]],[11,"size_hint","","",180,N],[11,"last","","",180,[[["self"]],["option"]]],[11,"next","","",189,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",197,[[["self"]],["option"]]],[11,"size_hint","","",197,N],[11,"next","","",163,[[["self"]],["option"]]],[11,"size_hint","","",163,N],[11,"next","nom::lib::std::str","",188,[[["self"]],["option"]]],[11,"next","nom::lib::std::slice","",150,[[["self"]],["option"]]],[11,"size_hint","","",150,N],[11,"count","","",150,[[["self"]],["usize"]]],[11,"nth","","",150,[[["self"],["usize"]],["option"]]],[11,"last","","",150,[[["self"]],["option"]]],[11,"try_fold","","",150,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",150,[[["self"],["acc"],["fold"]],["acc"]]],[11,"position","","",150,[[["self"],["p"]],["option",["usize"]]]],[11,"rposition","","",150,[[["self"],["p"]],["option",["usize"]]]],[11,"next","","",216,[[["self"]],["option"]]],[11,"size_hint","","",216,N],[11,"next","nom::lib::std::str","",181,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",176,[[["self"]],["option"]]],[11,"size_hint","","",176,N],[11,"next","nom::lib::std::slice","",173,[[["self"]],["option"]]],[11,"size_hint","","",173,N],[11,"count","","",173,[[["self"]],["usize"]]],[11,"nth","","",173,[[["self"],["usize"]],["option"]]],[11,"last","","",173,[[["self"]],["option"]]],[11,"next","nom::lib::std::result","",206,[[["self"]],["option"]]],[11,"size_hint","","",206,N],[11,"next","nom::lib::std::iter","",201,[[["self"]],["option"]]],[11,"size_hint","","",201,N],[11,"try_fold","","",201,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",199,[[["self"]],["option"]]],[11,"size_hint","","",199,N],[11,"count","","",199,[[["self"]],["usize"]]],[11,"try_fold","","",199,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",199,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::ops","",60,[[["self"]],["option"]]],[11,"size_hint","","",60,N],[11,"nth","","",60,[[["self"],["usize"]],["option"]]],[11,"last","","",60,[[["self"]],["option"]]],[11,"min","","",60,[[["self"]],["option"]]],[11,"max","","",60,[[["self"]],["option"]]],[11,"next","nom::lib::std::str","",172,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",208,[[["self"]],["option"]]],[11,"size_hint","","",208,N],[11,"try_fold","","",208,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","nom::lib::std::slice","",212,[[["self"]],["option"]]],[11,"size_hint","","",212,N],[11,"next","nom::lib::std::str","",174,[[["self"]],["option",["u16"]]]],[11,"size_hint","","",174,N],[11,"next","","",169,[[["self"]],["option",["char"]]]],[11,"count","","",169,[[["self"]],["usize"]]],[11,"size_hint","","",169,N],[11,"last","","",169,[[["self"]],["option",["char"]]]],[11,"next","nom::lib::std::result","",192,[[["self"]],["option"]]],[11,"size_hint","","",192,N],[11,"next","nom::lib::std::option","",205,[[["self"]],["option"]]],[11,"size_hint","","",205,N],[11,"next","","",213,[[["self"]],["option"]]],[11,"size_hint","","",213,N],[11,"next","nom::lib::std::str","",191,[[["self"]],["option",["str"]]]],[11,"next","","",179,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::slice","",175,[[["self"]],["option"]]],[11,"size_hint","","",175,N],[11,"next","nom::lib::std::iter","Overflow Behavior",155,[[["self"]],["option"]]],[11,"size_hint","","",155,N],[11,"nth","","",155,[[["self"],["usize"]],["option"]]],[11,"count","","",155,[[["self"]],["usize"]]],[11,"try_fold","","",155,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",155,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::ops","",145,[[["self"]],["option"]]],[11,"size_hint","","",145,N],[11,"nth","","",145,[[["self"],["usize"]],["option"]]],[11,"last","","",145,[[["self"]],["option"]]],[11,"min","","",145,[[["self"]],["option"]]],[11,"max","","",145,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",186,[[["self"]],["option"]]],[11,"count","","",186,[[["self"]],["usize"]]],[11,"try_fold","","",186,[[["self"],["acc"],["f"]],["r"]]],[11,"fold","","",186,[[["self"],["acc"],["f"]],["acc"]]],[11,"nth","","",186,[[["self"],["usize"]],["option"]]],[11,"find","","",186,[[["self"],["p"]],["option"]]],[11,"last","","",186,[[["self"]],["option"]]],[11,"size_hint","","",186,N],[11,"next","nom::lib::std::str","",184,[[["self"]],["option"]]],[11,"next","nom::lib::std::iter","",185,[[["self"]],["option"]]],[11,"size_hint","","",185,N],[11,"try_fold","","",185,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",185,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",202,[[["self"]],["option",["str"]]]],[11,"next","nom::lib::std::iter","",162,[[["self"]],["option"]]],[11,"size_hint","","",162,N],[11,"try_fold","","",162,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",162,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",156,[[["self"]],["option"]]],[11,"size_hint","","",156,N],[11,"try_fold","","",156,[[["self"],["acc"],["g"]],["r"]]],[11,"fold","","",156,[[["self"],["acc"],["g"]],["acc"]]],[11,"next","","",154,[[["self"]],["option"]]],[11,"size_hint","","",154,N],[11,"next","nom::lib::std::str","",200,[[["self"]],["option",["str"]]]],[11,"size_hint","","",200,N],[11,"next","nom::lib::std::iter","",158,[[["self"]],["option"]]],[11,"nth","","",158,[[["self"],["usize"]],["option"]]],[11,"last","","",158,[[["self"]],["option"]]],[11,"count","","",158,[[["self"]],["usize"]]],[11,"size_hint","","",158,N],[11,"try_fold","","",158,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",158,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::str","",182,[[["self"]],["option",["str"]]]],[11,"size_hint","","",182,N],[11,"next","nom::lib::std::slice","",218,[[["self"]],["option"]]],[11,"size_hint","","",218,N],[11,"next","nom::lib::std::iter","",193,[[["self"]],["option"]]],[11,"count","","",193,[[["self"]],["usize"]]],[11,"nth","","",193,[[["self"],["usize"]],["option"]]],[11,"last","","",193,[[["self"]],["option"]]],[11,"size_hint","","",193,N],[11,"try_fold","","",193,[[["self"],["b"],["f"]],["r"]]],[11,"fold","","",193,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","","",210,[[["self"]],["option"]]],[11,"size_hint","","",210,N],[11,"try_fold","","",210,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",210,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::slice","",194,[[["self"]],["option"]]],[11,"size_hint","","",194,N],[11,"next","nom::lib::std::iter","",209,[[["self"]],["option"]]],[11,"size_hint","","",209,N],[11,"try_fold","","",209,[[["self"],["acc"],["fold"]],["r"]]],[11,"fold","","",209,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next","nom::lib::std::ops","",52,[[["self"]],["option"]]],[11,"size_hint","","",52,N],[11,"nth","","",52,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::str","",170,[[["self"]],["option",["str"]]]],[11,"size_hint","","",170,N],[11,"next","nom::lib::std::iter","",207,[[["self"]],["option"]]],[11,"nth","","",207,[[["self"],["usize"]],["option"]]],[11,"size_hint","","",207,N],[11,"try_fold","","",207,[[["self"],["acc"],["fold"]],["r"]]],[11,"next","","",204,[[["self"]],["option"]]],[11,"size_hint","","",204,N],[11,"next_back","nom::lib::std::str","",172,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",156,[[["self"]],["option"]]],[11,"try_rfold","","",156,[[["self"],["acc"],["g"]],["r"]]],[11,"rfold","","",156,[[["self"],["acc"],["g"]],["acc"]]],[11,"next_back","","",162,[[["self"]],["option"]]],[11,"try_rfold","","",162,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",162,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::ops","",60,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",202,[[["self"]],["option",["str"]]]],[11,"next_back","","",189,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",155,[[["self"]],["option"]]],[11,"try_rfold","","",155,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",155,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",188,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",194,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::option","",187,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",186,[[["self"]],["option"]]],[11,"try_rfold","","",186,[[["self"],["acc"],["f"]],["r"]]],[11,"rfold","","",186,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","","",163,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",180,[[["self"]],["option"]]],[11,"next_back","","",160,[[["self"]],["option",["u8"]]]],[11,"rfind","","",160,[[["self"],["p"]],["option"]]],[11,"next_back","nom::lib::std::slice","",217,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",185,[[["self"]],["option"]]],[11,"try_rfold","","",185,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",185,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::slice","",161,[[["self"]],["option"]]],[11,"try_rfold","","",161,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",161,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",182,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",157,[[["self"]],["option"]]],[11,"try_rfold","","",157,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",157,[[["self"],["acc"],["f"]],["acc"]]],[11,"rfind","","",157,[[["self"],["p"]],["option"]]],[11,"next_back","nom::lib::std::slice","",150,[[["self"]],["option"]]],[11,"try_rfold","","",150,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",150,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::iter","",168,[[["self"]],["option"]]],[11,"try_rfold","","",168,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",168,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::result","",214,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",199,[[["self"]],["option"]]],[11,"try_rfold","","",199,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",199,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::result","",206,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",210,[[["self"]],["option"]]],[11,"try_rfold","","",210,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",210,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","nom::lib::std::str","",184,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",175,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",177,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",198,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::ops","",145,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",159,[[["self"]],["option"]]],[11,"try_rfold","","",159,[[["self"],["b"],["f"]],["r"]]],[11,"rfold","","",159,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","nom::lib::std::slice","",173,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",158,[[["self"]],["option"]]],[11,"try_rfold","","",158,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",158,[[["self"],["acc"],["fold"]],["acc"]]],[11,"next_back","","",176,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",171,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::option","",205,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",191,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",154,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",152,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::option","",213,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",200,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::result","",192,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::slice","",195,[[["self"]],["option"]]],[11,"next_back","","",216,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::iter","",178,[[["self"]],["option"]]],[11,"try_rfold","","",178,[[["self"],["acc"],["fold"]],["r"]]],[11,"next_back","nom::lib::std::slice","",212,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",170,[[["self"]],["option",["str"]]]],[11,"next_back","","",169,[[["self"]],["option",["char"]]]],[11,"next_back","nom::lib::std::slice","",153,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::str","",183,[[["self"]],["option",["str"]]]],[11,"next_back","nom::lib::std::iter","",158,[[["self"]],["option"]]],[11,"try_rfold","","",158,[[["self"],["acc"],["fold"]],["r"]]],[11,"rfold","","",158,[[["self"],["acc"],["fold"]],["acc"]]],[11,"as_mut","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["t"]]],[11,"as_mut","","",118,N],[11,"as_mut","","",118,[[["self"]],["vec"]]],[11,"from_iter","","",118,[[["i"]],["vec"]]],[11,"from_iter","","",137,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections","",221,[[["i"]],["linkedlist"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",137,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections","",222,[[["i"]],["binaryheap"]]],[11,"from_iter","nom::lib::std::collections::vec_deque","",223,[[["t"]],["vecdeque"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",137,[[["i"]],["string"]]],[11,"from_iter","","",137,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections","",224,[[["t"]],["btreemap"]]],[11,"from_iter","nom::lib::std::prelude::v1::v1","",137,[[["i"]],["string"]]],[11,"from_iter","nom::lib::std::collections::btree_set","",225,[[["i"]],["btreeset"]]],[11,"from_str","nom::lib::std::prelude::v1::v1","",137,[[["str"]],["result",["string","parseerror"]]]],[11,"cmp","","",137,[[["self"],["string"]],["ordering"]]],[11,"cmp","nom::lib::std::collections::vec_deque","",223,[[["self"],["vecdeque"]],["ordering"]]],[11,"cmp","nom::lib::std::collections::btree_set","",225,[[["self"],["btreeset"]],["ordering"]]],[11,"cmp","nom::lib::std::prelude::v1::v1","",115,[[["self"],["box"]],["ordering"]]],[11,"cmp","","",118,[[["self"],["vec"]],["ordering"]]],[11,"cmp","nom::lib::std::collections","",221,[[["self"],["linkedlist"]],["ordering"]]],[11,"cmp","","",224,[[["self"],["btreemap"]],["ordering"]]],[11,"into_iter","nom::lib::std::collections::vec_deque","Consumes the `VecDeque` into a front-to-back iterator yielding elements by value.",223,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::prelude::v1::v1","Creates a consuming iterator, that is, one that moves each value out of the vector (from start to end). The vector cannot be used after calling this.",118,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections::btree_set","Gets an iterator for moving out the `BTreeSet`'s contents.",225,[[["self"]],["intoiter"]]],[11,"into_iter","nom::lib::std::collections","Consumes the list into an iterator yielding elements by value.",221,[[["self"]],["intoiter"]]],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the binary heap in arbitrary order. The binary heap cannot be used after calling this.",222,[[["self"]],["intoiter"]]],[11,"into_iter","","",224,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::binary_heap","",226,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections","",12,[[["self"]],["collectionallocerr"]]],[11,"clone","nom::lib::std::collections::btree_map","",227,[[["self"]],["keys"]]],[11,"clone","nom::lib::std::collections","",224,[[["self"]],["btreemap"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["box",["str"]]]],[11,"clone","nom::lib::std::collections::btree_set","",228,[[["self"]],["union"]]],[11,"clone","nom::lib::std::collections::vec_deque","",223,[[["self"]],["vecdeque"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",137,[[["self"]],["string"]]],[11,"clone_from","","",137,N],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",115,[[["self"]],["box"]]],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",115,N],[11,"clone","nom::lib::std::collections::linked_list","",229,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::btree_set","",230,[[["self"]],["iter"]]],[11,"clone","","",231,[[["self"]],["range"]]],[11,"clone","nom::lib::std::collections","",222,[[["self"]],["binaryheap"]]],[11,"clone_from","","",222,N],[11,"clone","nom::lib::std::collections::btree_map","",232,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::linked_list","",233,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::btree_set","",225,[[["self"]],["btreeset"]]],[11,"clone","","",234,[[["self"]],["symmetricdifference"]]],[11,"clone","nom::lib::std::collections::btree_map","",235,[[["self"]],["range"]]],[11,"clone","nom::lib::std::string","",143,[[["self"]],["parseerror"]]],[11,"clone","nom::lib::std::collections::vec_deque","",236,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::btree_set","",237,[[["self"]],["intersection"]]],[11,"clone","nom::lib::std::vec","",238,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::prelude::v1::v1","",118,[[["self"]],["vec"]]],[11,"clone_from","","",118,N],[11,"clone","","",115,[[["self"]],["box"]]],[11,"clone","nom::lib::std::collections::vec_deque","",239,[[["self"]],["iter"]]],[11,"clone","nom::lib::std::collections::binary_heap","",240,[[["self"]],["intoiter"]]],[11,"clone","nom::lib::std::collections::btree_map","",241,[[["self"]],["values"]]],[11,"clone","nom::lib::std::collections","",221,[[["self"]],["linkedlist"]]],[11,"clone","nom::lib::std::collections::btree_set","",242,[[["self"]],["difference"]]],[11,"fmt","nom::lib::std::collections::linked_list","",229,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",232,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",243,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",244,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",231,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",237,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",245,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",234,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",246,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",247,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",248,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",226,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",118,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",249,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",235,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",250,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",236,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::boxed","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",252,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",225,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",240,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",227,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",241,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",238,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",253,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::vec_deque","",223,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",239,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",254,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",255,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",224,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",256,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",230,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",221,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",222,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::binary_heap","",257,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",242,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",258,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",259,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::vec","",260,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::linked_list","",233,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_map","",14,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::collections::btree_set","",228,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","nom::lib::std::string","",258,[[["self"]],["option",["char"]]]],[11,"size_hint","","",258,N],[11,"next","nom::lib::std::collections::btree_set","",230,[[["self"]],["option"]]],[11,"size_hint","","",230,N],[11,"next","nom::lib::std::collections::btree_map","",245,[[["self"]],["option"]]],[11,"size_hint","","",245,N],[11,"next","nom::lib::std::collections::linked_list","",233,[[["self"]],["option"]]],[11,"size_hint","","",233,N],[11,"next","nom::lib::std::collections::btree_set","",231,[[["self"]],["option"]]],[11,"next","","",228,[[["self"]],["option"]]],[11,"size_hint","","",228,N],[11,"next","nom::lib::std::collections::vec_deque","",236,[[["self"]],["option"]]],[11,"size_hint","","",236,N],[11,"next","nom::lib::std::vec","",256,[[["self"]],["option"]]],[11,"size_hint","","",256,N],[11,"next","nom::lib::std::collections::btree_map","",227,[[["self"]],["option"]]],[11,"size_hint","","",227,N],[11,"next","nom::lib::std::collections::vec_deque","",239,[[["self"]],["option"]]],[11,"size_hint","","",239,N],[11,"fold","","",239,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","nom::lib::std::collections::linked_list","",246,[[["self"]],["option"]]],[11,"size_hint","","",246,N],[11,"next","nom::lib::std::collections::btree_set","",234,[[["self"]],["option"]]],[11,"size_hint","","",234,N],[11,"next","nom::lib::std::collections::btree_map","",241,[[["self"]],["option"]]],[11,"size_hint","","",241,N],[11,"next","nom::lib::std::collections::linked_list","",253,[[["self"]],["option"]]],[11,"size_hint","","",253,N],[11,"next","nom::lib::std::vec","",238,[[["self"]],["option"]]],[11,"size_hint","","",238,N],[11,"count","","",238,[[["self"]],["usize"]]],[11,"next","nom::lib::std::collections::vec_deque","",248,[[["self"]],["option"]]],[11,"size_hint","","",248,N],[11,"fold","","",248,[[["self"],["acc"],["f"]],["acc"]]],[11,"next","nom::lib::std::collections::binary_heap","",240,[[["self"]],["option"]]],[11,"size_hint","","",240,N],[11,"next","nom::lib::std::collections::btree_map","",250,[[["self"]],["option"]]],[11,"size_hint","","",250,N],[11,"next","nom::lib::std::vec","",243,[[["self"]],["option"]]],[11,"size_hint","","",243,N],[11,"next","nom::lib::std::collections::btree_map","",259,[[["self"]],["option"]]],[11,"size_hint","","",259,N],[11,"next","","",235,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::btree_set","",242,[[["self"]],["option"]]],[11,"size_hint","","",242,N],[11,"next","","",237,[[["self"]],["option"]]],[11,"size_hint","","",237,N],[11,"next","nom::lib::std::collections::vec_deque","",249,[[["self"]],["option"]]],[11,"size_hint","","",249,N],[11,"next","nom::lib::std::collections::btree_map","",244,[[["self"]],["option"]]],[11,"next","nom::lib::std::collections::btree_set","",247,[[["self"]],["option"]]],[11,"size_hint","","",247,N],[11,"next","nom::lib::std::collections::binary_heap","",226,[[["self"]],["option"]]],[11,"size_hint","","",226,N],[11,"next","","",252,[[["self"]],["option"]]],[11,"size_hint","","",252,N],[11,"next","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["option"]]],[11,"size_hint","","",115,N],[11,"nth","","",115,[[["self"],["usize"]],["option"]]],[11,"next","nom::lib::std::vec","",260,[[["self"]],["option"]]],[11,"size_hint","","",260,N],[11,"next","nom::lib::std::collections::linked_list","",229,[[["self"]],["option"]]],[11,"size_hint","","",229,N],[11,"next","nom::lib::std::collections::btree_map","",232,[[["self"]],["option"]]],[11,"size_hint","","",232,N],[11,"next_back","nom::lib::std::collections::vec_deque","",249,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",241,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::vec_deque","",248,[[["self"]],["option"]]],[11,"rfold","","",248,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","","",236,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",259,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",240,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",244,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",246,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",226,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",245,[[["self"]],["option"]]],[11,"next_back","","",232,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",238,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_set","",231,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::string","",258,[[["self"]],["option",["char"]]]],[11,"next_back","nom::lib::std::collections::vec_deque","",239,[[["self"]],["option"]]],[11,"rfold","","",239,[[["self"],["acc"],["f"]],["acc"]]],[11,"next_back","nom::lib::std::collections::btree_map","",235,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::binary_heap","",252,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",250,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",256,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::vec","",243,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",233,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_set","",247,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_map","",227,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::btree_set","",230,[[["self"]],["option"]]],[11,"next_back","nom::lib::std::collections::linked_list","",229,[[["self"]],["option"]]],[11,"spawn_obj","nom::lib::std::prelude::v1::v1","",115,[[["self"],["futureobj"]],["result",["spawnobjerror"]]]],[11,"status","","",115,[[["self"]],["result",["spawnerrorkind"]]]],[11,"fmt","","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::string","",138,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",141,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::boxed","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",137,[[["self"],["formatter"]],["result",["error"]]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"borrow_mut","","",118,N],[11,"extend","nom::lib::std::collections::btree_set","",225,N],[11,"extend","nom::lib::std::prelude::v1::v1","",137,N],[11,"extend","","",137,N],[11,"extend","","",137,N],[11,"extend","","",118,N],[11,"extend","nom::lib::std::collections::vec_deque","",223,N],[11,"extend","nom::lib::std::collections","",221,N],[11,"extend","","",222,N],[11,"extend","nom::lib::std::collections::vec_deque","",223,N],[11,"extend","nom::lib::std::prelude::v1::v1","",137,N],[11,"extend","","",118,N],[11,"extend","nom::lib::std::collections","",224,N],[11,"extend","","",222,N],[11,"extend","nom::lib::std::collections::btree_set","",225,N],[11,"extend","nom::lib::std::collections","",221,N],[11,"extend","","",224,N],[11,"extend","nom::lib::std::prelude::v1::v1","",137,N],[11,"as_ref","","",137,N],[11,"as_ref","","",118,[[["self"]],["vec"]]],[11,"as_ref","","",115,[[["self"]],["t"]]],[11,"as_ref","","",137,[[["self"]],["str"]]],[11,"as_ref","","",118,N],[11,"deref","","",115,[[["self"]],["t"]]],[11,"deref","nom::lib::std::boxed","",251,[[["self"]],["t"]]],[11,"deref","nom::lib::std::collections::binary_heap","",257,[[["self"]],["t"]]],[11,"deref","nom::lib::std::prelude::v1::v1","",137,[[["self"]],["str"]]],[11,"deref","","",118,N],[11,"drop","nom::lib::std::vec","",243,N],[11,"drop","nom::lib::std::collections::binary_heap","",257,N],[11,"drop","nom::lib::std::collections::vec_deque","",249,N],[11,"drop","nom::lib::std::collections::btree_map","",245,N],[11,"drop","nom::lib::std::string","",258,N],[11,"drop","nom::lib::std::prelude::v1::v1","",118,N],[11,"drop","nom::lib::std::vec","",256,N],[11,"drop","nom::lib::std::collections","",224,N],[11,"drop","nom::lib::std::collections::linked_list","",253,N],[11,"drop","nom::lib::std::collections","",221,N],[11,"drop","nom::lib::std::vec","",238,N],[11,"drop","","",260,N],[11,"drop","nom::lib::std::collections::vec_deque","",223,N],[11,"drop","nom::lib::std::prelude::v1::v1","",115,N],[11,"call_once","","",115,[[["self"],["a"]],["r"]]],[11,"call_once","","",115,[[["self"],["a"]],["r"]]],[11,"add","","",137,[[["self"],["str"]],["string"]]],[11,"poll","nom::lib::std::boxed","",251,[[["pinmut",["pinbox"]],["context"]],["poll"]]],[11,"poll","nom::lib::std::prelude::v1::v1","",115,[[["pinmut",["box"]],["context"]],["poll"]]],[11,"index","","",137,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index","","",137,[[["self"],["rangefull"]],["str"]]],[11,"index","nom::lib::std::collections::vec_deque","",223,[[["self"],["usize"]],["a"]]],[11,"index","nom::lib::std::prelude::v1::v1","",137,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index","","",137,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index","","",137,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index","nom::lib::std::collections","Returns a reference to the value corresponding to the supplied key.",224,[[["self"],["q"]],["v"]]],[11,"index","nom::lib::std::prelude::v1::v1","",137,[[["self"],["range",["usize"]]],["str"]]],[11,"index","","",118,N],[11,"borrow","","",118,N],[11,"borrow","","",137,[[["self"]],["str"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"index_mut","","",137,[[["self"],["rangefrom",["usize"]]],["str"]]],[11,"index_mut","","",118,N],[11,"index_mut","","",137,[[["self"],["rangetoinclusive",["usize"]]],["str"]]],[11,"index_mut","","",137,[[["self"],["rangeinclusive",["usize"]]],["str"]]],[11,"index_mut","","",137,[[["self"],["range",["usize"]]],["str"]]],[11,"index_mut","","",137,[[["self"],["rangeto",["usize"]]],["str"]]],[11,"index_mut","nom::lib::std::collections::vec_deque","",223,[[["self"],["usize"]],["a"]]],[11,"index_mut","nom::lib::std::prelude::v1::v1","",137,[[["self"],["rangefull"]],["str"]]],[11,"default","nom::lib::std::collections::btree_set","Makes an empty `BTreeSet<T>` with a reasonable choice of B.",225,[[],["btreeset"]]],[11,"default","nom::lib::std::collections","Creates an empty `BinaryHeap<T>`.",222,[[],["binaryheap"]]],[11,"default","","Creates an empty `LinkedList<T>`.",221,[[],["linkedlist"]]],[11,"default","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque<T>`.",223,[[],["vecdeque"]]],[11,"default","nom::lib::std::prelude::v1::v1","",115,[[],["box",["str"]]]],[11,"default","nom::lib::std::collections","Creates an empty `BTreeMap<K, V>`.",224,[[],["btreemap"]]],[11,"default","nom::lib::std::prelude::v1::v1","Creates a `Box<T>`, with the `Default` value for T.",115,[[],["box"]]],[11,"default","","",115,[[],["box"]]],[11,"default","","Creates an empty `String`.",137,[[],["string"]]],[11,"default","","Creates an empty `Vec<T>`.",118,[[],["vec"]]],[11,"deref_mut","","",137,[[["self"]],["str"]]],[11,"deref_mut","nom::lib::std::boxed","",251,[[["self"]],["t"]]],[11,"deref_mut","nom::lib::std::collections::binary_heap","",257,[[["self"]],["t"]]],[11,"deref_mut","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["t"]]],[11,"deref_mut","","",118,N],[11,"is_empty","nom::lib::std::vec","",256,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",239,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_set","",230,[[["self"]],["usize"]]],[11,"len","nom::lib::std::collections::btree_map","",227,[[["self"]],["usize"]]],[11,"len","","",250,[[["self"]],["usize"]]],[11,"len","","",245,[[["self"]],["usize"]]],[11,"len","","",241,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::vec","",238,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_set","",247,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",236,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",240,[[["self"]],["bool"]]],[11,"is_empty","","",252,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",259,[[["self"]],["usize"]]],[11,"is_empty","nom::lib::std::collections::binary_heap","",226,[[["self"]],["bool"]]],[11,"is_empty","nom::lib::std::collections::vec_deque","",248,[[["self"]],["bool"]]],[11,"len","nom::lib::std::collections::btree_map","",232,[[["self"]],["usize"]]],[11,"len","nom::lib::std::prelude::v1::v1","",115,[[["self"]],["usize"]]],[11,"is_empty","","",115,[[["self"]],["bool"]]],[11,"write_str","","",137,[[["self"],["str"]],["result",["error"]]]],[11,"write_char","","",137,[[["self"],["char"]],["result",["error"]]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,[[["self"],["vec"]],["bool"]]],[11,"ne","","",118,[[["self"],["vec"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,[[["self"],["vecdeque"]],["bool"]]],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::btree_set","",225,[[["self"],["btreeset"]],["bool"]]],[11,"ne","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",137,[[["self"],["str"]],["bool"]]],[11,"ne","","",137,[[["self"],["str"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::collections","",12,[[["self"],["collectionallocerr"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",137,[[["self"],["cow"]],["bool"]]],[11,"ne","","",137,[[["self"],["cow"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",137,[[["self"],["string"]],["bool"]]],[11,"ne","","",137,[[["self"],["string"]],["bool"]]],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,[[["self"],["vec"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::collections","",221,[[["self"],["linkedlist"]],["bool"]]],[11,"ne","","",221,[[["self"],["linkedlist"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",137,[[["self"],["str"]],["bool"]]],[11,"ne","","",137,[[["self"],["str"]],["bool"]]],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::string","",143,[[["self"],["parseerror"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","nom::lib::std::prelude::v1::v1","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"eq","","",223,N],[11,"eq","nom::lib::std::collections","",224,[[["self"],["btreemap"]],["bool"]]],[11,"eq","nom::lib::std::prelude::v1::v1","",115,[[["self"],["box"]],["bool"]]],[11,"ne","","",115,[[["self"],["box"]],["bool"]]],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","","",118,N],[11,"ne","","",118,N],[11,"eq","nom::lib::std::collections::vec_deque","",223,N],[11,"to_string","nom::lib::std::prelude::v1::v1","",137,[[["self"]],["string"]]],[11,"into_raw","nom::lib::std::boxed","",251,N],[11,"poll","","",251,N],[11,"drop","","",251,N],[11,"into_raw","nom::lib::std::prelude::v1::v1","",115,N],[11,"poll","","",115,N],[11,"drop","","",115,N],[11,"from","nom::lib::std::collections","",222,[[["vec"]],["binaryheap"]]],[11,"from","nom::lib::std::prelude::v1::v1","",118,[[["str"]],["vec",["u8"]]]],[11,"from","","",118,N],[11,"from","","",115,[[["vec"]],["box"]]],[11,"from","","",118,[[["box"]],["vec"]]],[11,"from","","",115,[[["string"]],["box",["str"]]]],[11,"from","","",115,[[["pinbox"]],["box"]]],[11,"from","","",115,[[["t"]],["box"]]],[11,"from","nom::lib::std::boxed","",251,[[["box"]],["pinbox"]]],[11,"from","nom::lib::std::prelude::v1::v1","",118,[[["vecdeque"]],["vec"]]],[11,"from","nom::lib::std::collections::vec_deque","",223,[[["vec"]],["vecdeque"]]],[11,"from","nom::lib::std::prelude::v1::v1","",118,[[["string"]],["vec",["u8"]]]],[11,"from","nom::lib::std::collections","",12,[[["allocerr"]],["collectionallocerr"]]],[11,"from","nom::lib::std::prelude::v1::v1","",118,[[["binaryheap"]],["vec"]]],[11,"from","","",115,N],[11,"from","nom::lib::std::collections","",12,[[["layouterr"]],["collectionallocerr"]]],[11,"from","nom::lib::std::prelude::v1::v1","",137,[[["box",["str"]]],["string"]]],[11,"from","","",118,N],[11,"from","","",137,[[["cow",["str"]]],["string"]]],[11,"from","","",118,[[["cow"]],["vec"]]],[11,"from","","",115,[[["box",["str"]]],["box"]]],[11,"from","","",137,[[["str"]],["string"]]],[11,"from","","",115,[[["str"]],["box",["str"]]]],[11,"resume","","",115,[[["self"]],["generatorstate"]]],[11,"hash","nom::lib::std::collections::vec_deque","",223,N],[11,"hash","nom::lib::std::collections","",224,N],[11,"hash","nom::lib::std::collections::btree_set","",225,N],[11,"hash","nom::lib::std::prelude::v1::v1","",137,N],[11,"hash","nom::lib::std::collections","",221,N],[11,"hash","nom::lib::std::prelude::v1::v1","",118,N],[11,"hash","","",115,N],[11,"finish","","",115,[[["self"]],["u64"]]],[11,"write","","",115,N],[11,"write_u8","","",115,N],[11,"write_u16","","",115,N],[11,"write_u32","","",115,N],[11,"write_u64","","",115,N],[11,"write_u128","","",115,N],[11,"write_usize","","",115,N],[11,"write_i8","","",115,N],[11,"write_i16","","",115,N],[11,"write_i32","","",115,N],[11,"write_i64","","",115,N],[11,"write_i128","","",115,N],[11,"write_isize","","",115,N],[11,"partial_cmp","nom::lib::std::collections","",224,[[["self"],["btreemap"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::collections::btree_set","",225,[[["self"],["btreeset"]],["option",["ordering"]]]],[11,"lt","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"le","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"gt","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"ge","","",225,[[["self"],["btreeset"]],["bool"]]],[11,"partial_cmp","nom::lib::std::collections::vec_deque","",223,[[["self"],["vecdeque"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",115,[[["self"],["box"]],["option",["ordering"]]]],[11,"lt","","",115,[[["self"],["box"]],["bool"]]],[11,"le","","",115,[[["self"],["box"]],["bool"]]],[11,"ge","","",115,[[["self"],["box"]],["bool"]]],[11,"gt","","",115,[[["self"],["box"]],["bool"]]],[11,"partial_cmp","","",118,[[["self"],["vec"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::collections","",221,[[["self"],["linkedlist"]],["option",["ordering"]]]],[11,"partial_cmp","nom::lib::std::prelude::v1::v1","",137,[[["self"],["string"]],["option",["ordering"]]]],[11,"lt","","",137,[[["self"],["string"]],["bool"]]],[11,"le","","",137,[[["self"],["string"]],["bool"]]],[11,"gt","","",137,[[["self"],["string"]],["bool"]]],[11,"ge","","",137,[[["self"],["string"]],["bool"]]],[11,"add_assign","","",137,N],[11,"fmt","nom::lib::std::boxed","",251,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","nom::lib::std::prelude::v1::v1","",115,[[["self"],["formatter"]],["result",["error"]]]],[11,"new","nom::lib::std::boxed","Allocate memory on the heap, move the data into it and pin it.",251,[[["t"]],["pinbox"]]],[11,"as_pin_mut","","Get a pinned reference to the data in this PinBox.",251,[[["self"]],["pinmut"]]],[11,"from_raw","","Constructs a `PinBox` from a raw pointer.",251,N],[11,"into_raw","","Consumes the `PinBox`, returning the wrapped raw pointer.",251,N],[11,"get_mut","","Get a mutable reference to the data inside this PinBox.",251,[[["pinbox"]],["t"]]],[11,"unpin","","Convert this PinBox into an unpinned Box.",251,[[["pinbox"]],["box"]]],[11,"reverse","nom::lib::std::cmp","Reverses the `Ordering`.",7,[[["self"]],["ordering"]]],[11,"then","","Chains two orderings.",7,[[["self"],["ordering"]],["ordering"]]],[11,"then_with","","Chains the ordering with the given function.",7,[[["self"],["f"]],["ordering"]]],[11,"key","nom::lib::std::collections::hash_map","Gets a reference to the key that would be used when inserting a value through the `VacantEntry`.",133,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",133,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",133,[[["self"],["v"]],["v"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",11,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",11,[[["self"],["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",11,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",11,[[["self"],["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",11,[[["self"]],["v"]]],[11,"new","","Creates an empty `HashMap`.",117,[[],["hashmap",["randomstate"]]]],[11,"with_capacity","","Creates an empty `HashMap` with the specified capacity.",117,[[["usize"]],["hashmap",["randomstate"]]]],[11,"with_hasher","","Creates an empty `HashMap` which will use the given hash builder to hash keys.",117,[[["s"]],["hashmap"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashMap` with the specified capacity, using `hash_builder` to hash the keys.",117,[[["usize"],["s"]],["hashmap"]]],[11,"hasher","","Returns a reference to the map's [`BuildHasher`].",117,[[["self"]],["s"]]],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",117,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashMap`. The collection may reserve more space to avoid frequent reallocations.",117,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `HashMap<K,V>`. The collection may reserve more space to avoid frequent reallocations.",117,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",117,N],[11,"shrink_to","","Shrinks the capacity of the map with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",117,N],[11,"keys","","An iterator visiting all keys in arbitrary order. The iterator element type is `&'a K`.",117,[[["self"]],["keys"]]],[11,"values","","An iterator visiting all values in arbitrary order. The iterator element type is `&'a V`.",117,[[["self"]],["values"]]],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order. The iterator element type is `&'a mut V`.",117,[[["self"]],["valuesmut"]]],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator element type is `(&'a K, &'a V)`.",117,[[["self"]],["iter"]]],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order, with mutable references to the values. The iterator element type is `(&'a K, &'a mut V)`.",117,[[["self"]],["itermut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",117,[[["self"],["k"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",117,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",117,[[["self"]],["bool"]]],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the allocated memory for reuse.",117,[[["self"]],["drain"]]],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",117,N],[11,"get","","Returns a reference to the value corresponding to the key.",117,[[["self"],["q"]],["option"]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",117,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",117,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",117,[[["self"],["q"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map.",117,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",117,[[["self"],["q"]],["option"]]],[11,"remove_entry","","Removes a key from the map, returning the stored key and value if the key was previously in the map.",117,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",117,N],[11,"new","","Creates a new `DefaultHasher`.",126,[[],["defaulthasher"]]],[11,"key","","Gets a reference to the key in the entry.",129,[[["self"]],["k"]]],[11,"remove_entry","","Take the ownership of the key and value from the map.",129,N],[11,"get","","Gets a reference to the value in the entry.",129,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",129,[[["self"]],["v"]]],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself.",129,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry, and returns the entry's old value.",129,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value out of the entry, and returns it.",129,[[["self"]],["v"]]],[11,"replace_entry","","Replaces the entry, returning the old key and value. The new key in the hash map will be the key used to create this entry.",129,N],[11,"replace_key","","Replaces the key in the hash map with the key used to create this entry.",129,[[["self"]],["k"]]],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",123,[[],["randomstate"]]],[11,"new","nom::lib::std::collections::hash_set","Creates an empty `HashSet`.",116,[[],["hashset",["randomstate"]]]],[11,"with_capacity","","Creates an empty `HashSet` with the specified capacity.",116,[[["usize"]],["hashset",["randomstate"]]]],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash keys.",116,[[["s"]],["hashset"]]],[11,"with_capacity_and_hasher","","Creates an empty `HashSet` with with the specified capacity, using `hasher` to hash the keys.",116,[[["usize"],["s"]],["hashset"]]],[11,"hasher","","Returns a reference to the set's [`BuildHasher`].",116,[[["self"]],["s"]]],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",116,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `HashSet`. The collection may reserve more space to avoid frequent reallocations.",116,N],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",116,N],[11,"shrink_to","","Shrinks the capacity of the set with a lower limit. It will drop down no lower than the supplied limit while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",116,N],[11,"iter","","An iterator visiting all elements in arbitrary order. The iterator element type is `&'a T`.",116,[[["self"]],["iter"]]],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`.",116,[[["self"],["hashset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both.",116,[[["self"],["hashset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`.",116,[[["self"],["hashset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates.",116,[[["self"],["hashset"]],["union"]]],[11,"len","","Returns the number of elements in the set.",116,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the set contains no elements.",116,[[["self"]],["bool"]]],[11,"drain","","Clears the set, returning all elements in an iterator.",116,[[["self"]],["drain"]]],[11,"clear","","Clears the set, removing all values.",116,N],[11,"contains","","Returns `true` if the set contains a value.",116,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",116,[[["self"],["q"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",116,[[["self"],["hashset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",116,[[["self"],["hashset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",116,[[["self"],["hashset"]],["bool"]]],[11,"insert","","Adds a value to the set.",116,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",116,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",116,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",116,[[["self"],["q"]],["option"]]],[11,"retain","","Retains only the elements specified by the predicate.",116,N],[11,"new","nom::lib::std::collections::btree_set","Makes a new `BTreeSet` with a reasonable choice of B.",225,[[],["btreeset"]]],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",225,[[["self"],["r"]],["range"]]],[11,"difference","","Visits the values representing the difference, i.e. the values that are in `self` but not in `other`, in ascending order.",225,[[["self"],["btreeset"]],["difference"]]],[11,"symmetric_difference","","Visits the values representing the symmetric difference, i.e. the values that are in `self` or in `other` but not in both, in ascending order.",225,[[["self"],["btreeset"]],["symmetricdifference"]]],[11,"intersection","","Visits the values representing the intersection, i.e. the values that are both in `self` and `other`, in ascending order.",225,[[["self"],["btreeset"]],["intersection"]]],[11,"union","","Visits the values representing the union, i.e. all the values in `self` or `other`, without duplicates, in ascending order.",225,[[["self"],["btreeset"]],["union"]]],[11,"clear","","Clears the set, removing all values.",225,N],[11,"contains","","Returns `true` if the set contains a value.",225,[[["self"],["q"]],["bool"]]],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",225,[[["self"],["q"]],["option"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`. This is equivalent to checking for an empty intersection.",225,[[["self"],["btreeset"]],["bool"]]],[11,"is_subset","","Returns `true` if the set is a subset of another, i.e. `other` contains at least all the values in `self`.",225,[[["self"],["btreeset"]],["bool"]]],[11,"is_superset","","Returns `true` if the set is a superset of another, i.e. `self` contains at least all the values in `other`.",225,[[["self"],["btreeset"]],["bool"]]],[11,"insert","","Adds a value to the set.",225,[[["self"],["t"]],["bool"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",225,[[["self"],["t"]],["option"]]],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",225,[[["self"],["q"]],["bool"]]],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",225,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",225,N],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",225,[[["self"],["q"]],["btreeset"]]],[11,"iter","","Gets an iterator that visits the values in the `BTreeSet` in ascending order.",225,[[["self"]],["iter"]]],[11,"len","","Returns the number of elements in the set.",225,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the set contains no elements.",225,[[["self"]],["bool"]]],[11,"new","nom::lib::std::collections","Creates an empty `BinaryHeap` as a max-heap.",222,[[],["binaryheap"]]],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity. This preallocates enough memory for `capacity` elements, so that the `BinaryHeap` does not have to be reallocated until it contains at least that many values.",222,[[["usize"]],["binaryheap"]]],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in arbitrary order.",222,[[["self"]],["iter"]]],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",222,[[["self"]],["option"]]],[11,"peek_mut","","Returns a mutable reference to the greatest item in the binary heap, or `None` if it is empty.",222,[[["self"]],["option",["peekmut"]]]],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",222,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `BinaryHeap`. Does nothing if the capacity is already sufficient.",222,N],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",222,N],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",222,N],[11,"shrink_to","","Discards capacity with a lower bound.",222,N],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it is empty.",222,[[["self"]],["option"]]],[11,"push","","Pushes an item onto the binary heap.",222,N],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector in arbitrary order.",222,[[["self"]],["vec"]]],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted (ascending) order.",222,[[["self"]],["vec"]]],[11,"len","","Returns the length of the binary heap.",222,[[["self"]],["usize"]]],[11,"is_empty","","Checks if the binary heap is empty.",222,[[["self"]],["bool"]]],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",222,[[["self"]],["drain"]]],[11,"clear","","Drops all items from the binary heap.",222,N],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",222,N],[11,"new","nom::lib::std::collections::vec_deque","Creates an empty `VecDeque`.",223,[[],["vecdeque"]]],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",223,[[["usize"]],["vecdeque"]]],[11,"get","","Retrieves an element in the `VecDeque` by index.",223,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",223,[[["self"],["usize"]],["option"]]],[11,"swap","","Swaps elements at indices `i` and `j`.",223,N],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without reallocating.",223,[[["self"]],["usize"]]],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque`. Does nothing if the capacity is already sufficient.",223,N],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `VecDeque`. The collection may reserve more space to avoid frequent reallocations.",223,N],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `VecDeque<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",223,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `VecDeque<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",223,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",223,N],[11,"shrink_to","","Shrinks the capacity of the `VecDeque` with a lower bound.",223,N],[11,"truncate","","Shortens the `VecDeque`, dropping excess elements from the back.",223,N],[11,"iter","","Returns a front-to-back iterator.",223,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",223,[[["self"]],["itermut"]]],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",223,N],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the `VecDeque`.",223,N],[11,"len","","Returns the number of elements in the `VecDeque`.",223,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the `VecDeque` is empty.",223,[[["self"]],["bool"]]],[11,"drain","","Create a draining iterator that removes the specified range in the `VecDeque` and yields the removed items.",223,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the `VecDeque`, removing all values.",223,N],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the given value.",223,[[["self"],["t"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"back","","Provides a reference to the back element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"pop_front","","Removes the first element and returns it, or `None` if the `VecDeque` is empty.",223,[[["self"]],["option"]]],[11,"push_front","","Prepends an element to the `VecDeque`.",223,N],[11,"push_back","","Appends an element to the back of the `VecDeque`.",223,N],[11,"pop_back","","Removes the last element from the `VecDeque` and returns it, or `None` if it is empty.",223,[[["self"]],["option"]]],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the last element.",223,[[["self"],["usize"]],["option"]]],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the first element.",223,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts an element at `index` within the `VecDeque`, shifting all elements with indices greater than or equal to `index` towards the back.",223,N],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`. Whichever end is closer to the removal point will be moved to make room, and all the affected elements will be moved to new positions. Returns `None` if `index` is out of bounds.",223,[[["self"],["usize"]],["option"]]],[11,"split_off","","Splits the `VecDeque` into two at the given index.",223,[[["self"],["usize"]],["vecdeque"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",223,N],[11,"retain","","Retains only the elements specified by the predicate.",223,N],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len, either by removing excess elements from the back or by appending clones of `value` to the back.",223,N],[11,"new","nom::lib::std::collections","Makes a new empty BTreeMap with a reasonable choice for B.",224,[[],["btreemap"]]],[11,"clear","","Clears the map, removing all values.",224,N],[11,"get","","Returns a reference to the value corresponding to the key.",224,[[["self"],["q"]],["option"]]],[11,"get_key_value","","Returns the key-value pair corresponding to the supplied key.",224,[[["self"],["q"]],["option"]]],[11,"contains_key","","Returns `true` if the map contains a value for the specified key.",224,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",224,[[["self"],["q"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map.",224,[[["self"],["k"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",224,[[["self"],["q"]],["option"]]],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",224,N],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",224,[[["self"],["r"]],["range"]]],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map. The simplest way is to use the range syntax `min..max`, thus `range(min..max)` will yield elements from min (inclusive) to max (exclusive). The range may also be entered as `(Bound<T>, Bound<T>)`, so for example `range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive range from 4 to 10.",224,[[["self"],["r"]],["rangemut"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",224,[[["self"],["k"]],["entry"]]],[11,"split_off","","Splits the collection into two at the given key. Returns everything after the given key, including the key.",224,[[["self"],["q"]],["btreemap"]]],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",224,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",224,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",224,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map, in order by key.",224,[[["self"]],["values"]]],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",224,[[["self"]],["valuesmut"]]],[11,"len","","Returns the number of elements in the map.",224,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the map contains no elements.",224,[[["self"]],["bool"]]],[11,"pop","nom::lib::std::collections::binary_heap","Removes the peeked value from the heap and returns it.",257,[[["peekmut"]],["t"]]],[11,"new","nom::lib::std::collections","Creates an empty `LinkedList`.",221,[[],["linkedlist"]]],[11,"append","","Moves all elements from `other` to the end of the list.",221,N],[11,"iter","","Provides a forward iterator.",221,[[["self"]],["iter"]]],[11,"iter_mut","","Provides a forward iterator with mutable references.",221,[[["self"]],["itermut"]]],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",221,[[["self"]],["bool"]]],[11,"len","","Returns the length of the `LinkedList`.",221,[[["self"]],["usize"]]],[11,"clear","","Removes all elements from the `LinkedList`.",221,N],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the given value.",221,[[["self"],["t"]],["bool"]]],[11,"front","","Provides a reference to the front element, or `None` if the list is empty.",221,[[["self"]],["option"]]],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list is empty.",221,[[["self"]],["option"]]],[11,"back","","Provides a reference to the back element, or `None` if the list is empty.",221,[[["self"]],["option"]]],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list is empty.",221,[[["self"]],["option"]]],[11,"push_front","","Adds an element first in the list.",221,N],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is empty.",221,[[["self"]],["option"]]],[11,"push_back","","Appends an element to the back of a list",221,N],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if it is empty.",221,[[["self"]],["option"]]],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index, including the index.",221,[[["self"],["usize"]],["linkedlist"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",221,[[["self"],["f"]],["drainfilter"]]],[11,"or_insert","nom::lib::std::collections::btree_map","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",14,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",14,[[["self"],["f"]],["v"]]],[11,"key","","Returns a reference to this entry's key.",14,[[["self"]],["k"]]],[11,"and_modify","","Provides in-place mutable access to an occupied entry before any potential inserts into the map.",14,[[["self"],["f"]],["entry"]]],[11,"or_default","","Ensures a value is in the entry by inserting the default value if empty, and returns a mutable reference to the value in the entry.",14,[[["self"]],["v"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",254,[[["self"]],["k"]]],[11,"into_key","","Take ownership of the key.",254,[[["self"]],["k"]]],[11,"insert","","Sets the value of the entry with the `VacantEntry`'s key, and returns a mutable reference to it.",254,[[["self"],["v"]],["v"]]],[11,"key","","Gets a reference to the key in the entry.",255,[[["self"]],["k"]]],[11,"remove_entry","","Take ownership of the key and value from the map.",255,N],[11,"get","","Gets a reference to the value in the entry.",255,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",255,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",255,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",255,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",255,[[["self"]],["v"]]],[11,"insert_next","nom::lib::std::collections::linked_list","Inserts the given element just after the element most recently returned by `.next()`. The inserted element does not appear in the iteration.",246,N],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",246,[[["self"]],["option"]]],[11,"pad_integral","nom::lib::std::fmt","Performs the correct padding for an integer which has already been emitted into a str. The str should not contain the sign for the integer, that will be added by this method.",220,[[["self"],["bool"],["str"],["str"]],["result",["error"]]]],[11,"pad","","This function takes a string slice and emits it to the internal buffer after applying the relevant formatting flags specified. The flags recognized for generic strings are:",220,[[["self"],["str"]],["result",["error"]]]],[11,"write_str","","Writes some data to the underlying buffer contained within this formatter.",220,[[["self"],["str"]],["result",["error"]]]],[11,"write_fmt","","Writes some formatted information into this instance.",220,[[["self"],["arguments"]],["result",["error"]]]],[11,"flags","","Flags for formatting",220,[[["self"]],["u32"]]],[11,"fill","","Character used as 'fill' whenever there is alignment.",220,[[["self"]],["char"]]],[11,"align","","Flag indicating what form of alignment was requested.",220,[[["self"]],["option",["alignment"]]]],[11,"width","","Optionally specified integer width that the output should be.",220,[[["self"]],["option",["usize"]]]],[11,"precision","","Optionally specified precision for numeric types.",220,[[["self"]],["option",["usize"]]]],[11,"sign_plus","","Determines if the `+` flag was specified.",220,[[["self"]],["bool"]]],[11,"sign_minus","","Determines if the `-` flag was specified.",220,[[["self"]],["bool"]]],[11,"alternate","","Determines if the `#` flag was specified.",220,[[["self"]],["bool"]]],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",220,[[["self"]],["bool"]]],[11,"debug_struct","","Creates a [`DebugStruct`] builder designed to assist with creation of [`fmt::Debug`] implementations for structs.",220,[[["self"],["str"]],["debugstruct"]]],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of `fmt::Debug` implementations for tuple structs.",220,[[["self"],["str"]],["debugtuple"]]],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of `fmt::Debug` implementations for list-like structures.",220,[[["self"]],["debuglist"]]],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of `fmt::Debug` implementations for set-like structures.",220,[[["self"]],["debugset"]]],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of `fmt::Debug` implementations for map-like structures.",220,[[["self"]],["debugmap"]]],[11,"entry","","Adds a new entry to the set output.",261,[[["self"],["debug"]],["debugset"]]],[11,"entries","","Adds the contents of an iterator of entries to the set output.",261,[[["self"],["i"]],["debugset"]]],[11,"finish","","Finishes output and returns any error encountered.",261,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the list output.",262,[[["self"],["debug"]],["debuglist"]]],[11,"entries","","Adds the contents of an iterator of entries to the list output.",262,[[["self"],["i"]],["debuglist"]]],[11,"finish","","Finishes output and returns any error encountered.",262,[[["self"]],["result",["error"]]]],[11,"entry","","Adds a new entry to the map output.",263,[[["self"],["debug"],["debug"]],["debugmap"]]],[11,"entries","","Adds the contents of an iterator of entries to the map output.",263,[[["self"],["i"]],["debugmap"]]],[11,"finish","","Finishes output and returns any error encountered.",263,[[["self"]],["result",["error"]]]],[11,"field","","Adds a new field to the generated tuple struct output.",264,[[["self"],["debug"]],["debugtuple"]]],[11,"finish","","Finishes output and returns any error encountered.",264,[[["self"]],["result",["error"]]]],[11,"field","","Adds a new field to the generated struct output.",265,[[["self"],["str"],["debug"]],["debugstruct"]]],[11,"finish","","Finishes output and returns any error encountered.",265,[[["self"]],["result",["error"]]]],[11,"new","nom::lib::std::hash","Creates a new `SipHasher` with the two initial keys set to 0.",144,[[],["siphasher"]]],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",144,[[["u64"],["u64"]],["siphasher"]]],[11,"peek","nom::lib::std::iter","Returns a reference to the next() value without advancing the iterator.",193,[[["self"]],["option"]]],[11,"new","nom::lib::std::mem","Wrap a value to be manually dropped.",149,[[["t"]],["manuallydrop"]]],[11,"into_inner","","Extract the value from the ManuallyDrop container.",149,[[["manuallydrop"]],["t"]]],[11,"drop","","Manually drops the contained value.",149,N],[11,"new","","Construct a new `PinMut` around a reference to some data of a type that implements `Unpin`.",151,[[["t"]],["pinmut"]]],[11,"get_mut","","Get a mutable reference to the data inside of this `PinMut`.",151,[[["pinmut"]],["t"]]],[11,"new_unchecked","","Construct a new `PinMut` around a reference to some data of a type that may or may not implement `Unpin`.",151,[[["t"]],["pinmut"]]],[11,"reborrow","","Reborrow a `PinMut` for a shorter lifetime.",151,[[["self"]],["pinmut"]]],[11,"get_mut_unchecked","","Get a mutable reference to the data inside of this `PinMut`.",151,[[["pinmut"]],["t"]]],[11,"map_unchecked","","Construct a new pin by mapping the interior value.",151,[[["pinmut"],["f"]],["pinmut"]]],[11,"set","","Assign a new value to the memory behind the pinned reference.",151,N],[11,"new","nom::lib::std::ops","Creates a new inclusive range. Equivalent to writing `start..=end`.",145,[[["idx"],["idx"]],["rangeinclusive"]]],[11,"start","","Returns the lower bound of the range (inclusive).",145,[[["self"]],["idx"]]],[11,"end","","Returns the upper bound of the range (inclusive).",145,[[["self"]],["idx"]]],[11,"into_inner","","Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).",145,N],[11,"contains","","Returns `true` if `item` is contained in the range.",145,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",145,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",48,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",52,[[["self"],["u"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",60,[[["self"],["u"]],["bool"]]],[11,"is_empty","","Returns `true` if the range contains no items.",60,[[["self"]],["bool"]]],[11,"contains","","Returns `true` if `item` is contained in the range.",76,[[["self"],["u"]],["bool"]]],[11,"is_some","nom::lib::std::prelude::v1::v1","Returns `true` if the option is a [`Some`] value.",82,[[["self"]],["bool"]]],[11,"is_none","","Returns `true` if the option is a [`None`] value.",82,[[["self"]],["bool"]]],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",82,[[["self"]],["option"]]],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",82,[[["self"]],["option"]]],[11,"as_pin_mut","","Converts from `Option<T>` to `Option<PinMut<'_, T>>`",82,[[["pinmut",["option"]]],["option",["pinmut"]]]],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",82,[[["self"],["str"]],["t"]]],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",82,[[["self"]],["t"]]],[11,"unwrap_or","","Returns the contained value or a default.",82,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",82,[[["self"],["f"]],["t"]]],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",82,[[["self"],["f"]],["option"]]],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",82,[[["self"],["u"],["f"]],["u"]]],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",82,[[["self"],["d"],["f"]],["u"]]],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",82,[[["self"],["e"]],["result"]]],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",82,[[["self"],["f"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",82,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",82,[[["self"]],["itermut"]]],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",82,[[["self"],["option"]],["option"]]],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",82,[[["self"],["f"]],["option"]]],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",82,[[["self"],["p"]],["option"]]],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",82,[[["self"],["option"]],["option"]]],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",82,[[["self"],["f"]],["option"]]],[11,"xor","","Returns [`Some`] if exactly one of `self`, `optb` is [`Some`], otherwise returns `None`.",82,[[["self"],["option"]],["option"]]],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",82,[[["self"],["t"]],["t"]]],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",82,[[["self"],["f"]],["t"]]],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",82,[[["self"]],["option"]]],[11,"replace","","Replaces the actual value in the option by the value given in parameter, returning the old value if present, leaving a [`Some`] in its place without deinitializing either one.",82,[[["self"],["t"]],["option"]]],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",82,[[["self"]],["option"]]],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",82,[[["self"]],["option"]]],[11,"unwrap_or_default","","Returns the contained value or a default",82,[[["self"]],["t"]]],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",82,[[["self"]],["result",["option"]]]],[11,"is_ok","","Returns `true` if the result is [`Ok`].",83,[[["self"]],["bool"]]],[11,"is_err","","Returns `true` if the result is [`Err`].",83,[[["self"]],["bool"]]],[11,"ok","","Converts from `Result<T, E>` to [`Option<T>`].",83,[[["self"]],["option"]]],[11,"err","","Converts from `Result<T, E>` to [`Option<E>`].",83,[[["self"]],["option"]]],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`.",83,[[["self"]],["result"]]],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`.",83,[[["self"]],["result"]]],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to a contained [`Ok`] value, leaving an [`Err`] value untouched.",83,[[["self"],["f"]],["result"]]],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a contained [`Err`] value, leaving an [`Ok`] value untouched.",83,[[["self"],["o"]],["result"]]],[11,"iter","","Returns an iterator over the possibly contained value.",83,[[["self"]],["iter"]]],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",83,[[["self"]],["itermut"]]],[11,"and","","Returns `res` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",83,[[["self"],["result"]],["result"]]],[11,"and_then","","Calls `op` if the result is [`Ok`], otherwise returns the [`Err`] value of `self`.",83,[[["self"],["f"]],["result"]]],[11,"or","","Returns `res` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",83,[[["self"],["result"]],["result"]]],[11,"or_else","","Calls `op` if the result is [`Err`], otherwise returns the [`Ok`] value of `self`.",83,[[["self"],["o"]],["result"]]],[11,"unwrap_or","","Unwraps a result, yielding the content of an [`Ok`]. Else, it returns `optb`.",83,[[["self"],["t"]],["t"]]],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an [`Ok`]. If the value is an [`Err`] then it calls `op` with its value.",83,[[["self"],["f"]],["t"]]],[11,"unwrap","","Unwraps a result, yielding the content of an [`Ok`].",83,[[["self"]],["t"]]],[11,"expect","","Unwraps a result, yielding the content of an [`Ok`].",83,[[["self"],["str"]],["t"]]],[11,"unwrap_err","","Unwraps a result, yielding the content of an [`Err`].",83,[[["self"]],["e"]]],[11,"expect_err","","Unwraps a result, yielding the content of an [`Err`].",83,[[["self"],["str"]],["e"]]],[11,"unwrap_or_default","","Returns the contained value or a default",83,[[["self"]],["t"]]],[11,"transpose","","Transposes a `Result` of an `Option` into an `Option` of a `Result`.",83,[[["self"]],["option",["result"]]]],[11,"as_slice","nom::lib::std::slice","View the underlying data as a subslice of the original data.",150,N],[11,"into_remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",153,N],[11,"remainder","","Return the remainder of the original slice that is not going to be returned by the iterator. The returned slice has at most `chunk_size-1` elements.",152,N],[11,"into_slice","","View the underlying data as a subslice of the original data.",161,N],[11,"valid_up_to","nom::lib::std::str","Returns the index in the given string up to which valid UTF-8 was verified.",140,[[["self"]],["usize"]]],[11,"error_len","","Provide more information about the failure:",140,[[["self"]],["option",["usize"]]]],[11,"as_str","","View the underlying data as a subslice of the original data.",180,[[["self"]],["str"]]],[11,"as_str","","View the underlying data as a subslice of the original data.",169,[[["self"]],["str"]]],[11,"new","nom::lib::std::prelude::v1::v1","Creates a new empty `String`.",137,[[],["string"]]],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",137,[[["usize"]],["string"]]],[11,"from_utf8","","Converts a vector of bytes to a `String`.",137,[[["vec",["u8"]]],["result",["string","fromutf8error"]]]],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",137,N],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning [`Err`] if `v` contains any invalid data.",137,N],[11,"from_utf16_lossy","","Decode a UTF-16 encoded slice `v` into a `String`, replacing invalid data with the replacement character (U+FFFD).",137,N],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",137,N],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the string contains valid UTF-8.",137,[[["vec",["u8"]]],["string"]]],[11,"into_bytes","","Converts a `String` into a byte vector.",137,[[["self"]],["vec",["u8"]]]],[11,"as_str","","Extracts a string slice containing the entire string.",137,[[["self"]],["str"]]],[11,"as_mut_str","","Converts a `String` into a mutable string slice.",137,[[["self"]],["str"]]],[11,"push_str","","Appends a given string slice onto the end of this `String`.",137,N],[11,"capacity","","Returns this `String`'s capacity, in bytes.",137,[[["self"]],["usize"]]],[11,"reserve","","Ensures that this `String`'s capacity is at least `additional` bytes larger than its length.",137,N],[11,"reserve_exact","","Ensures that this `String`'s capacity is `additional` bytes larger than its length.",137,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `String`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",137,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `String`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",137,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",137,N],[11,"shrink_to","","Shrinks the capacity of this `String` with a lower bound.",137,N],[11,"push","","Appends the given [`char`] to the end of this `String`.",137,N],[11,"as_bytes","","Returns a byte slice of this `String`'s contents.",137,N],[11,"truncate","","Shortens this `String` to the specified length.",137,N],[11,"pop","","Removes the last character from the string buffer and returns it.",137,[[["self"]],["option",["char"]]]],[11,"remove","","Removes a [`char`] from this `String` at a byte position and returns it.",137,[[["self"],["usize"]],["char"]]],[11,"retain","","Retains only the characters specified by the predicate.",137,N],[11,"insert","","Inserts a character into this `String` at a byte position.",137,N],[11,"insert_str","","Inserts a string slice into this `String` at a byte position.",137,N],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",137,[[["self"]],["vec"]]],[11,"len","","Returns the length of this `String`, in bytes.",137,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",137,[[["self"]],["bool"]]],[11,"split_off","","Splits the string into two at the given index.",137,[[["self"],["usize"]],["string"]]],[11,"clear","","Truncates this `String`, removing all contents.",137,N],[11,"drain","","Creates a draining iterator that removes the specified range in the string and yields the removed chars.",137,[[["self"],["r"]],["drain"]]],[11,"replace_range","","Removes the specified range in the string, and replaces it with the given string. The given string doesn't need to be the same length as the range.",137,N],[11,"into_boxed_str","","Converts this `String` into a [`Box`]`<`[`str`]`>`.",137,[[["self"]],["box",["str"]]]],[11,"as_bytes","nom::lib::std::string","Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.",138,N],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",138,[[["self"]],["vec",["u8"]]]],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",138,[[["self"]],["utf8error"]]],[11,"new","nom::lib::std::prelude::v1::v1","Constructs a new, empty `Vec<T>`.",118,[[],["vec"]]],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",118,[[["usize"]],["vec"]]],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",118,N],[11,"capacity","","Returns the number of elements the vector can hold without reallocating.",118,[[["self"]],["usize"]]],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",118,N],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",118,N],[11,"try_reserve","","Tries to reserve capacity for at least `additional` more elements to be inserted in the given `Vec<T>`. The collection may reserve more space to avoid frequent reallocations. After calling `reserve`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if capacity is already sufficient.",118,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"try_reserve_exact","","Tries to reserves the minimum capacity for exactly `additional` more elements to be inserted in the given `Vec<T>`. After calling `reserve_exact`, capacity will be greater than or equal to `self.len() + additional`. Does nothing if the capacity is already sufficient.",118,[[["self"],["usize"]],["result",["collectionallocerr"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",118,N],[11,"shrink_to","","Shrinks the capacity of the vector with a lower bound.",118,N],[11,"into_boxed_slice","","Converts the vector into [`Box<[T]>`][owned slice].",118,[[["self"]],["box"]]],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",118,N],[11,"as_slice","","Extracts a slice containing the entire vector.",118,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",118,N],[11,"set_len","","Sets the length of a vector.",118,N],[11,"swap_remove","","Removes an element from the vector and returns it.",118,[[["self"],["usize"]],["t"]]],[11,"insert","","Inserts an element at position `index` within the vector, shifting all elements after it to the right.",118,N],[11,"remove","","Removes and returns the element at position `index` within the vector, shifting all elements after it to the left.",118,[[["self"],["usize"]],["t"]]],[11,"retain","","Retains only the elements specified by the predicate.",118,N],[11,"dedup_by_key","","Removes all but the first of consecutive elements in the vector that resolve to the same key.",118,N],[11,"dedup_by","","Removes all but the first of consecutive elements in the vector satisfying a given equality relation.",118,N],[11,"push","","Appends an element to the back of a collection.",118,N],[11,"pop","","Removes the last element from a vector and returns it, or [`None`] if it is empty.",118,[[["self"]],["option"]]],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",118,N],[11,"drain","","Creates a draining iterator that removes the specified range in the vector and yields the removed items.",118,[[["self"],["r"]],["drain"]]],[11,"clear","","Clears the vector, removing all values.",118,N],[11,"len","","Returns the number of elements in the vector, also referred to as its 'length'.",118,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector contains no elements.",118,[[["self"]],["bool"]]],[11,"split_off","","Splits the collection into two at the given index.",118,[[["self"],["usize"]],["vec"]]],[11,"resize_with","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",118,N],[11,"resize","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",118,N],[11,"extend_from_slice","","Clones and appends all elements in a slice to the `Vec`.",118,N],[11,"resize_default","","Resizes the `Vec` in-place so that `len` is equal to `new_len`.",118,N],[11,"dedup","","Removes consecutive repeated elements in the vector.",118,N],[11,"remove_item","","Removes the first instance of `item` from the vector if the item exists.",118,[[["self"],["t"]],["option"]]],[11,"splice","","Creates a splicing iterator that replaces the specified range in the vector with the given `replace_with` iterator and yields the removed items. `replace_with` does not need to be the same length as `range`.",118,[[["self"],["r"],["i"]],["splice"]]],[11,"drain_filter","","Creates an iterator which uses a closure to determine if an element should be removed.",118,[[["self"],["f"]],["drainfilter"]]],[11,"as_slice","nom::lib::std::vec","Returns the remaining items of this iterator as a slice.",238,N],[11,"as_mut_slice","","Returns the remaining items of this iterator as a mutable slice.",238,N],[11,"split_at_position","nom::types","",97,[[["self"],["p"]],["iresult",["u32"]]]],[11,"split_at_position1","","",97,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]],[11,"split_at_position","","",96,[[["self"],["p"]],["iresult",["u32"]]]],[11,"split_at_position1","","",96,[[["self"],["p"],["errorkind",["u32"]]],["iresult",["u32"]]]]],"paths":[[4,"CompareResult"],[4,"ErrorKind"],[4,"Needed"],[4,"Err"],[4,"Endianness"],[8,"FnBox"],[8,"PartialEq"],[4,"Ordering"],[3,"Reverse"],[8,"Ord"],[8,"PartialOrd"],[4,"Entry"],[4,"CollectionAllocErr"],[4,"Bound"],[4,"Entry"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"TryInto"],[8,"TryFrom"],[8,"Display"],[8,"UpperExp"],[8,"Binary"],[8,"LowerExp"],[8,"LowerHex"],[8,"Pointer"],[8,"UpperHex"],[4,"Alignment"],[8,"Debug"],[8,"Write"],[8,"Octal"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Extend"],[8,"IntoIterator"],[8,"Product"],[8,"Sum"],[8,"Iterator"],[8,"Step"],[8,"FromIterator"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"BitAnd"],[8,"BitXor"],[8,"FnOnce"],[8,"Deref"],[3,"RangeToInclusive"],[8,"Not"],[8,"BitOr"],[8,"SubAssign"],[3,"RangeFrom"],[8,"Add"],[8,"Neg"],[8,"Fn"],[8,"BitAndAssign"],[8,"MulAssign"],[8,"Drop"],[8,"Sub"],[3,"Range"],[8,"Div"],[8,"ShlAssign"],[8,"RangeBounds"],[8,"ShrAssign"],[8,"Shl"],[8,"BitOrAssign"],[8,"Mul"],[8,"Try"],[8,"BitXorAssign"],[4,"GeneratorState"],[8,"DivAssign"],[8,"AddAssign"],[8,"IndexMut"],[8,"RemAssign"],[8,"FnMut"],[3,"RangeTo"],[8,"Generator"],[8,"Index"],[8,"Shr"],[8,"Rem"],[8,"DerefMut"],[4,"Option"],[4,"Result"],[8,"SliceConcatExt"],[8,"SliceIndex"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"ToString"],[8,"ToOwned"],[8,"Default"],[8,"Clone"],[4,"Context"],[3,"CompleteStr"],[3,"CompleteByteSlice"],[3,"Input"],[8,"InputLength"],[8,"Offset"],[8,"AsBytes"],[8,"AsChar"],[8,"InputIter"],[8,"InputTake"],[8,"InputTakeAtPosition"],[8,"Compare"],[8,"FindToken"],[8,"FindSubstring"],[8,"ParseTo"],[8,"Slice"],[8,"AtEof"],[8,"ExtendInto"],[8,"HexDisplay"],[8,"Convert"],[3,"Box"],[3,"HashSet"],[3,"HashMap"],[3,"Vec"],[3,"Difference"],[3,"Keys"],[3,"SymmetricDifference"],[3,"Values"],[3,"RandomState"],[3,"Intersection"],[3,"Iter"],[3,"DefaultHasher"],[3,"Union"],[3,"Iter"],[3,"OccupiedEntry"],[3,"Drain"],[3,"Drain"],[3,"IntoIter"],[3,"VacantEntry"],[3,"IntoIter"],[3,"IterMut"],[3,"ValuesMut"],[3,"String"],[3,"FromUtf8Error"],[3,"Error"],[3,"Utf8Error"],[3,"FromUtf16Error"],[3,"ParseBoolError"],[4,"ParseError"],[3,"SipHasher"],[3,"RangeInclusive"],[3,"RangeFull"],[3,"Discriminant"],[3,"NoneError"],[3,"ManuallyDrop"],[3,"Iter"],[3,"PinMut"],[3,"ExactChunks"],[3,"ExactChunksMut"],[3,"Empty"],[3,"Enumerate"],[3,"Map"],[3,"Rev"],[3,"Fuse"],[3,"Cloned"],[3,"Bytes"],[3,"IterMut"],[3,"Inspect"],[3,"Once"],[3,"CharPredicateSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"StrSearcher"],[3,"FlatMap"],[3,"Chars"],[3,"Lines"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"Chunks"],[3,"EncodeUtf16"],[3,"Split"],[3,"Repeat"],[3,"Zip"],[3,"Skip"],[3,"RSplitN"],[3,"CharIndices"],[3,"SplitN"],[3,"SplitAsciiWhitespace"],[3,"RMatches"],[3,"MatchIndices"],[3,"Flatten"],[3,"Chain"],[3,"Iter"],[3,"RMatchIndices"],[3,"RSplit"],[3,"Arguments"],[3,"Matches"],[3,"Iter"],[3,"Peekable"],[3,"RSplit"],[3,"Windows"],[3,"BuildHasherDefault"],[3,"Cycle"],[3,"SplitWhitespace"],[3,"Filter"],[3,"LinesAny"],[3,"Scan"],[3,"Split"],[3,"StepBy"],[3,"RepeatWith"],[3,"IntoIter"],[3,"IntoIter"],[3,"Take"],[3,"TakeWhile"],[3,"SkipWhile"],[3,"FilterMap"],[3,"SplitN"],[3,"RSplitMut"],[3,"IterMut"],[3,"IterMut"],[3,"RSplitN"],[3,"SplitMut"],[3,"ChunksMut"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Formatter"],[3,"LinkedList"],[3,"BinaryHeap"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"Iter"],[3,"Keys"],[3,"Union"],[3,"IntoIter"],[3,"Iter"],[3,"Range"],[3,"Iter"],[3,"Iter"],[3,"SymmetricDifference"],[3,"Range"],[3,"IntoIter"],[3,"Intersection"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Values"],[3,"Difference"],[3,"Splice"],[3,"RangeMut"],[3,"IntoIter"],[3,"IterMut"],[3,"IntoIter"],[3,"IterMut"],[3,"Drain"],[3,"IterMut"],[3,"PinBox"],[3,"Drain"],[3,"DrainFilter"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Drain"],[3,"PeekMut"],[3,"Drain"],[3,"ValuesMut"],[3,"DrainFilter"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugTuple"],[3,"DebugStruct"]]};
searchIndex["notify"]={"doc":"Cross-platform file system notification library","items":[[3,"RawEvent","notify","Event delivered when action occurs on a watched path in raw mode",N,N],[12,"path","","Path where the event originated.",0,N],[12,"op","","Operation detected on that path.",0,N],[12,"cookie","","Unique cookie associating related events (for `RENAME` events).",0,N],[4,"DebouncedEvent","","Event delivered when action occurs on a watched path in debounced mode",N,N],[13,"NoticeWrite","","`NoticeWrite` is emitted immediately after the first write event for the path.",1,N],[13,"NoticeRemove","","`NoticeRemove` is emitted immediately after a remove or rename event for the path.",1,N],[13,"Create","","`Create` is emitted when a file or directory has been created and no events were detected for the path within the specified time frame.",1,N],[13,"Write","","`Write` is emitted when a file has been written to and no events were detected for the path within the specified time frame.",1,N],[13,"Chmod","","`Chmod` is emitted when attributes have been changed and no events were detected for the path within the specified time frame.",1,N],[13,"Remove","","`Remove` is emitted when a file or directory has been removed and no events were detected for the path within the specified time frame.",1,N],[13,"Rename","","`Rename` is emitted when a file or directory has been moved within a watched directory and no events were detected for the new path within the specified time frame.",1,N],[13,"Rescan","","`Rescan` is emitted immediately after a problem has been detected that makes it necessary to re-scan the watched directories.",1,N],[13,"Error","","`Error` is emitted immediately after a error has been detected.",1,N],[4,"Error","","Errors generated from the `notify` crate",N,N],[13,"Generic","","Generic error",2,N],[13,"Io","","I/O errors",2,N],[13,"PathNotFound","","The provided path does not exist",2,N],[13,"WatchNotFound","","Attempted to remove a watch that does not exist",2,N],[4,"RecursiveMode","","Indicates whether only the provided directory or its sub-directories as well should be watched",N,N],[13,"Recursive","","Watch all sub-directories as well, including directories created after installing the watch",3,N],[13,"NonRecursive","","Watch only the provided directory",3,N],[5,"raw_watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in raw mode.",N,[[["sender",["rawevent"]]],["result",["recommendedwatcher"]]]],[5,"watcher","","Convenience method for creating the `RecommendedWatcher` for the current platform in default (debounced) mode.",N,[[["sender",["debouncedevent"]],["duration"]],["result",["recommendedwatcher"]]]],[0,"inotify","","Watcher implementation for the inotify Linux API",N,N],[3,"INotifyWatcher","notify::inotify","Watcher implementation based on inotify",N,N],[11,"new_raw","","",4,[[["sender",["rawevent"]]],["result",["inotifywatcher"]]]],[11,"new","","",4,[[["sender",["debouncedevent"]],["duration"]],["result",["inotifywatcher"]]]],[11,"watch","","",4,[[["self"],["p"],["recursivemode"]],["result"]]],[11,"unwatch","","",4,[[["self"],["p"]],["result"]]],[11,"drop","","",4,[[["self"]]]],[0,"null","notify","Stub Watcher implementation",N,N],[3,"NullWatcher","notify::null","Stub `Watcher` implementation",N,N],[11,"new_raw","","",5,[[["sender",["rawevent"]]],["result",["nullwatcher"]]]],[11,"new","","",5,[[["sender",["debouncedevent"]],["duration"]],["result",["nullwatcher"]]]],[11,"watch","","",5,[[["self"],["p"],["recursivemode"]],["result"]]],[11,"unwatch","","",5,[[["self"],["p"]],["result"]]],[0,"poll","notify","Generic Watcher implementation based on polling",N,N],[3,"PollWatcher","notify::poll","Polling based `Watcher` implementation",N,N],[11,"with_delay_ms","","Create a PollWatcher which polls every `delay` milliseconds",6,[[["sender",["rawevent"]],["u32"]],["result",["pollwatcher"]]]],[11,"new_raw","","",6,[[["sender",["rawevent"]]],["result",["pollwatcher"]]]],[11,"new","","",6,[[["sender",["debouncedevent"]],["duration"]],["result",["pollwatcher"]]]],[11,"watch","","",6,[[["self"],["p"],["recursivemode"]],["result"]]],[11,"unwatch","","",6,[[["self"],["p"]],["result"]]],[11,"drop","","",6,[[["self"]]]],[0,"op","notify","Contains the `Op` type which describes the actions for an event.",N,N],[3,"Op","notify::op","Holds a set of bit flags representing the actions for the event.",N,N],[17,"CHMOD","","",N,N],[17,"CREATE","","",N,N],[17,"REMOVE","","",N,N],[17,"RENAME","","",N,N],[17,"WRITE","","",N,N],[17,"CLOSE_WRITE","","",N,N],[17,"RESCAN","","",N,N],[11,"eq","","",7,[[["self"],["op"]],["bool"]]],[11,"ne","","",7,[[["self"],["op"]],["bool"]]],[11,"clone","","",7,[[["self"]],["op"]]],[11,"partial_cmp","","",7,[[["self"],["op"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["op"]],["bool"]]],[11,"le","","",7,[[["self"],["op"]],["bool"]]],[11,"gt","","",7,[[["self"],["op"]],["bool"]]],[11,"ge","","",7,[[["self"],["op"]],["bool"]]],[11,"cmp","","",7,[[["self"],["op"]],["ordering"]]],[11,"hash","","",7,N],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[18,"CHMOD","","Attributes changed",7,N],[18,"CREATE","","Created",7,N],[18,"REMOVE","","Removed",7,N],[18,"RENAME","","Renamed",7,N],[18,"WRITE","","Written",7,N],[18,"CLOSE_WRITE","","File opened for writing was closed",7,N],[18,"RESCAN","","Directories need to be rescanned",7,N],[11,"empty","","Returns an empty set of flags.",7,[[],["op"]]],[11,"all","","Returns the set containing all flags.",7,[[],["op"]]],[11,"bits","","Returns the raw value of the flags currently stored.",7,[[["self"]],["u32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",7,[[["u32"]],["option",["op"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",7,[[["u32"]],["op"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",7,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,[[["self"],["op"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,[[["self"],["op"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",7,[[["self"],["op"]]]],[11,"remove","","Removes the specified flags in-place.",7,[[["self"],["op"]]]],[11,"toggle","","Toggles the specified flags in-place.",7,[[["self"],["op"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",7,[[["self"],["op"],["bool"]]]],[11,"bitor","","Returns the union of the two sets of flags.",7,[[["self"],["op"]],["op"]]],[11,"bitor_assign","","Adds the set of flags.",7,[[["self"],["op"]]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,[[["self"],["op"]],["op"]]],[11,"bitxor_assign","","Toggles the set of flags.",7,[[["self"],["op"]]]],[11,"bitand","","Returns the intersection between the two sets of flags.",7,[[["self"],["op"]],["op"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",7,[[["self"],["op"]]]],[11,"sub","","Returns the set difference of the two sets of flags.",7,[[["self"],["op"]],["op"]]],[11,"sub_assign","","Disables all flags enabled in the set.",7,[[["self"],["op"]]]],[11,"not","","Returns the complement of this set of flags.",7,[[["self"]],["op"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"from_iter","","",7,[[["t"]],["op"]]],[6,"Result","notify","Type alias to use this library's `Error` type in a Result",N,N],[6,"RecommendedWatcher","","The recommended `Watcher` implementation for the current platform",N,N],[8,"Watcher","","Type that can deliver file activity notifications",N,N],[10,"new_raw","","Create a new watcher in raw mode.",8,[[["sender",["rawevent"]]],["result"]]],[10,"new","","Create a new debounced watcher with a `delay`.",8,[[["sender",["debouncedevent"]],["duration"]],["result"]]],[10,"watch","","Begin watching a new path.",8,[[["self"],["p"],["recursivemode"]],["result"]]],[10,"unwatch","","Stop watching a path.",8,[[["self"],["p"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["debouncedevent"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[11,"cause","","",2,[[["self"]],["option",["stderror"]]]],[11,"from","","",2,[[["error"]],["error"]]],[11,"clone","","",3,[[["self"]],["recursivemode"]]],[11,"eq","","",3,[[["self"],["recursivemode"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["recursivemode"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["recursivemode"]],["ordering"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"RawEvent"],[4,"DebouncedEvent"],[4,"Error"],[4,"RecursiveMode"],[3,"INotifyWatcher"],[3,"NullWatcher"],[3,"PollWatcher"],[3,"Op"],[8,"Watcher"]]};
searchIndex["num_cpus"]={"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",N,[[],["usize"]]],[5,"get_physical","","Returns the number of physical cores of the current system.",N,[[],["usize"]]]],"paths":[]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",21,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",22,N],[13,"Invalid","","",22,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",23,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"identities","","",N,N],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"sign","num_traits","",N,N],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",15,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",15,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",15,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[0,"ops","num_traits","",N,N],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,[[["self"],["self"]],["self"]]],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,[[["self"],["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,[[["self"],["u32"]],["option"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,[[["self"],["self"]],["self"]]],[0,"bounds","num_traits","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",0,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",0,[[],["self"]]],[0,"float","num_traits","",N,N],[8,"Float","num_traits::float","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",1,[[],["self"]]],[10,"infinity","","Returns the infinite value.",1,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",1,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",1,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",1,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",1,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",1,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",1,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",1,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",1,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",1,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",1,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",1,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",1,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",1,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",1,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",1,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",1,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",1,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",1,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",1,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",1,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",1,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",1,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",1,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",1,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",1,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",1,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",1,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",2,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",2,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",2,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",2,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",2,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",2,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,[[],["self"]]],[0,"real","num_traits","",N,N],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",24,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",24,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",24,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",24,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",24,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",24,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",24,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",24,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",24,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",24,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",24,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",24,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",24,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",24,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",24,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",24,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",24,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",24,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",24,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",24,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",24,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",24,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",24,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",24,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",24,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",24,[[["self"]],["self"]]],[0,"cast","num_traits","",N,N],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",17,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",17,[[["f64"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",18,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",18,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,[[["self"]],["option",["f64"]]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,[[["t"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",20,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[11,"fmt","num_traits","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result",["error"]]]]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ordermap"]={"doc":"[`OrderMap`] is a hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.","items":[[3,"OrderMap","ordermap","A hash table where the iteration order of the key-value pairs is independent of the hash values of the keys.",N,N],[3,"OccupiedEntry","","",N,N],[3,"VacantEntry","","",N,N],[3,"Keys","","",N,N],[3,"Values","","",N,N],[3,"ValuesMut","","",N,N],[3,"Iter","","",N,N],[3,"IterMut","","",N,N],[3,"IntoIter","","",N,N],[3,"Drain","","",N,N],[4,"Entry","","Entry for an existing key-value pair or a vacant location to insert one.",N,N],[13,"Occupied","","Existing slot with equivalent key.",0,N],[13,"Vacant","","Vacant slot (no equivalent key in the map).",0,N],[11,"get_full_mut2","","",1,[[["self"],["q"]],["option"]]],[11,"retain2","","",1,[[["self"],["f"]]]],[11,"__private_marker","","",1,[[["self"]],["privatemarker"]]],[0,"set","","A hash set implemented using `OrderMap`",N,N],[3,"OrderSet","ordermap::set","A hash set where the iteration order of the values is independent of their hash values.",N,N],[3,"IntoIter","","",N,N],[3,"Iter","","",N,N],[3,"Drain","","",N,N],[3,"Difference","","",N,N],[3,"Intersection","","",N,N],[3,"SymmetricDifference","","",N,N],[3,"Union","","",N,N],[11,"clone","","",2,[[["self"]],["orderset"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new set. (Does not allocate.)",2,[[],["self"]]],[11,"with_capacity","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",2,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new set with capacity for `n` elements. (Does not allocate if `n` is zero.)",2,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of elements in the set.",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the set contains no elements.",2,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new set with `hash_builder`",2,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the set's `BuildHasher`.",2,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",2,[[["self"]],["usize"]]],[11,"clear","","Remove all elements in the set, while preserving its capacity.",2,[[["self"]]]],[11,"reserve","","FIXME Not implemented fully yet",2,[[["self"],["usize"]]]],[11,"insert","","Insert the value into the set.",2,[[["self"],["t"]],["bool"]]],[11,"iter","","Return an iterator over the values of the set, in their order",2,[[["self"]],["iter"]]],[11,"difference","","Return an iterator over the values that are in `self` but not `other`.",2,[[["self"],["orderset"]],["difference"]]],[11,"symmetric_difference","","Return an iterator over the values that are in `self` or `other`, but not in both.",2,[[["self"],["orderset"]],["symmetricdifference"]]],[11,"intersection","","Return an iterator over the values that are in both `self` and `other`.",2,[[["self"],["orderset"]],["intersection"]]],[11,"union","","Return an iterator over all values that are in `self` or `other`.",2,[[["self"],["orderset"]],["union"]]],[11,"contains","","Return `true` if an equivalent to `value` exists in the set.",2,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored in the set, if it is present, else `None`.",2,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index and value",2,[[["self"],["q"]],["option"]]],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given one. Returns the replaced value.",2,[[["self"],["t"]],["option"]]],[11,"remove","","FIXME Same as .swap_remove",2,[[["self"],["q"]],["bool"]]],[11,"swap_remove","","Remove the value from the set, and return `true` if it was present.",2,[[["self"],["q"]],["bool"]]],[11,"take","","FIXME Same as .swap_take",2,[[["self"],["q"]],["option"]]],[11,"swap_take","","Removes and returns the value in the set, if any, that is equal to the given one.",2,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the value from the set return it and the index it had.",2,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last value",2,[[["self"]],["option"]]],[11,"retain","","Scan through each value in the set and keep those where the closure `keep` returns `true`.",2,[[["self"],["f"]]]],[11,"sort","","Sort the set’s values by their default ordering.",2,[[["self"]]]],[11,"sort_by","","Sort the set’s values in place using the comparison function `compare`.",2,[[["self"],["f"]]]],[11,"sorted_by","","Sort the values of the set and return a by value iterator of the values with the result.",2,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `OrderSet`, returning all values as a drain iterator. Keeps the allocated memory for reuse.",2,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a value by index",2,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",2,[[["self"],["usize"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"count","","",3,[[["self"]],["usize"]]],[11,"nth","","",3,[[["self"],["usize"]],["option"]]],[11,"last","","",3,[[["self"]],["option"]]],[11,"collect","","",3,[[["self"]],["c"]]],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"len","","",3,[[["self"]],["usize"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"count","","",4,[[["self"]],["usize"]]],[11,"nth","","",4,[[["self"],["usize"]],["option"]]],[11,"last","","",4,[[["self"]],["option"]]],[11,"collect","","",4,[[["self"]],["c"]]],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"len","","",4,[[["self"]],["usize"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"count","","",5,[[["self"]],["usize"]]],[11,"nth","","",5,[[["self"],["usize"]],["option"]]],[11,"last","","",5,[[["self"]],["option"]]],[11,"collect","","",5,[[["self"]],["c"]]],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",2,N],[11,"from_iter","","",2,[[["i"]],["self"]]],[11,"extend","","",2,[[["self"],["i"]]]],[11,"extend","","",2,[[["self"],["i"]]]],[11,"default","","Return an empty `OrderSet`",2,[[],["self"]]],[11,"eq","","",2,[[["self"],["orderset"]],["bool"]]],[11,"is_disjoint","","Returns `true` if `self` has no elements in common with `other`.",2,[[["self"],["orderset"]],["bool"]]],[11,"is_subset","","Returns `true` if all elements of `self` are contained in `other`.",2,[[["self"],["orderset"]],["bool"]]],[11,"is_superset","","Returns `true` if all elements of `other` are contained in `self`.",2,[[["self"],["orderset"]],["bool"]]],[11,"next","","",6,[[["self"]],["option"]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"fold","","",8,[[["self"],["b"],["f"]],["b"]]],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"fold","","",9,[[["self"],["b"],["f"]],["b"]]],[11,"next_back","","",9,[[["self"]],["option"]]],[8,"Equivalent","ordermap","Key equivalence trait.",N,N],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",10,[[["self"],["k"]],["bool"]]],[8,"MutableKeys","","Opt-in mutable access to keys.",N,N],[16,"Key","","",11,N],[16,"Value","","",11,N],[10,"get_full_mut2","","Return item index, mutable reference to key and value",11,[[["self"],["q"]],["option"]]],[10,"retain2","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",11,[[["self"],["f"]]]],[10,"__private_marker","","This method is not useful in itself – it is there to “seal” the trait for external implementation, so that we can add methods without causing breaking changes.",11,[[["self"]],["privatemarker"]]],[11,"clone","","",1,[[["self"]],["ordermap"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new map. (Does not allocate.)",1,[[],["self"]]],[11,"with_capacity","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,[[["usize"]],["self"]]],[11,"with_capacity_and_hasher","","Create a new map with capacity for `n` key-value pairs. (Does not allocate if `n` is zero.)",1,[[["usize"],["s"]],["self"]]],[11,"len","","Return the number of key-value pairs in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"with_hasher","","Create a new map with `hash_builder`",1,[[["s"]],["self"]]],[11,"hasher","","Return a reference to the map's `BuildHasher`.",1,[[["self"]],["s"]]],[11,"capacity","","Computes in O(1) time.",1,[[["self"]],["usize"]]],[11,"or_insert","","Computes in O(1) time (amortized average).",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Computes in O(1) time (amortized average).",0,[[["self"],["f"]],["v"]]],[11,"key","","",0,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair exists or will be inserted.",0,[[["self"]],["usize"]]],[11,"key","","",12,[[["self"]],["k"]]],[11,"get","","",12,[[["self"]],["v"]]],[11,"get_mut","","",12,[[["self"]],["v"]]],[11,"index","","Return the index of the key-value pair",12,[[["self"]],["usize"]]],[11,"into_mut","","",12,[[["self"]],["v"]]],[11,"insert","","",12,[[["self"],["v"]],["v"]]],[11,"remove","","",12,[[["self"]],["v"]]],[11,"remove_entry","","Remove and return the key, value pair stored in the map for this entry",12,N],[11,"key","","",13,[[["self"]],["k"]]],[11,"into_key","","",13,[[["self"]],["k"]]],[11,"index","","Return the index where the key-value pair will be inserted.",13,[[["self"]],["usize"]]],[11,"insert","","",13,[[["self"],["v"]],["v"]]],[11,"clear","","Remove all key-value pairs in the map, while preserving its capacity.",1,[[["self"]]]],[11,"reserve","","Reserve capacity for `additional` more key-value pairs.",1,[[["self"],["usize"]]]],[11,"insert","","Insert a key-value pair in the map.",1,[[["self"],["k"],["v"]],["option"]]],[11,"entry","","Get the given key’s corresponding entry in the map for insertion and/or in-place manipulation.",1,[[["self"],["k"]],["entry"]]],[11,"iter","","Return an iterator over the key-value pairs of the map, in their order",1,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator over the key-value pairs of the map, in their order",1,[[["self"]],["itermut"]]],[11,"keys","","Return an iterator over the keys of the map, in their order",1,[[["self"]],["keys"]]],[11,"values","","Return an iterator over the values of the map, in their order",1,[[["self"]],["values"]]],[11,"values_mut","","Return an iterator over mutable references to the the values of the map, in their order",1,[[["self"]],["valuesmut"]]],[11,"contains_key","","Return `true` if and equivalent to `key` exists in the map.",1,[[["self"],["q"]],["bool"]]],[11,"get","","Return a reference to the value stored for `key`, if it is present, else `None`.",1,[[["self"],["q"]],["option"]]],[11,"get_full","","Return item index, key and value",1,[[["self"],["q"]],["option"]]],[11,"get_mut","","",1,[[["self"],["q"]],["option"]]],[11,"get_full_mut","","",1,[[["self"],["q"]],["option"]]],[11,"remove","","NOTE: Same as .swap_remove",1,[[["self"],["q"]],["option"]]],[11,"swap_remove","","Remove the key-value pair equivalent to `key` and return its value.",1,[[["self"],["q"]],["option"]]],[11,"swap_remove_full","","Remove the key-value pair equivalent to `key` and return it and the index it had.",1,[[["self"],["q"]],["option"]]],[11,"pop","","Remove the last key-value pair",1,[[["self"]],["option"]]],[11,"retain","","Scan through each key-value pair in the map and keep those where the closure `keep` returns `true`.",1,[[["self"],["f"]]]],[11,"sort_keys","","Sort the map’s key-value pairs by the default ordering of the keys.",1,[[["self"]]]],[11,"sort_by","","Sort the map’s key-value pairs in place using the comparison function `compare`.",1,[[["self"],["f"]]]],[11,"sorted_by","","Sort the key-value pairs of the map and return a by value iterator of the key-value pairs with the result.",1,[[["self"],["f"]],["intoiter"]]],[11,"drain","","Clears the `OrderMap`, returning all key-value pairs as a drain iterator. Keeps the allocated memory for reuse.",1,[[["self"],["rangefull"]],["drain"]]],[11,"get_index","","Get a key-value pair by index",1,[[["self"],["usize"]],["option"]]],[11,"get_index_mut","","Get a key-value pair by index",1,[[["self"],["usize"]],["option"]]],[11,"swap_remove_index","","Remove the key-value pair by index",1,[[["self"],["usize"]],["option"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"count","","",14,[[["self"]],["usize"]]],[11,"nth","","",14,[[["self"],["usize"]],["option"]]],[11,"last","","",14,[[["self"]],["option"]]],[11,"collect","","",14,[[["self"]],["c"]]],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"count","","",15,[[["self"]],["usize"]]],[11,"nth","","",15,[[["self"],["usize"]],["option"]]],[11,"last","","",15,[[["self"]],["option"]]],[11,"collect","","",15,[[["self"]],["c"]]],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"size_hint","","",16,N],[11,"count","","",16,[[["self"]],["usize"]]],[11,"nth","","",16,[[["self"],["usize"]],["option"]]],[11,"last","","",16,[[["self"]],["option"]]],[11,"collect","","",16,[[["self"]],["c"]]],[11,"next_back","","",16,[[["self"]],["option"]]],[11,"len","","",16,[[["self"]],["usize"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"size_hint","","",17,N],[11,"count","","",17,[[["self"]],["usize"]]],[11,"nth","","",17,[[["self"],["usize"]],["option"]]],[11,"last","","",17,[[["self"]],["option"]]],[11,"collect","","",17,[[["self"]],["c"]]],[11,"next_back","","",17,[[["self"]],["option"]]],[11,"len","","",17,[[["self"]],["usize"]]],[11,"next","","",18,[[["self"]],["option"]]],[11,"size_hint","","",18,N],[11,"count","","",18,[[["self"]],["usize"]]],[11,"nth","","",18,[[["self"],["usize"]],["option"]]],[11,"last","","",18,[[["self"]],["option"]]],[11,"collect","","",18,[[["self"]],["c"]]],[11,"next_back","","",18,[[["self"]],["option"]]],[11,"len","","",18,[[["self"]],["usize"]]],[11,"next","","",19,[[["self"]],["option"]]],[11,"size_hint","","",19,N],[11,"count","","",19,[[["self"]],["usize"]]],[11,"nth","","",19,[[["self"],["usize"]],["option"]]],[11,"last","","",19,[[["self"]],["option"]]],[11,"collect","","",19,[[["self"]],["c"]]],[11,"next_back","","",19,[[["self"]],["option"]]],[11,"len","","",19,[[["self"]],["usize"]]],[11,"next","","",20,[[["self"]],["option"]]],[11,"size_hint","","",20,N],[11,"count","","",20,[[["self"]],["usize"]]],[11,"nth","","",20,[[["self"],["usize"]],["option"]]],[11,"last","","",20,[[["self"]],["option"]]],[11,"collect","","",20,[[["self"]],["c"]]],[11,"next_back","","",20,[[["self"]],["option"]]],[11,"into_iter","","",1,N],[11,"index","","Panics if `key` is not present in the map.",1,[[["self"],["q"]],["v"]]],[11,"index_mut","","Panics if `key` is not present in the map.",1,[[["self"],["q"]],["v"]]],[11,"from_iter","","Create an `OrderMap` from the sequence of key-value pairs in the iterable.",1,[[["i"]],["self"]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",1,[[["self"],["i"]]]],[11,"extend","","Extend the map with all key-value pairs in the iterable.",1,[[["self"],["i"]]]],[11,"default","","Return an empty `OrderMap`",1,[[],["self"]]],[11,"eq","","",1,[[["self"],["ordermap"]],["bool"]]],[14,"ordermap","","Create an `OrderMap` from a list of key-value pairs",N,N],[14,"orderset","","Create an `OrderSet` from a list of values",N,N]],"paths":[[4,"Entry"],[3,"OrderMap"],[3,"OrderSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[8,"Equivalent"],[8,"MutableKeys"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["owning_ref"]={"doc":"An owning reference.","items":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N],[3,"OwningRef","","An owning reference.",N,N],[3,"OwningRefMut","","An mutable owning reference.",N,N],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where `OwningRef` allows consumers to pass around an owned object and a dependent reference, `OwningHandle` contains an owned object and a dependent object.",N,N],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the owner.",N,N],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the owner.",N,N],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",N,N],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the owner.",N,N],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the owner.",N,N],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a `RwLockReadGuard` as the owner.",N,N],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as the owner.",N,N],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as the owner.",N,N],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String` as the owner.",N,N],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut` as the owner.",N,N],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a `MutexGuard` as the owner.",N,N],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a `RwLockWriteGuard` as the owner.",N,N],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as the owner.",N,N],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as the owner.",N,N],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as the owner.",N,N],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased `Box` as the owner.",N,N],[8,"Erased","","Helper trait for an erased concrete type an owner dereferences to. This is used in form of a trait object for keeping something around to (virtually) call the destructor.",N,N],[8,"IntoErased","","Helper trait for erasing the concrete type of what an owner derferences to, for example `Box<T> -> Box<Erased>`. This would be unneeded with higher kinded types support in the language.",N,N],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,N],[10,"into_erased","","Perform the type erasure.",0,N],[8,"ToHandle","","Trait to implement the conversion of owner to handle for common types.",N,N],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,N],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves, create a handle to be encapsulated by the `OwningHandle`.",1,N],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable handle for common types.",N,N],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,N],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves, create a mutable handle to be encapsulated by the `OwningHandle`.",2,N],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",3,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",3,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["owningref"]]],[11,"try_map","","Tries to convert `self` into a new owning reference that points at something reachable from the previous one.",3,[[["self"],["f"]],["result",["owningref"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",3,[[["self"],["f"]],["owningref"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",3,[[["self"]],["owningref",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",3,[[["self"]],["owningref"]]],[11,"owner","","A getter for the underlying owner.",3,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",3,[[["self"]],["o"]]],[11,"new","","Creates a new owning reference from a owner initialized to the direct dereference of it.",4,[[["o"]],["self"]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the `StableAddress` trait. Instead, the caller is responsible to make the same promises as implementing the trait.",4,[[["o"]],["self"]]],[11,"map","","Converts `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningref"]]],[11,"map_mut","","Converts `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"try_map","","Tries to convert `self` into a new shared owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningref"]]]],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning reference that points at something reachable from the previous one.",4,[[["self"],["f"]],["result",["owningrefmut"]]]],[11,"map_owner","","Converts `self` into a new owning reference with a different owner type.",4,[[["self"],["f"]],["owningrefmut"]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the owner is wrapped in an additional `Box<O>`.",4,[[["self"]],["owningrefmut",["box"]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait object.",4,[[["self"]],["owningrefmut"]]],[11,"owner","","A getter for the underlying owner.",4,[[["self"]],["o"]]],[11,"into_inner","","Discards the reference and retrieves the owner.",4,[[["self"]],["o"]]],[11,"deref","","",5,N],[11,"deref_mut","","",5,N],[11,"new","","Create a new `OwningHandle` for a type that implements `ToHandle`. For types that don't implement `ToHandle`, callers may invoke `new_with_fn`, which accepts a callback to perform the conversion.",5,[[["o"]],["self"]]],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that implements `ToHandleMut`.",5,[[["o"]],["self"]]],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["self"]]],[11,"try_new","","Create a new OwningHandle. The provided callback will be invoked with a pointer to the object owned by `o`, and the returned value is stored as the object to which this `OwningHandle` will forward `Deref` and `DerefMut`.",5,[[["o"],["f"]],["result"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref_mut","","",4,[[["self"]],["t"]]],[11,"as_ref","","",3,[[["self"]],["t"]]],[11,"as_ref","","",4,[[["self"]],["t"]]],[11,"as_mut","","",4,[[["self"]],["t"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"from","","",3,[[["o"]],["self"]]],[11,"from","","",4,[[["o"]],["self"]]],[11,"from","","",3,[[["owningrefmut"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",3,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",3,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",3,[[["self"],["self"]],["ordering"]]],[11,"hash","","",3,[[["self"],["h"]]]],[11,"eq","","",4,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["self"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]]],"paths":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]};
searchIndex["parking_lot"]={"doc":"This library provides implementations of `Mutex`, `RwLock`, `Condvar` and `Once` that are smaller, faster and more flexible than those in the Rust standard library. It also provides a `ReentrantMutex` type.","items":[[3,"Condvar","parking_lot","A Condition Variable",N,N],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned due to a time out or not.",N,N],[3,"Once","","A synchronization primitive which can be used to run a one-time initialization. Useful for one-time initialization for globals, FFI or related functionality.",N,N],[3,"RawMutex","","Raw mutex type backed by the parking lot.",N,N],[3,"RawRwLock","","Raw reader-writer lock type backed by the parking lot.",N,N],[3,"RawThreadId","","Implementation of the `GetThreadId` trait for `lock_api::ReentrantMutex`.",N,N],[4,"OnceState","","Current state of a `Once`.",N,N],[13,"New","","A closure has not been executed yet",0,N],[13,"Poisoned","","A closure was executed but panicked.",0,N],[13,"InProgress","","A thread is currently executing a closure.",0,N],[13,"Done","","A closure has completed sucessfully.",0,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["waittimeoutresult"]],["bool"]]],[11,"clone","","",1,[[["self"]],["waittimeoutresult"]]],[11,"timed_out","","Returns whether the wait was known to have timed out.",1,[[["self"]],["bool"]]],[11,"new","","Creates a new condition variable which is ready to be waited on and notified.",2,[[],["condvar"]]],[11,"notify_one","","Wakes up one blocked thread on this condvar.",2,[[["self"]]]],[11,"notify_all","","Wakes up all blocked threads on this condvar.",2,[[["self"]]]],[11,"wait","","Blocks the current thread until this condition variable receives a notification.",2,[[["self"],["mutexguard"]]]],[11,"wait_until","","Waits on this condition variable for a notification, timing out after the specified time instant.",2,[[["self"],["mutexguard"],["instant"]],["waittimeoutresult"]]],[11,"wait_for","","Waits on this condition variable for a notification, timing out after a specified duration.",2,[[["self"],["mutexguard"],["duration"]],["waittimeoutresult"]]],[11,"default","","",2,[[],["condvar"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["oncestate"]]],[11,"eq","","",0,[[["self"],["oncestate"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",0,[[["self"]],["bool"]]],[11,"done","","Returns whether the associated `Once` has successfullly executed a closure.",0,[[["self"]],["bool"]]],[11,"new","","Creates a new `Once` value.",3,[[],["once"]]],[11,"state","","Returns the current state of this `Once`.",3,[[["self"]],["oncestate"]]],[11,"call_once","","Performs an initialization routine once and only once. The given closure will be executed if this is the first time `call_once` has been called, and otherwise the routine will not be invoked.",3,[[["self"],["f"]]]],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",3,[[["self"],["f"]]]],[11,"default","","",3,[[],["once"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"lock","","",4,[[["self"]]]],[11,"try_lock","","",4,[[["self"]],["bool"]]],[11,"unlock","","",4,[[["self"]]]],[11,"unlock_fair","","",4,[[["self"]]]],[11,"bump","","",4,[[["self"]]]],[11,"try_lock_until","","",4,[[["self"],["instant"]],["bool"]]],[11,"try_lock_for","","",4,[[["self"],["duration"]],["bool"]]],[11,"lock_exclusive","","",5,[[["self"]]]],[11,"try_lock_exclusive","","",5,[[["self"]],["bool"]]],[11,"unlock_exclusive","","",5,[[["self"]]]],[11,"lock_shared","","",5,[[["self"]]]],[11,"try_lock_shared","","",5,[[["self"]],["bool"]]],[11,"unlock_shared","","",5,[[["self"]]]],[11,"unlock_shared_fair","","",5,[[["self"]]]],[11,"unlock_exclusive_fair","","",5,[[["self"]]]],[11,"bump_shared","","",5,[[["self"]]]],[11,"bump_exclusive","","",5,[[["self"]]]],[11,"downgrade","","",5,[[["self"]]]],[11,"try_lock_shared_for","","",5,N],[11,"try_lock_shared_until","","",5,N],[11,"try_lock_exclusive_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_lock_exclusive_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"lock_shared_recursive","","",5,[[["self"]]]],[11,"try_lock_shared_recursive","","",5,[[["self"]],["bool"]]],[11,"try_lock_shared_recursive_for","","",5,N],[11,"try_lock_shared_recursive_until","","",5,N],[11,"lock_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable","","",5,[[["self"]]]],[11,"upgrade","","",5,[[["self"]]]],[11,"try_upgrade","","",5,[[["self"]],["bool"]]],[11,"unlock_upgradable_fair","","",5,[[["self"]]]],[11,"bump_upgradable","","",5,[[["self"]]]],[11,"downgrade_upgradable","","",5,[[["self"]]]],[11,"downgrade_to_upgradable","","",5,[[["self"]]]],[11,"try_lock_upgradable_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_lock_upgradable_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"try_upgrade_until","","",5,[[["self"],["instant"]],["bool"]]],[11,"try_upgrade_for","","",5,[[["self"],["duration"]],["bool"]]],[11,"nonzero_thread_id","","",6,[[["self"]],["usize"]]],[6,"MappedMutexGuard","","An RAII mutex guard returned by `MutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"Mutex","","A mutual exclusion primitive useful for protecting shared data",N,N],[6,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedReentrantMutexGuard","","An RAII mutex guard returned by `ReentrantMutexGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"ReentrantMutex","","A mutex which can be recursively locked by a single thread.",N,N],[6,"ReentrantMutexGuard","","An RAII implementation of a \"scoped lock\" of a reentrant mutex. When this structure is dropped (falls out of scope), the lock will be unlocked.",N,N],[6,"MappedRwLockReadGuard","","An RAII read lock guard returned by `RwLockReadGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"MappedRwLockWriteGuard","","An RAII write lock guard returned by `RwLockWriteGuard::map`, which can point to a subfield of the protected data.",N,N],[6,"RwLock","","A reader-writer lock",N,N],[6,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when dropped.",N,N],[6,"RwLockUpgradableReadGuard","","RAII structure used to release the upgradable read access of a lock when dropped.",N,N],[6,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when dropped.",N,N],[17,"ONCE_INIT","","Initialization value for static `Once` values.",N,N]],"paths":[[4,"OnceState"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"]]};
searchIndex["parking_lot_core"]={"doc":"This library exposes a low-level API for creating your own efficient synchronization primitives.","items":[[3,"ParkToken","parking_lot_core","A value associated with a parked thread which can be used by `unpark_filter`.",N,N],[12,"0","","",0,N],[3,"UnparkResult","","Result of an unpark operation.",N,N],[12,"unparked_threads","","The number of threads that were unparked.",1,N],[12,"have_more_threads","","Whether there are any threads remaining in the queue. This only returns true if a thread was unparked.",1,N],[12,"be_fair","","This is set to true on average once every 0.5ms for any given key. It should be used to switch to a fair unlocking mechanism for a particular unlock.",1,N],[3,"UnparkToken","","A value which is passed from an unparker to a parked thread.",N,N],[12,"0","","",2,N],[3,"SpinWait","","A counter used to perform exponential backoff in spin loops.",N,N],[4,"FilterOp","","Operation that `unpark_filter` should perform for each thread.",N,N],[13,"Unpark","","Unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Skip","","Don't unpark the thread and continue scanning the list of parked threads.",3,N],[13,"Stop","","Don't unpark the thread and stop scanning the list of parked threads.",3,N],[4,"ParkResult","","Result of a park operation.",N,N],[13,"Unparked","","We were unparked by another thread with the given token.",4,N],[13,"Invalid","","The validation callback returned false.",4,N],[13,"TimedOut","","The timeout expired.",4,N],[4,"RequeueOp","","Operation that `unpark_requeue` should perform.",N,N],[13,"Abort","","Abort the operation without doing anything.",5,N],[13,"UnparkOneRequeueRest","","Unpark one thread and requeue the rest onto the target queue.",5,N],[13,"RequeueAll","","Requeue all threads onto the target queue.",5,N],[5,"park","","Parks the current thread in the queue associated with the given key.",N,[[["usize"],["v"],["b"],["t"],["parktoken"],["option",["instant"]]],["parkresult"]]],[5,"unpark_all","","Unparks all threads in the queue associated with the given key.",N,[[["usize"],["unparktoken"]],["usize"]]],[5,"unpark_filter","","Unparks a number of threads from the front of the queue associated with `key` depending on the results of a filter function which inspects the `ParkToken` associated with each thread.",N,[[["usize"],["f"],["c"]],["unparkresult"]]],[5,"unpark_one","","Unparks one thread from the queue associated with the given key.",N,[[["usize"],["c"]],["unparkresult"]]],[5,"unpark_requeue","","Removes all threads from the queue associated with `key_from`, optionally unparks the first one and requeues the rest onto the queue associated with `key_to`.",N,[[["usize"],["usize"],["v"],["c"]],["unparkresult"]]],[11,"clone","","",4,[[["self"]],["parkresult"]]],[11,"eq","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"ne","","",4,[[["self"],["parkresult"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"is_unparked","","Returns true if we were unparked by another thread.",4,[[["self"]],["bool"]]],[11,"clone","","",1,[[["self"]],["unparkresult"]]],[11,"eq","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"ne","","",1,[[["self"],["unparkresult"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["requeueop"]]],[11,"eq","","",5,[[["self"],["requeueop"]],["bool"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["filterop"]]],[11,"eq","","",3,[[["self"],["filterop"]],["bool"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["unparktoken"]]],[11,"eq","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"ne","","",2,[[["self"],["unparktoken"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["parktoken"]]],[11,"eq","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"ne","","",0,[[["self"],["parktoken"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new `SpinWait`.",6,[[],["spinwait"]]],[11,"reset","","Resets a `SpinWait` to its initial state.",6,[[["self"]]]],[11,"spin","","Spins until the sleep threshold has been reached.",6,[[["self"]],["bool"]]],[11,"spin_no_yield","","Spins without yielding the thread to the OS.",6,[[["self"]]]],[11,"default","","",6,[[],["spinwait"]]],[0,"deadlock","","[Experimental] Deadlock detection",N,N],[5,"acquire_resource","parking_lot_core::deadlock","Acquire a resource identified by key in the deadlock detector Noop if deadlock_detection feature isn't enabled. Note: Call after the resource is acquired",N,[[["usize"]]]],[5,"release_resource","","Release a resource identified by key in the deadlock detector. Noop if deadlock_detection feature isn't enabled. Note: Call before the resource is released # Panics Panics if the resource was already released or wasn't acquired in this thread.",N,[[["usize"]]]],[17,"DEFAULT_PARK_TOKEN","parking_lot_core","A default park token to use.",N,N],[17,"DEFAULT_UNPARK_TOKEN","","A default unpark token to use.",N,N]],"paths":[[3,"ParkToken"],[3,"UnparkResult"],[3,"UnparkToken"],[4,"FilterOp"],[4,"ParkResult"],[4,"RequeueOp"],[3,"SpinWait"]]};
searchIndex["petgraph"]={"doc":"petgraph is a graph data structure library.","items":[[4,"Direction","petgraph","Edge direction.",N,N],[13,"Outgoing","","An `Outgoing` edge is an outward edge from the current node.",0,N],[13,"Incoming","","An `Incoming` edge is an inbound edge to the current node.",0,N],[4,"Directed","","Marker type for a directed graph.",N,N],[4,"Undirected","","Marker type for an undirected graph.",N,N],[0,"visit","","Graph traits and graph traversals.",N,N],[3,"NodeFiltered","petgraph::visit","A node-filtering graph adaptor.",N,N],[12,"0","","",1,N],[12,"1","","",1,N],[3,"NodeFilteredNeighbors","","A filtered neighbors iterator.",N,N],[3,"NodeFilteredNodes","","A filtered node references iterator.",N,N],[3,"NodeFilteredEdgeReferences","","A filtered edges iterator.",N,N],[3,"NodeFilteredEdges","","A filtered edges iterator.",N,N],[3,"EdgeFiltered","","An edge-filtering graph adaptor.",N,N],[12,"0","","",2,N],[12,"1","","",2,N],[3,"EdgeFilteredNeighbors","","A filtered neighbors iterator.",N,N],[3,"EdgeFilteredEdges","","A filtered edges iterator.",N,N],[3,"Reversed","","An edge-reversing graph adaptor.",N,N],[12,"0","","",3,N],[3,"ReversedEdgeReference","","A reversed edge reference",N,N],[3,"ReversedEdgeReferences","","A reversed edge references iterator.",N,N],[3,"Time","","Strictly monotonically increasing event time for a depth first search.",N,N],[12,"0","","",4,N],[3,"Dfs","","Visit nodes of a graph in a depth-first-search (DFS) emitting nodes in preorder (when they are first discovered).",N,N],[12,"stack","","The stack of nodes to visit",5,N],[12,"discovered","","The map of discovered nodes",5,N],[3,"DfsPostOrder","","Visit nodes in a depth-first-search (DFS) emitting nodes in postorder (each node after all its descendants have been emitted).",N,N],[12,"stack","","The stack of nodes to visit",6,N],[12,"discovered","","The map of discovered nodes",6,N],[12,"finished","","The map of finished nodes",6,N],[3,"Bfs","","A breadth first search (BFS) of a graph.",N,N],[12,"stack","","The queue of nodes to visit",7,N],[12,"discovered","","The map of discovered nodes",7,N],[3,"Topo","","A topological order traversal for a graph.",N,N],[3,"WalkerIter","","A walker and its context wrapped into an iterator.",N,N],[4,"DfsEvent","","A depth first search (DFS) visitor event.",N,N],[13,"Discover","","",8,N],[13,"TreeEdge","","An edge of the tree formed by the traversal.",8,N],[13,"BackEdge","","An edge to an already visited node.",8,N],[13,"CrossForwardEdge","","A cross or forward edge.",8,N],[13,"Finish","","",8,N],[4,"Control","","Control flow for callbacks.",N,N],[13,"Continue","","",9,N],[13,"Break","","",9,N],[5,"depth_first_search","","A recursive depth first search.",N,[[["g"],["i"],["f"]],["c"]]],[11,"clone","","",4,[[["self"]],["time"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["time"]],["bool"]]],[11,"ne","","",4,[[["self"],["time"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["time"]],["option",["ordering"]]]],[11,"lt","","",4,[[["self"],["time"]],["bool"]]],[11,"le","","",4,[[["self"],["time"]],["bool"]]],[11,"gt","","",4,[[["self"],["time"]],["bool"]]],[11,"ge","","",4,[[["self"],["time"]],["bool"]]],[11,"cmp","","",4,[[["self"],["time"]],["ordering"]]],[11,"default","","",4,[[],["time"]]],[11,"hash","","",4,N],[11,"clone","","",8,[[["self"]],["dfsevent"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["control"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"breaking","","",9,[[],["control"]]],[11,"break_value","","Get the value in `Control::Break(_)`, if present.",9,[[["self"]],["option"]]],[11,"continuing","","",9,[[],["self"]]],[11,"should_break","","",9,[[["self"]],["bool"]]],[11,"default","","",9,[[],["self"]]],[11,"clone","","",5,[[["self"]],["dfs"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Dfs, using the graph's visitor map, and put start in the stack of nodes to visit.",5,[[["g"],["n"]],["self"]]],[11,"from_parts","","Create a `Dfs` from a vector and a visit map",5,[[["vec"],["vm"]],["self"]]],[11,"reset","","Clear the visit state",5,[[["self"],["g"]]]],[11,"empty","","Create a new Dfs using the graph's visitor map, and no stack.",5,[[["g"]],["self"]]],[11,"move_to","","Keep the discovered map, but clear the visit stack and restart the dfs from a particular node.",5,[[["self"],["n"]]]],[11,"next","","Return the next node in the dfs, or None if the traversal is done.",5,[[["self"],["g"]],["option"]]],[11,"clone","","",6,[[["self"]],["dfspostorder"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `DfsPostOrder` using the graph's visitor map, and put `start` in the stack of nodes to visit.",6,[[["g"],["n"]],["self"]]],[11,"empty","","Create a new `DfsPostOrder` using the graph's visitor map, and no stack.",6,[[["g"]],["self"]]],[11,"reset","","Clear the visit state",6,[[["self"],["g"]]]],[11,"move_to","","Keep the discovered and finished map, but clear the visit stack and restart the dfs from a particular node.",6,[[["self"],["n"]]]],[11,"next","","Return the next node in the traversal, or `None` if the traversal is done.",6,[[["self"],["g"]],["option"]]],[11,"clone","","",7,[[["self"]],["bfs"]]],[11,"new","","Create a new Bfs, using the graph's visitor map, and put start in the stack of nodes to visit.",7,[[["g"],["n"]],["self"]]],[11,"next","","Return the next node in the bfs, or None if the traversal is done.",7,[[["self"],["g"]],["option"]]],[11,"clone","","",10,[[["self"]],["topo"]]],[11,"new","","Create a new `Topo`, using the graph's visitor map, and put all initial nodes in the to visit list.",10,[[["g"]],["self"]]],[11,"reset","","Clear visited state, and put all initial nodes in the to visit list.",10,[[["self"],["g"]]]],[11,"next","","Return the next node in the current topological order traversal, or `None` if the traversal is at the end.",10,[[["self"],["g"]],["option"]]],[11,"clone","","",11,[[["self"]],["walkeriter"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"context","","",11,[[["self"]],["c"]]],[11,"inner_ref","","",11,[[["self"]],["w"]]],[11,"inner_mut","","",11,[[["self"]],["w"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"walk_next","","",5,[[["self"],["g"]],["option"]]],[11,"walk_next","","",6,[[["self"],["g"]],["option"]]],[11,"walk_next","","",7,[[["self"],["g"]],["option"]]],[11,"walk_next","","",10,[[["self"],["g"]],["option"]]],[11,"clone","","",1,[[["self"]],["nodefiltered"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_fn","","Create an `NodeFiltered` adaptor from the closure `filter`.",1,[[["g"],["f"]],["self"]]],[11,"next","","",12,[[["self"]],["option"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"node_weight","","",1,N],[11,"edge_weight","","",1,N],[11,"node_bound","","",1,[[["self"]],["usize"]]],[11,"to_index","","",1,N],[11,"from_index","","",1,N],[11,"visit_map","","",1,N],[11,"reset_map","","",1,N],[11,"clone","","",2,[[["self"]],["edgefiltered"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"from_fn","","Create an `EdgeFiltered` adaptor from the closure `filter`.",2,[[["g"],["f"]],["self"]]],[11,"next","","",16,[[["self"]],["option"]]],[11,"next","","",17,[[["self"]],["option"]]],[11,"node_count","","",2,[[["self"]],["usize"]]],[11,"node_bound","","",2,[[["self"]],["usize"]]],[11,"to_index","","",2,N],[11,"from_index","","",2,N],[11,"visit_map","","",2,N],[11,"reset_map","","",2,N],[11,"clone","","",3,[[["self"]],["reversed"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"neighbors","","",3,N],[11,"neighbors_directed","","",3,N],[11,"visit_map","","",3,N],[11,"reset_map","","",3,N],[11,"clone","","",18,[[["self"]],["reversededgereference"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"source","","",18,N],[11,"target","","",18,N],[11,"weight","","",18,N],[11,"id","","",18,N],[11,"edge_references","","",3,N],[11,"next","","",19,[[["self"]],["option"]]],[11,"node_bound","","",3,[[["self"]],["usize"]]],[11,"to_index","","",3,N],[11,"from_index","","",3,N],[11,"node_identifiers","","",3,N],[11,"node_references","","",3,N],[11,"node_count","","",3,[[["self"]],["usize"]]],[8,"FilterNode","","A graph filter for nodes.",N,N],[10,"include_node","","Return true to have the node be part of the graph",20,[[["self"],["n"]],["bool"]]],[8,"FilterEdge","","A graph filter for edges",N,N],[10,"include_edge","","Return true to have the edge be part of the graph",21,[[["self"],["edge"]],["bool"]]],[8,"ControlFlow","","Control flow for callbacks.",N,N],[10,"continuing","","",22,[[],["self"]]],[10,"should_break","","",22,[[["self"]],["bool"]]],[8,"Walker","","A walker is a traversal state, but where part of the traversal information is supplied manually to each next call.",N,N],[16,"Item","","",23,N],[10,"walk_next","","Advance to the next item",23,[[["self"],["context"]],["option"]]],[11,"iter","","Create an iterator out of the walker and given `context`.",23,[[["self"],["context"]],["walkeriter"]]],[8,"GraphBase","","Base graph trait: defines the associated node identifier and edge identifier types.",N,N],[16,"EdgeId","","edge identifier",24,N],[16,"NodeId","","node identifier",24,N],[8,"GraphRef","","A copyable reference to a graph.",N,N],[8,"IntoNeighbors","","Access to the neighbors of each node",N,N],[16,"Neighbors","","",25,N],[10,"neighbors","","Return an iterator of the neighbors of node `a`.",25,N],[8,"IntoNeighborsDirected","","Access to the neighbors of each node, through incoming or outgoing edges.",N,N],[16,"NeighborsDirected","","",26,N],[10,"neighbors_directed","","",26,N],[8,"IntoEdges","","Access to the edges of each node.",N,N],[16,"Edges","","",27,N],[10,"edges","","",27,N],[8,"IntoEdgesDirected","","Access to all edges of each node, in the specified direction.",N,N],[16,"EdgesDirected","","",28,N],[10,"edges_directed","","",28,N],[8,"IntoNodeIdentifiers","","Access to the sequence of the graph’s `NodeId`s.",N,N],[16,"NodeIdentifiers","","",29,N],[10,"node_identifiers","","",29,N],[8,"Data","","Define associated data for nodes and edges",N,N],[16,"NodeWeight","","",30,N],[16,"EdgeWeight","","",30,N],[8,"EdgeRef","","An edge reference.",N,N],[16,"NodeId","","",31,N],[16,"EdgeId","","",31,N],[16,"Weight","","",31,N],[10,"source","","The source node of the edge.",31,N],[10,"target","","The target node of the edge.",31,N],[10,"weight","","A reference to the weight of the edge.",31,N],[10,"id","","The edge’s identifier.",31,N],[8,"NodeRef","","A node reference.",N,N],[16,"NodeId","","",32,N],[16,"Weight","","",32,N],[10,"id","","",32,N],[10,"weight","","",32,N],[8,"IntoNodeReferences","","Access to the sequence of the graph’s nodes",N,N],[16,"NodeRef","","",33,N],[16,"NodeReferences","","",33,N],[10,"node_references","","",33,N],[8,"IntoEdgeReferences","","Access to the sequence of the graph’s edges",N,N],[16,"EdgeRef","","",34,N],[16,"EdgeReferences","","",34,N],[10,"edge_references","","",34,N],[8,"GraphProp","","Edge kind property (directed or undirected edges)",N,N],[16,"EdgeType","","The kind edges in the graph.",35,N],[11,"is_directed","","",35,[[["self"]],["bool"]]],[8,"NodeIndexable","","The graph’s `NodeId`s map to indices",N,N],[10,"node_bound","","Return an upper bound of the node indices in the graph (suitable for the size of a bitmap).",36,[[["self"]],["usize"]]],[10,"to_index","","Convert `a` to an integer index.",36,N],[10,"from_index","","Convert `i` to a node index",36,N],[8,"NodeCount","","A graph with a known node count.",N,N],[10,"node_count","","",37,[[["self"]],["usize"]]],[8,"NodeCompactIndexable","","The graph’s `NodeId`s map to indices, in a range without holes.",N,N],[8,"VisitMap","","A mapping for storing the visited status for NodeId `N`.",N,N],[10,"visit","","Mark `a` as visited.",38,[[["self"],["n"]],["bool"]]],[10,"is_visited","","Return whether `a` has been visited before.",38,[[["self"],["n"]],["bool"]]],[8,"Visitable","","A graph that can create a map that tracks the visited status of its nodes.",N,N],[16,"Map","","The associated map type",39,N],[10,"visit_map","","Create a new visitor map",39,N],[10,"reset_map","","Reset the visitor map (and resize to new size of graph if needed)",39,N],[8,"GetAdjacencyMatrix","","Create or access the adjacency matrix of a graph.",N,N],[16,"AdjMatrix","","The associated adjacency matrix type",40,N],[10,"adjacency_matrix","","Create the adjacency matrix",40,N],[10,"is_adjacent","","Return true if there is an edge from `a` to `b`, false otherwise.",40,N],[0,"data","petgraph","Graph traits for associated data and graph construction.",N,N],[3,"FilterElements","petgraph::data","An iterator that filters graph elements.",N,N],[4,"Element","","A graph element.",N,N],[13,"Node","","A graph node.",41,N],[12,"weight","petgraph::data::Element","",41,N],[13,"Edge","petgraph::data","A graph edge.",41,N],[12,"source","petgraph::data::Element","",41,N],[12,"target","","",41,N],[12,"weight","","",41,N],[8,"DataMap","petgraph::data","Access node and edge weights (associated data).",N,N],[10,"node_weight","","",42,N],[10,"edge_weight","","",42,N],[8,"DataMapMut","","Access node and edge weights mutably.",N,N],[10,"node_weight_mut","","",43,N],[10,"edge_weight_mut","","",43,N],[8,"Build","","A graph that can be extended with further nodes and edges",N,N],[10,"add_node","","",44,N],[11,"add_edge","","Add a new edge. If parallel edges (duplicate) are not allowed and the edge already exists, return `None`.",44,N],[10,"update_edge","","Add or update the edge from `a` to `b`. Return the id of the affected edge.",44,N],[8,"Create","","A graph that can be created",N,N],[10,"with_capacity","","",45,[[["usize"],["usize"]],["self"]]],[8,"FromElements","","Create a graph from an iterator of elements.",N,N],[11,"from_elements","","",46,[[["i"]],["self"]]],[8,"ElementIterator","","Iterator adaptors for iterators of `Element`.",N,N],[11,"filter_elements","","Create an iterator adaptor that filters graph elements.",47,[[["self"],["f"]],["filterelements"]]],[11,"node_weight","petgraph::visit","",3,N],[11,"edge_weight","","",3,N],[11,"node_weight_mut","","",3,N],[11,"edge_weight_mut","","",3,N],[11,"clone","petgraph::data","",41,[[["self"]],["element"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["element"]],["bool"]]],[11,"ne","","",41,[[["self"],["element"]],["bool"]]],[11,"next","","",48,[[["self"]],["option"]]],[0,"algo","petgraph","Graph algorithms.",N,N],[3,"DfsSpace","petgraph::algo","Workspace for a graph traversal.",N,N],[3,"MinSpanningTree","","An iterator producing a minimum spanning forest of a graph.",N,N],[3,"Cycle","","An algorithm error: a cycle was found in the graph.",N,N],[3,"NegativeCycle","","An algorithm error: a cycle of negative weights was found in the graph.",N,N],[5,"is_isomorphic","","[Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.",N,[[["graph"],["graph"]],["bool"]]],[5,"is_isomorphic_matching","","[Graph] Return `true` if the graphs `g0` and `g1` are isomorphic.",N,[[["graph"],["graph"],["f"],["g"]],["bool"]]],[5,"dijkstra","","[Generic] Dijkstra's shortest path algorithm.",N,N],[5,"astar","","[Generic] A* shortest path algorithm.",N,N],[5,"connected_components","","[Generic] Return the number of connected components of the graph.",N,[[["g"]],["usize"]]],[5,"is_cyclic_undirected","","[Generic] Return `true` if the input graph contains a cycle.",N,[[["g"]],["bool"]]],[5,"toposort","","[Generic] Perform a topological sort of a directed graph.",N,[[["g"],["option",["dfsspace"]]],["result",["vec","cycle"]]]],[5,"is_cyclic_directed","","[Generic] Return `true` if the input directed graph contains a cycle.",N,[[["g"]],["bool"]]],[5,"has_path_connecting","","[Generic] Check if there exists a path starting at `from` and reaching `to`.",N,N],[5,"scc","","Renamed to `kosaraju_scc`.",N,[[["g"]],["vec",["vec"]]]],[5,"kosaraju_scc","","[Generic] Compute the strongly connected components using [Kosaraju's algorithm][1].",N,[[["g"]],["vec",["vec"]]]],[5,"tarjan_scc","","[Generic] Compute the strongly connected components using [Tarjan's algorithm][1].",N,[[["g"]],["vec",["vec"]]]],[5,"condensation","","[Graph] Condense every strongly connected component into a single node and return the result.",N,[[["graph"],["bool"]],["graph",["vec"]]]],[5,"min_spanning_tree","","[Generic] Compute a minimum spanning tree of a graph.",N,[[["g"]],["minspanningtree"]]],[5,"bellman_ford","","[Generic] Compute shortest paths from node `source` to all other.",N,N],[0,"dominators","","Compute dominators of a control-flow graph.",N,N],[3,"Dominators","petgraph::algo::dominators","The dominance relation for some graph and root.",N,N],[3,"DominatorsIter","","Iterator for a node's dominators.",N,N],[5,"simple_fast","","This is an implementation of the engineered [\"Simple, Fast Dominance Algorithm\"][0] discovered by Cooper et al.",N,N],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",49,[[["self"]],["dominators"]]],[11,"root","","Get the root node used to construct these dominance relations.",49,[[["self"]],["n"]]],[11,"immediate_dominator","","Get the immediate dominator of the given node.",49,[[["self"],["n"]],["option"]]],[11,"strict_dominators","","Iterate over the given node's that strict dominators.",49,[[["self"],["n"]],["option",["dominatorsiter"]]]],[11,"dominators","","Iterate over all of the given node's dominators (including the given node itself).",49,[[["self"],["n"]],["option",["dominatorsiter"]]]],[11,"next","","",50,[[["self"]],["option"]]],[8,"Measure","petgraph::algo","Associated data that can be used for measures (such as length).",N,N],[8,"FloatMeasure","","A floating-point measure.",N,N],[10,"zero","","",51,[[],["self"]]],[10,"infinite","","",51,[[],["self"]]],[11,"clone","","",52,[[["self"]],["dfsspace"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"new","","",52,[[["g"]],["self"]]],[11,"default","","",52,[[],["self"]]],[11,"next","","",53,[[["self"]],["option"]]],[11,"clone","","",54,[[["self"]],["cycle"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["cycle"]],["bool"]]],[11,"ne","","",54,[[["self"],["cycle"]],["bool"]]],[11,"node_id","","Return a node id that participates in the cycle",54,[[["self"]],["n"]]],[11,"clone","","",55,[[["self"]],["negativecycle"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["negativecycle"]],["bool"]]],[11,"ne","","",55,[[["self"],["negativecycle"]],["bool"]]],[0,"graphmap","petgraph","`GraphMap<N, E, Ty>` is a graph datastructure where node values are mapping keys.",N,N],[3,"GraphMap","petgraph::graphmap","`GraphMap<N, E, Ty>` is a graph datastructure using an associative array of its node weights `N`.",N,N],[3,"Nodes","","",N,N],[3,"Neighbors","","",N,N],[3,"NeighborsDirected","","",N,N],[3,"Edges","","",N,N],[3,"AllEdges","","",N,N],[3,"AllEdgesMut","","",N,N],[3,"Ptr","","A reference that is hashed and compared by its pointer value.",N,N],[12,"0","","",56,N],[3,"NodeIdentifiers","","",N,N],[3,"NodeReferences","","",N,N],[6,"UnGraphMap","","A `GraphMap` with undirected edges.",N,N],[6,"DiGraphMap","","A `GraphMap` with directed edges.",N,N],[8,"NodeTrait","","A trait group for `GraphMap`'s node identifier.",N,N],[11,"clone","","",57,[[["self"]],["graphmap"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `GraphMap`",57,[[],["self"]]],[11,"with_capacity","","Create a new `GraphMap` with estimated capacity.",57,[[["usize"],["usize"]],["self"]]],[11,"capacity","","Return the current node and edge capacity of the graph.",57,N],[11,"is_directed","","Whether the graph has directed edges.",57,[[["self"]],["bool"]]],[11,"from_edges","","Create a new `GraphMap` from an iterable of edges.",57,[[["i"]],["self"]]],[11,"node_count","","Return the number of nodes in the graph.",57,[[["self"]],["usize"]]],[11,"edge_count","","Return the number of edges in the graph.",57,[[["self"]],["usize"]]],[11,"clear","","Remove all nodes and edges",57,[[["self"]]]],[11,"add_node","","Add node `n` to the graph.",57,[[["self"],["n"]],["n"]]],[11,"remove_node","","Return `true` if node `n` was removed.",57,[[["self"],["n"]],["bool"]]],[11,"contains_node","","Return `true` if the node is contained in the graph.",57,[[["self"],["n"]],["bool"]]],[11,"add_edge","","Add an edge connecting `a` and `b` to the graph, with associated data `weight`. For a directed graph, the edge is directed from `a` to `b`.",57,[[["self"],["n"],["n"],["e"]],["option"]]],[11,"remove_edge","","Remove edge from `a` to `b` from the graph and return the edge weight.",57,[[["self"],["n"],["n"]],["option"]]],[11,"contains_edge","","Return `true` if the edge connecting `a` with `b` is contained in the graph.",57,[[["self"],["n"],["n"]],["bool"]]],[11,"nodes","","Return an iterator over the nodes of the graph.",57,[[["self"]],["nodes"]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",57,[[["self"],["n"]],["neighbors"]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",57,[[["self"],["n"],["direction"]],["neighborsdirected"]]],[11,"edges","","Return an iterator of target nodes with an edge starting from `a`, paired with their respective edge weights.",57,[[["self"],["n"]],["edges"]]],[11,"edge_weight","","Return a reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",57,[[["self"],["n"],["n"]],["option"]]],[11,"edge_weight_mut","","Return a mutable reference to the edge weight connecting `a` with `b`, or `None` if the edge does not exist in the graph.",57,[[["self"],["n"],["n"]],["option"]]],[11,"all_edges","","Return an iterator over all edges of the graph with their weight in arbitrary order.",57,[[["self"]],["alledges"]]],[11,"all_edges_mut","","Return an iterator over all edges of the graph in arbitrary order, with a mutable reference to their weight.",57,[[["self"]],["alledgesmut"]]],[11,"into_graph","","Return a `Graph` that corresponds to this `GraphMap`.",57,[[["self"]],["graph"]]],[11,"from_iter","","",57,[[["i"]],["self"]]],[11,"extend","","",57,[[["self"],["i"]]]],[11,"next","","",58,[[["self"]],["option"]]],[11,"size_hint","","",58,N],[11,"next","","",59,[[["self"]],["option"]]],[11,"next","","",60,[[["self"]],["option"]]],[11,"next","","",61,[[["self"]],["option"]]],[11,"next","","",62,[[["self"]],["option"]]],[11,"size_hint","","",62,N],[11,"count","","",62,[[["self"]],["usize"]]],[11,"nth","","",62,[[["self"],["usize"]],["option"]]],[11,"last","","",62,[[["self"]],["option"]]],[11,"next_back","","",62,[[["self"]],["option"]]],[11,"next","","",63,[[["self"]],["option"]]],[11,"size_hint","","",63,N],[11,"count","","",63,[[["self"]],["usize"]]],[11,"nth","","",63,[[["self"],["usize"]],["option"]]],[11,"last","","",63,[[["self"]],["option"]]],[11,"next_back","","",63,[[["self"]],["option"]]],[11,"index","","",57,N],[11,"index_mut","","",57,N],[11,"default","","",57,[[],["self"]]],[11,"clone","","",56,[[["self"]],["self"]]],[11,"eq","","Ptr compares by pointer equality, i.e if they point to the same value",56,[[["self"],["ptr"]],["bool"]]],[11,"partial_cmp","","",56,[[["self"],["ptr"]],["option",["ordering"]]]],[11,"cmp","","Ptr is ordered by pointer value, i.e. an arbitrary but stable and total order.",56,[[["self"],["ptr"]],["ordering"]]],[11,"deref","","",56,[[["self"]],["t"]]],[11,"hash","","",56,[[["self"],["h"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"node_count","","",57,[[["self"]],["usize"]]],[11,"next","","",64,[[["self"]],["option"]]],[11,"next","","",65,[[["self"]],["option"]]],[11,"node_bound","","",57,[[["self"]],["usize"]]],[11,"to_index","","",57,N],[11,"from_index","","",57,N],[0,"dot","petgraph","Simple graphviz dot file format output.",N,N],[3,"Dot","petgraph::dot","`Dot` implements output to graphviz .dot format for a graph.",N,N],[4,"Config","","`Dot` configuration.",N,N],[13,"NodeIndexLabel","","Use indices for node labels.",66,N],[13,"EdgeIndexLabel","","Use indices for edge labels.",66,N],[13,"EdgeNoLabel","","Use no edge labels.",66,N],[11,"new","","Create a `Dot` formatting wrapper with default configuration.",67,[[["g"]],["self"]]],[11,"with_config","","Create a `Dot` formatting wrapper with custom configuration.",67,N],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["config"]],["bool"]]],[11,"ne","","",66,[[["self"],["config"]],["bool"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[0,"unionfind","petgraph","`UnionFind<K>` is a disjoint-set data structure.",N,N],[3,"UnionFind","petgraph::unionfind","`UnionFind<K>` is a disjoint-set data structure. It tracks set membership of n elements indexed from 0 to n - 1. The scalar type is `K` which must be an unsigned integer type.",N,N],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"clone","","",68,[[["self"]],["unionfind"]]],[11,"new","","Create a new `UnionFind` of `n` disjoint sets.",68,[[["usize"]],["self"]]],[11,"find","","Return the representative for `x`.",68,[[["self"],["k"]],["k"]]],[11,"find_mut","","Return the representative for `x`.",68,[[["self"],["k"]],["k"]]],[11,"union","","Unify the two sets containing `x` and `y`.",68,[[["self"],["k"],["k"]],["bool"]]],[11,"into_labeling","","Return a vector mapping each element to its representative.",68,[[["self"]],["vec"]]],[0,"csr","petgraph","Compressed Sparse Row (CSR) is a sparse adjacency matrix graph.",N,N],[3,"Csr","petgraph::csr","Compressed Sparse Row ([`CSR`]) is a sparse adjacency matrix graph.",N,N],[3,"EdgesNotSorted","","Csr creation error: edges were not in sorted order.",N,N],[3,"Edges","","",N,N],[3,"EdgeReference","","",N,N],[3,"EdgeReferences","","",N,N],[3,"Neighbors","","",N,N],[3,"NodeIdentifiers","","",N,N],[6,"NodeIndex","","Csr node index type, a plain integer.",N,N],[6,"EdgeIndex","","Csr edge index type, a plain integer.",N,N],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"default","","",69,[[],["self"]]],[11,"clone","","",69,[[["self"]],["self"]]],[11,"new","","Create an empty `Csr`.",69,[[],["self"]]],[11,"with_nodes","","Create a new [`Csr`] with `n` nodes. `N` must implement [`Default`] for the weight of each node.",69,[[["usize"]],["self"]]],[11,"clone","","",70,[[["self"]],["edgesnotsorted"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"from_sorted_edges","","Create a new `Csr` from a sorted sequence of edges",69,N],[11,"node_count","","",69,[[["self"]],["usize"]]],[11,"edge_count","","",69,[[["self"]],["usize"]]],[11,"is_directed","","",69,[[["self"]],["bool"]]],[11,"clear_edges","","Remove all edges",69,[[["self"]]]],[11,"add_node","","Adds a new node with the given weight, returning the corresponding node index.",69,[[["self"],["n"]],["nodeindex"]]],[11,"add_edge","","Return `true` if the edge was added",69,[[["self"],["nodeindex"],["nodeindex"],["e"]],["bool"]]],[11,"contains_edge","","Computes in O(log |V|) time.",69,[[["self"],["nodeindex"],["nodeindex"]],["bool"]]],[11,"out_degree","","Computes in O(1) time.",69,[[["self"],["nodeindex"]],["usize"]]],[11,"neighbors_slice","","Computes in O(1) time.",69,N],[11,"edges_slice","","Computes in O(1) time.",69,N],[11,"edges","","Return an iterator of all edges of `a`.",69,[[["self"],["nodeindex"]],["edges"]]],[11,"clone","","",71,[[["self"]],["edges"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"clone","","",72,[[["self"]],["self"]]],[11,"weight","","Access the edge’s weight.",72,[[["self"]],["e"]]],[11,"source","","",72,N],[11,"target","","",72,N],[11,"weight","","",72,[[["self"]],["e"]]],[11,"id","","",72,N],[11,"next","","",71,[[["self"]],["option"]]],[11,"next","","",73,[[["self"]],["option"]]],[11,"visit_map","","",69,[[["self"]],["fixedbitset"]]],[11,"reset_map","","",69,N],[11,"clone","","",74,[[["self"]],["neighbors"]]],[11,"fmt","","",74,[[["self"],["formatter"]],["result"]]],[11,"next","","",74,[[["self"]],["option"]]],[11,"size_hint","","",74,N],[11,"node_bound","","",69,[[["self"]],["usize"]]],[11,"to_index","","",69,N],[11,"from_index","","",69,N],[11,"index","","",69,[[["self"],["nodeindex"]],["n"]]],[11,"index_mut","","",69,[[["self"],["nodeindex"]],["n"]]],[11,"next","","",75,[[["self"]],["option"]]],[11,"size_hint","","",75,N],[11,"node_count","","",69,[[["self"]],["usize"]]],[0,"prelude","petgraph","Commonly used items.",N,N],[0,"graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",N,N],[3,"Edge","petgraph::graph","The graph's edge type.",N,N],[12,"weight","","Associated edge data.",76,N],[3,"EdgeIndex","","Edge identifier.",N,N],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",N,N],[3,"EdgeReference","","Reference to a `Graph` edge.",N,N],[3,"EdgeReferences","","Iterator over all edges of a graph.",N,N],[3,"EdgeWeightsMut","","Iterator yielding mutable access to all edge weights.",N,N],[3,"Edges","","Iterator over the edges of from or to a node",N,N],[3,"Externals","","An iterator over either the nodes without edges to them or from them.",N,N],[3,"Frozen","","`Frozen` is a graph wrapper.",N,N],[3,"Graph","","`Graph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",N,N],[3,"Neighbors","","Iterator over the neighbors of a node.",N,N],[3,"Node","","The graph's node type.",N,N],[12,"weight","","Associated node data.",77,N],[3,"NodeIndex","","Node identifier.",N,N],[3,"NodeIndices","","Iterator over the node indices of a graph.",N,N],[3,"NodeWeightsMut","","Iterator yielding mutable access to all node weights.",N,N],[3,"NodeReferences","","Iterator over all nodes of a graph.",N,N],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",N,N],[5,"edge_index","","Short version of `EdgeIndex::new`",N,[[["usize"]],["edgeindex"]]],[5,"node_index","","Short version of `NodeIndex::new`",N,[[["usize"]],["nodeindex"]]],[6,"DefaultIx","","The default integer type for graph indices. `u32` is the default to reduce the size of the graph's data and improve performance in the common case.",N,N],[6,"DiGraph","","A `Graph` with directed edges.",N,N],[6,"UnGraph","","A `Graph` with undirected edges.",N,N],[8,"GraphIndex","","A  `GraphIndex` is a node or edge index.",N,N],[8,"IndexType","","Trait for the unsigned integer type used for node and edge indices.",N,N],[10,"new","","",78,[[["usize"]],["self"]]],[10,"index","","",78,[[["self"]],["usize"]]],[10,"max","","",78,[[],["self"]]],[0,"stable_graph","petgraph","`StableGraph` keeps indices stable across removals.",N,N],[3,"StableGraph","petgraph::stable_graph","`StableGraph<N, E, Ty, Ix>` is a graph datastructure using an adjacency list representation.",N,N],[3,"NodeReferences","","Iterator over all nodes of a graph.",N,N],[3,"EdgeReference","","Reference to a `StableGraph` edge.",N,N],[3,"Edges","","Iterator over the edges of from or to a node",N,N],[3,"EdgeReferences","","Iterator over all edges of a graph.",N,N],[3,"Neighbors","","Iterator over the neighbors of a node.",N,N],[3,"WalkNeighbors","","A “walker” object that can be used to step through the edge list of a node.",N,N],[3,"NodeIndices","","Iterator over the node indices of a graph.",N,N],[3,"EdgeIndices","","Iterator over the edge indices of a graph.",N,N],[6,"StableDiGraph","","A `StableGraph` with directed edges.",N,N],[6,"StableUnGraph","","A `StableGraph` with undirected edges.",N,N],[8,"EdgeType","petgraph","A graph's edge type determines whether is has directed edges or not.",N,N],[10,"is_directed","","",79,[[],["bool"]]],[8,"IntoWeightedEdge","","Convert an element like `(i, j)` or `(i, j, w)` into a triple of source, target, edge weight.",N,N],[16,"NodeId","","",80,N],[10,"into_weighted_edge","","",80,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["direction"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["direction"]],["option",["ordering"]]]],[11,"cmp","","",0,[[["self"],["direction"]],["ordering"]]],[11,"hash","","",0,N],[11,"clone","","",0,[[["self"]],["self"]]],[11,"opposite","","Return the opposite `Direction`.",0,[[["self"]],["direction"]]],[11,"index","","Return `0` for `Outgoing` and `1` for `Incoming`.",0,[[["self"]],["usize"]]],[11,"fmt","","",81,[[["self"],["formatter"]],["result"]]],[11,"clone","","",81,[[["self"]],["self"]]],[11,"fmt","","",82,[[["self"],["formatter"]],["result"]]],[11,"clone","","",82,[[["self"]],["self"]]],[11,"is_directed","","",81,[[],["bool"]]],[11,"is_directed","","",82,[[],["bool"]]],[11,"iter","petgraph::visit","Create an iterator out of the walker and given `context`.",23,[[["self"],["context"]],["walkeriter"]]],[11,"node_count","petgraph::graph","",83,[[["self"]],["usize"]]],[11,"node_count","petgraph::stable_graph","",84,[[["self"]],["usize"]]],[11,"node_bound","petgraph::graph","",83,[[["self"]],["usize"]]],[11,"to_index","","",83,[[["self"],["nodeindex"]],["usize"]]],[11,"from_index","","",83,N],[11,"visit_map","","",83,[[["self"]],["fixedbitset"]]],[11,"reset_map","","",83,N],[11,"visit_map","petgraph::stable_graph","",84,[[["self"]],["fixedbitset"]]],[11,"reset_map","","",84,N],[11,"visit_map","petgraph::graphmap","",57,[[["self"]],["hashset"]]],[11,"reset_map","","",57,N],[11,"adjacency_matrix","","",57,[[["self"]]]],[11,"is_adjacent","","",57,N],[11,"node_weight","petgraph::graph","",83,N],[11,"edge_weight","","",83,N],[11,"node_weight_mut","","",83,N],[11,"edge_weight_mut","","",83,N],[11,"node_weight","petgraph::stable_graph","",84,N],[11,"edge_weight","","",84,N],[11,"node_weight_mut","","",84,N],[11,"edge_weight_mut","","",84,N],[11,"add_node","petgraph::graph","",83,N],[11,"add_edge","","",83,N],[11,"update_edge","","",83,N],[11,"add_node","petgraph::stable_graph","",84,N],[11,"add_edge","","",84,N],[11,"update_edge","","",84,N],[11,"add_node","petgraph::graphmap","",57,N],[11,"add_edge","","",57,N],[11,"update_edge","","",57,N],[11,"with_capacity","petgraph::graph","",83,[[["usize"],["usize"]],["self"]]],[11,"with_capacity","petgraph::stable_graph","",84,[[["usize"],["usize"]],["self"]]],[11,"with_capacity","petgraph::graphmap","",57,[[["usize"],["usize"]],["self"]]],[11,"from_elements","petgraph::graph","",83,[[["i"]],["self"]]],[11,"from_elements","petgraph::stable_graph","",84,[[["i"]],["self"]]],[11,"from_elements","petgraph::graphmap","",57,[[["i"]],["self"]]],[11,"fmt","petgraph::stable_graph","",84,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `StableGraph` with directed edges.",84,[[],["self"]]],[11,"with_capacity","","Create a new `StableGraph` with estimated capacity.",84,[[["usize"],["usize"]],["self"]]],[11,"capacity","","Return the current node and edge capacity of the graph.",84,N],[11,"clear","","Remove all nodes and edges",84,[[["self"]]]],[11,"clear_edges","","Remove all edges",84,[[["self"]]]],[11,"node_count","","Return the number of nodes (vertices) in the graph.",84,[[["self"]],["usize"]]],[11,"edge_count","","Return the number of edges in the graph.",84,[[["self"]],["usize"]]],[11,"is_directed","","Whether the graph has directed edges or not.",84,[[["self"]],["bool"]]],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",84,[[["self"],["n"]],["nodeindex"]]],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",84,[[["self"],["nodeindex"]],["option"]]],[11,"contains_node","","",84,[[["self"],["nodeindex"]],["bool"]]],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",84,[[["self"],["nodeindex"],["nodeindex"],["e"]],["edgeindex"]]],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",84,[[["self"],["nodeindex"],["nodeindex"],["e"]],["edgeindex"]]],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",84,[[["self"],["edgeindex"]],["option"]]],[11,"node_weight","","Access the weight for node `a`.",84,[[["self"],["nodeindex"]],["option"]]],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",84,[[["self"],["nodeindex"]],["option"]]],[11,"node_indices","","Return an iterator over the node indices of the graph",84,[[["self"]],["nodeindices"]]],[11,"edge_weight","","Access the weight for edge `e`.",84,[[["self"],["edgeindex"]],["option"]]],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably",84,[[["self"],["edgeindex"]],["option"]]],[11,"edge_endpoints","","Access the source and target nodes for `e`.",84,[[["self"],["edgeindex"]],["option"]]],[11,"edge_indices","","Return an iterator over the node indices of the graph",84,[[["self"]],["edgeindices"]]],[11,"find_edge","","Lookup an edge from `a` to `b`.",84,[[["self"],["nodeindex"],["nodeindex"]],["option",["edgeindex"]]]],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",84,[[["self"],["nodeindex"],["nodeindex"]],["option"]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",84,[[["self"],["nodeindex"]],["neighbors"]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",84,[[["self"],["nodeindex"],["direction"]],["neighbors"]]],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",84,[[["self"],["nodeindex"]],["neighbors"]]],[11,"edges","","Return an iterator of all edges of `a`.",84,[[["self"],["nodeindex"]],["edges"]]],[11,"edges_directed","","Return an iterator of all edges of `a`, in the specified direction.",84,[[["self"],["nodeindex"],["direction"]],["edges"]]],[11,"index_twice_mut","","Index the `StableGraph` by two indices, any combination of node or edge indices is fine.",84,N],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",84,[[["self"],["f"]]]],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",84,[[["self"],["f"]]]],[11,"from_edges","","Create a new `StableGraph` from an iterable of edges.",84,[[["i"]],["self"]]],[11,"map","","Create a new `StableGraph` by mapping node and edge weights to new values.",84,[[["self"],["f"],["g"]],["stablegraph"]]],[11,"filter_map","","Create a new `StableGraph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",84,[[["self"],["f"],["g"]],["stablegraph"]]],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",84,[[["self"],["i"]]]],[11,"clone","","",84,[[["self"]],["self"]]],[11,"clone_from","","",84,[[["self"],["self"]]]],[11,"index","","",84,[[["self"],["nodeindex"]],["n"]]],[11,"index_mut","","",84,[[["self"],["nodeindex"]],["n"]]],[11,"index","","",84,[[["self"],["edgeindex"]],["e"]]],[11,"index_mut","","",84,[[["self"],["edgeindex"]],["e"]]],[11,"default","","",84,[[],["self"]]],[11,"from","","",84,[[["graph"]],["self"]]],[11,"from","petgraph::graph","",83,[[["stablegraph"]],["self"]]],[11,"next","petgraph::stable_graph","",85,[[["self"]],["option"]]],[11,"size_hint","","",85,N],[11,"next_back","","",85,[[["self"]],["option"]]],[11,"fmt","","",86,[[["self"],["formatter"]],["result"]]],[11,"clone","","",86,[[["self"]],["self"]]],[11,"eq","","",86,[[["self"],["self"]],["bool"]]],[11,"weight","","Access the edge’s weight.",86,[[["self"]],["e"]]],[11,"source","","",86,N],[11,"target","","",86,N],[11,"weight","","",86,[[["self"]],["e"]]],[11,"id","","",86,N],[11,"next","","",87,[[["self"]],["option"]]],[11,"next","","",88,[[["self"]],["option"]]],[11,"next_back","","",88,[[["self"]],["option"]]],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",89,[[["self"]],["walkneighbors"]]],[11,"next","","",89,[[["self"]],["option",["nodeindex"]]]],[11,"clone","","",90,[[["self"]],["self"]]],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",90,[[["self"],["stablegraph"]],["option"]]],[11,"next_node","","",90,[[["self"],["stablegraph"]],["option",["nodeindex"]]]],[11,"next_edge","","",90,[[["self"],["stablegraph"]],["option",["edgeindex"]]]],[11,"next","","",91,[[["self"]],["option"]]],[11,"size_hint","","",91,N],[11,"next_back","","",91,[[["self"]],["option"]]],[11,"node_bound","","Return an upper bound of the node indices in the graph",84,[[["self"]],["usize"]]],[11,"to_index","","",84,[[["self"],["nodeindex"]],["usize"]]],[11,"from_index","","",84,N],[11,"next","","",92,[[["self"]],["option"]]],[11,"size_hint","","",92,N],[11,"next_back","","",92,[[["self"]],["option"]]],[11,"new","petgraph::graph","Create a new `Frozen` from a mutable reference to a graph.",93,[[["g"]],["self"]]],[11,"deref","","",93,[[["self"]],["g"]]],[11,"index","","",93,N],[11,"index_mut","","",93,N],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",93,N],[11,"node_weight","","",93,N],[11,"edge_weight","","",93,N],[11,"node_weight_mut","","",93,N],[11,"edge_weight_mut","","",93,N],[11,"adjacency_matrix","","",93,N],[11,"is_adjacent","","",93,N],[11,"node_count","","",93,[[["self"]],["usize"]]],[11,"node_bound","","",93,[[["self"]],["usize"]]],[11,"to_index","","",93,N],[11,"from_index","","",93,N],[11,"visit_map","","",93,N],[11,"reset_map","","",93,N],[11,"clone","","",94,[[["self"]],["nodeindex"]]],[11,"default","","",94,[[],["nodeindex"]]],[11,"eq","","",94,[[["self"],["nodeindex"]],["bool"]]],[11,"ne","","",94,[[["self"],["nodeindex"]],["bool"]]],[11,"partial_cmp","","",94,[[["self"],["nodeindex"]],["option",["ordering"]]]],[11,"lt","","",94,[[["self"],["nodeindex"]],["bool"]]],[11,"le","","",94,[[["self"],["nodeindex"]],["bool"]]],[11,"gt","","",94,[[["self"],["nodeindex"]],["bool"]]],[11,"ge","","",94,[[["self"],["nodeindex"]],["bool"]]],[11,"cmp","","",94,[[["self"],["nodeindex"]],["ordering"]]],[11,"hash","","",94,N],[11,"new","","",94,[[["usize"]],["self"]]],[11,"index","","",94,[[["self"]],["usize"]]],[11,"end","","",94,[[],["self"]]],[11,"from","","",94,[[["ix"]],["self"]]],[11,"fmt","","",94,[[["self"],["formatter"]],["result"]]],[11,"clone","","",95,[[["self"]],["edgeindex"]]],[11,"default","","",95,[[],["edgeindex"]]],[11,"eq","","",95,[[["self"],["edgeindex"]],["bool"]]],[11,"ne","","",95,[[["self"],["edgeindex"]],["bool"]]],[11,"partial_cmp","","",95,[[["self"],["edgeindex"]],["option",["ordering"]]]],[11,"lt","","",95,[[["self"],["edgeindex"]],["bool"]]],[11,"le","","",95,[[["self"],["edgeindex"]],["bool"]]],[11,"gt","","",95,[[["self"],["edgeindex"]],["bool"]]],[11,"ge","","",95,[[["self"],["edgeindex"]],["bool"]]],[11,"cmp","","",95,[[["self"],["edgeindex"]],["ordering"]]],[11,"hash","","",95,N],[11,"new","","",95,[[["usize"]],["self"]]],[11,"index","","",95,[[["self"]],["usize"]]],[11,"end","","An invalid `EdgeIndex` used to denote absence of an edge, for example to end an adjacency list.",95,[[],["self"]]],[11,"fmt","","",95,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",77,[[["self"],["formatter"]],["result"]]],[11,"clone","","",77,[[["self"]],["self"]]],[11,"next_edge","","Accessor for data structure internals: the first edge in the given direction.",77,[[["self"],["direction"]],["edgeindex"]]],[11,"fmt","","",76,[[["self"],["formatter"]],["result"]]],[11,"clone","","",76,[[["self"]],["self"]]],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",76,[[["self"],["direction"]],["edgeindex"]]],[11,"source","","Return the source node index.",76,[[["self"]],["nodeindex"]]],[11,"target","","Return the target node index.",76,[[["self"]],["nodeindex"]]],[11,"clone","","",83,[[["self"]],["self"]]],[11,"clone_from","","",83,[[["self"],["self"]]]],[11,"fmt","","",83,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Graph` with directed edges.",83,[[],["self"]]],[11,"new_undirected","","Create a new `Graph` with undirected edges.",83,[[],["self"]]],[11,"with_capacity","","Create a new `Graph` with estimated capacity.",83,[[["usize"],["usize"]],["self"]]],[11,"node_count","","Return the number of nodes (vertices) in the graph.",83,[[["self"]],["usize"]]],[11,"edge_count","","Return the number of edges in the graph.",83,[[["self"]],["usize"]]],[11,"is_directed","","Whether the graph has directed edges or not.",83,[[["self"]],["bool"]]],[11,"add_node","","Add a node (also called vertex) with associated data `weight` to the graph.",83,[[["self"],["n"]],["nodeindex"]]],[11,"node_weight","","Access the weight for node `a`.",83,[[["self"],["nodeindex"]],["option"]]],[11,"node_weight_mut","","Access the weight for node `a`, mutably.",83,[[["self"],["nodeindex"]],["option"]]],[11,"add_edge","","Add an edge from `a` to `b` to the graph, with its associated data `weight`.",83,[[["self"],["nodeindex"],["nodeindex"],["e"]],["edgeindex"]]],[11,"update_edge","","Add or update an edge from `a` to `b`. If the edge already exists, its weight is updated.",83,[[["self"],["nodeindex"],["nodeindex"],["e"]],["edgeindex"]]],[11,"edge_weight","","Access the weight for edge `e`.",83,[[["self"],["edgeindex"]],["option"]]],[11,"edge_weight_mut","","Access the weight for edge `e`, mutably.",83,[[["self"],["edgeindex"]],["option"]]],[11,"edge_endpoints","","Access the source and target nodes for `e`.",83,[[["self"],["edgeindex"]],["option"]]],[11,"remove_node","","Remove `a` from the graph if it exists, and return its weight. If it doesn't exist in the graph, return `None`.",83,[[["self"],["nodeindex"]],["option"]]],[11,"remove_edge","","Remove an edge and return its edge weight, or `None` if it didn't exist.",83,[[["self"],["edgeindex"]],["option"]]],[11,"neighbors","","Return an iterator of all nodes with an edge starting from `a`.",83,[[["self"],["nodeindex"]],["neighbors"]]],[11,"neighbors_directed","","Return an iterator of all neighbors that have an edge between them and `a`, in the specified direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",83,[[["self"],["nodeindex"],["direction"]],["neighbors"]]],[11,"neighbors_undirected","","Return an iterator of all neighbors that have an edge between them and `a`, in either direction. If the graph's edges are undirected, this is equivalent to .neighbors(a).",83,[[["self"],["nodeindex"]],["neighbors"]]],[11,"edges","","Return an iterator of all edges of `a`.",83,[[["self"],["nodeindex"]],["edges"]]],[11,"edges_directed","","Return an iterator of all edges of `a`, in the specified direction.",83,[[["self"],["nodeindex"],["direction"]],["edges"]]],[11,"contains_edge","","Lookup if there is an edge from `a` to `b`.",83,[[["self"],["nodeindex"],["nodeindex"]],["bool"]]],[11,"find_edge","","Lookup an edge from `a` to `b`.",83,[[["self"],["nodeindex"],["nodeindex"]],["option",["edgeindex"]]]],[11,"find_edge_undirected","","Lookup an edge between `a` and `b`, in either direction.",83,[[["self"],["nodeindex"],["nodeindex"]],["option"]]],[11,"externals","","Return an iterator over either the nodes without edges to them (`Incoming`) or from them (`Outgoing`).",83,[[["self"],["direction"]],["externals"]]],[11,"node_indices","","Return an iterator over the node indices of the graph",83,[[["self"]],["nodeindices"]]],[11,"node_weights_mut","","Return an iterator yielding mutable access to all node weights.",83,[[["self"]],["nodeweightsmut"]]],[11,"edge_indices","","Return an iterator over the edge indices of the graph",83,[[["self"]],["edgeindices"]]],[11,"edge_references","","Create an iterator over all edges, in indexed order.",83,[[["self"]],["edgereferences"]]],[11,"edge_weights_mut","","Return an iterator yielding mutable access to all edge weights.",83,[[["self"]],["edgeweightsmut"]]],[11,"raw_nodes","","Access the internal node array.",83,N],[11,"raw_edges","","Access the internal edge array.",83,N],[11,"into_nodes_edges","","Convert the graph into a vector of Nodes and a vector of Edges",83,N],[11,"first_edge","","Accessor for data structure internals: the first edge in the given direction.",83,[[["self"],["nodeindex"],["direction"]],["option",["edgeindex"]]]],[11,"next_edge","","Accessor for data structure internals: the next edge for the given direction.",83,[[["self"],["edgeindex"],["direction"]],["option",["edgeindex"]]]],[11,"index_twice_mut","","Index the `Graph` by two indices, any combination of node or edge indices is fine.",83,N],[11,"reverse","","Reverse the direction of all edges",83,[[["self"]]]],[11,"clear","","Remove all nodes and edges",83,[[["self"]]]],[11,"clear_edges","","Remove all edges",83,[[["self"]]]],[11,"capacity","","Return the current node and edge capacity of the graph.",83,N],[11,"reserve_nodes","","Reserves capacity for at least `additional` more nodes to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",83,[[["self"],["usize"]]]],[11,"reserve_edges","","Reserves capacity for at least `additional` more edges to be inserted in the graph. Graph may reserve more space to avoid frequent reallocations.",83,[[["self"],["usize"]]]],[11,"reserve_exact_nodes","","Reserves the minimum capacity for exactly `additional` more nodes to be inserted in the graph. Does nothing if the capacity is already sufficient.",83,[[["self"],["usize"]]]],[11,"reserve_exact_edges","","Reserves the minimum capacity for exactly `additional` more edges to be inserted in the graph. Does nothing if the capacity is already sufficient.",83,[[["self"],["usize"]]]],[11,"shrink_to_fit_nodes","","Shrinks the capacity of the underlying nodes collection as much as possible.",83,[[["self"]]]],[11,"shrink_to_fit_edges","","Shrinks the capacity of the underlying edges collection as much as possible.",83,[[["self"]]]],[11,"shrink_to_fit","","Shrinks the capacity of the graph as much as possible.",83,[[["self"]]]],[11,"retain_nodes","","Keep all nodes that return `true` from the `visit` closure, remove the others.",83,[[["self"],["f"]]]],[11,"retain_edges","","Keep all edges that return `true` from the `visit` closure, remove the others.",83,[[["self"],["f"]]]],[11,"from_edges","","Create a new `Graph` from an iterable of edges.",83,[[["i"]],["self"]]],[11,"extend_with_edges","","Extend the graph from an iterable of edges.",83,[[["self"],["i"]]]],[11,"map","","Create a new `Graph` by mapping node and edge weights to new values.",83,[[["self"],["f"],["g"]],["graph"]]],[11,"filter_map","","Create a new `Graph` by mapping nodes and edges. A node or edge may be mapped to `None` to exclude it from the resulting graph.",83,[[["self"],["f"],["g"]],["graph"]]],[11,"into_edge_type","","Convert the graph into either undirected or directed. No edge adjustments are done, so you may want to go over the result to remove or add edges.",83,[[["self"]],["graph"]]],[11,"next","","",96,[[["self"]],["option",["nodeindex"]]]],[11,"next","","",97,[[["self"]],["option",["nodeindex"]]]],[11,"clone","","",97,[[["self"]],["self"]]],[11,"detach","","Return a “walker” object that can be used to step through the neighbors and edges from the origin node.",97,[[["self"]],["walkneighbors"]]],[11,"next","","",98,[[["self"]],["option"]]],[11,"clone","","",98,[[["self"]],["self"]]],[11,"next","","",99,[[["self"]],["option"]]],[11,"size_hint","","",99,N],[11,"next","","",100,[[["self"]],["option"]]],[11,"size_hint","","",100,N],[11,"index","","",83,[[["self"],["nodeindex"]],["n"]]],[11,"index_mut","","",83,[[["self"],["nodeindex"]],["n"]]],[11,"index","","",83,[[["self"],["edgeindex"]],["e"]]],[11,"index_mut","","",83,[[["self"],["edgeindex"]],["e"]]],[11,"default","","",83,[[],["self"]]],[11,"index","","",94,[[["self"]],["usize"]]],[11,"is_node_index","","",94,[[],["bool"]]],[11,"index","","",95,[[["self"]],["usize"]]],[11,"is_node_index","","",95,[[],["bool"]]],[11,"clone","","",101,[[["self"]],["self"]]],[11,"next","","Step to the next edge and its endpoint node in the walk for graph `g`.",101,[[["self"],["graph"]],["option"]]],[11,"next_node","","",101,[[["self"],["graph"]],["option",["nodeindex"]]]],[11,"next_edge","","",101,[[["self"],["graph"]],["option",["edgeindex"]]]],[11,"clone","","",102,[[["self"]],["nodeindices"]]],[11,"fmt","","",102,[[["self"],["formatter"]],["result"]]],[11,"next","","",102,[[["self"]],["option"]]],[11,"size_hint","","",102,N],[11,"next_back","","",102,[[["self"]],["option"]]],[11,"clone","","",103,[[["self"]],["edgeindices"]]],[11,"fmt","","",103,[[["self"],["formatter"]],["result"]]],[11,"next","","",103,[[["self"]],["option"]]],[11,"size_hint","","",103,N],[11,"next_back","","",103,[[["self"]],["option"]]],[11,"fmt","","",104,[[["self"],["formatter"]],["result"]]],[11,"clone","","",104,[[["self"]],["self"]]],[11,"eq","","",104,[[["self"],["self"]],["bool"]]],[11,"next","","",105,[[["self"]],["option"]]],[11,"size_hint","","",105,N],[11,"next_back","","",105,[[["self"]],["option"]]],[11,"weight","","Access the edge’s weight.",104,[[["self"]],["e"]]],[11,"source","","",104,N],[11,"target","","",104,N],[11,"weight","","",104,[[["self"]],["e"]]],[11,"id","","",104,N],[11,"next","","",106,[[["self"]],["option"]]],[11,"size_hint","","",106,N],[11,"next_back","","",106,[[["self"]],["option"]]],[11,"adjacency_matrix","","",83,[[["self"]],["fixedbitset"]]],[11,"is_adjacent","","",83,[[["self"],["fixedbitset"],["nodeindex"],["nodeindex"]],["bool"]]],[11,"adjacency_matrix","petgraph::stable_graph","",84,[[["self"]],["fixedbitset"]]],[11,"is_adjacent","","",84,[[["self"],["fixedbitset"],["nodeindex"],["nodeindex"]],["bool"]]]],"paths":[[4,"Direction"],[3,"NodeFiltered"],[3,"EdgeFiltered"],[3,"Reversed"],[3,"Time"],[3,"Dfs"],[3,"DfsPostOrder"],[3,"Bfs"],[4,"DfsEvent"],[4,"Control"],[3,"Topo"],[3,"WalkerIter"],[3,"NodeFilteredNeighbors"],[3,"NodeFilteredNodes"],[3,"NodeFilteredEdgeReferences"],[3,"NodeFilteredEdges"],[3,"EdgeFilteredNeighbors"],[3,"EdgeFilteredEdges"],[3,"ReversedEdgeReference"],[3,"ReversedEdgeReferences"],[8,"FilterNode"],[8,"FilterEdge"],[8,"ControlFlow"],[8,"Walker"],[8,"GraphBase"],[8,"IntoNeighbors"],[8,"IntoNeighborsDirected"],[8,"IntoEdges"],[8,"IntoEdgesDirected"],[8,"IntoNodeIdentifiers"],[8,"Data"],[8,"EdgeRef"],[8,"NodeRef"],[8,"IntoNodeReferences"],[8,"IntoEdgeReferences"],[8,"GraphProp"],[8,"NodeIndexable"],[8,"NodeCount"],[8,"VisitMap"],[8,"Visitable"],[8,"GetAdjacencyMatrix"],[4,"Element"],[8,"DataMap"],[8,"DataMapMut"],[8,"Build"],[8,"Create"],[8,"FromElements"],[8,"ElementIterator"],[3,"FilterElements"],[3,"Dominators"],[3,"DominatorsIter"],[8,"FloatMeasure"],[3,"DfsSpace"],[3,"MinSpanningTree"],[3,"Cycle"],[3,"NegativeCycle"],[3,"Ptr"],[3,"GraphMap"],[3,"Nodes"],[3,"Neighbors"],[3,"NeighborsDirected"],[3,"Edges"],[3,"AllEdges"],[3,"AllEdgesMut"],[3,"NodeIdentifiers"],[3,"NodeReferences"],[4,"Config"],[3,"Dot"],[3,"UnionFind"],[3,"Csr"],[3,"EdgesNotSorted"],[3,"Edges"],[3,"EdgeReference"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"NodeIdentifiers"],[3,"Edge"],[3,"Node"],[8,"IndexType"],[8,"EdgeType"],[8,"IntoWeightedEdge"],[4,"Directed"],[4,"Undirected"],[3,"Graph"],[3,"StableGraph"],[3,"NodeReferences"],[3,"EdgeReference"],[3,"Edges"],[3,"EdgeReferences"],[3,"Neighbors"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"Frozen"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Externals"],[3,"Neighbors"],[3,"Edges"],[3,"NodeWeightsMut"],[3,"EdgeWeightsMut"],[3,"WalkNeighbors"],[3,"NodeIndices"],[3,"EdgeIndices"],[3,"EdgeReference"],[3,"NodeReferences"],[3,"EdgeReferences"]]};
searchIndex["policy"]={"doc":"","items":[[5,"main","policy","Invokes the scaling policy once with the given parameters",N,[[]]]],"paths":[]};
searchIndex["rand"]={"doc":"Utilities for random number generation","items":[[8,"RngCore","rand","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",0,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",0,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",0,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",0,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",1,N],[10,"from_seed","","Create a new PRNG using the given seed.",1,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",1,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",1,[[["r"]],["result",["error"]]]],[4,"ErrorKind","","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",2,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",2,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",2,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",2,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",3,N],[12,"msg","","The error message",3,N],[3,"Generator","","Iterator which will generate a stream of random items.",N,N],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",N,N],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g. `let mut rng = thread_rng();`.",N,[[],["threadrng"]]],[5,"weak_rng","","DEPRECATED: use [`SmallRng`] instead.",N,[[],["xorshiftrng"]]],[5,"random","","Generates a random value using the thread-local random number generator.",N,[[],["t"]]],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",N,[[["r"],["i"],["usize"]],["vec"]]],[0,"distributions","","Generating random samples from probability distributions.",N,N],[3,"Alphanumeric","rand::distributions","Sample a `char`, uniformly distributed over ASCII letters and numbers: a-z, A-Z and 0-9.",N,N],[3,"Uniform","","Sample values uniformly between two bounds.",N,N],[3,"OpenClosed01","","A distribution to sample floating point numbers uniformly in the half-open interval `(0, 1]`, i.e. including 1 but not 0.",N,N],[3,"Open01","","A distribution to sample floating point numbers uniformly in the open interval `(0, 1)`, i.e. not including either endpoint.",N,N],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",N,N],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",N,N],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",N,N],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,"StandardNormal","","Samples floating-point numbers according to the normal distribution `N(0, 1)` (a.k.a. a standard normal, or Gaussian). This is equivalent to `Normal::new(0.0, 1.0)` but faster.",N,N],[3,"Exp","","The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1","","Samples floating-point numbers according to the exponential distribution, with rate parameter `λ = 1`. This is equivalent to `Exp::new(1.0)` or sampling with `-rng.gen::<f64>().ln()`, but faster.",N,N],[3,"Pareto","","Samples floating-point numbers according to the Pareto distribution",N,N],[3,"Poisson","","The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial","","The binomial distribution `Binomial(n, p)`.",N,N],[3,"Bernoulli","","The Bernoulli distribution.",N,N],[3,"Cauchy","","The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,"DistIter","","An iterator that generates random values of `T` with distribution `D`, using `R` as the source of randomness.",N,N],[3,"Standard","","A generic random value distribution, implemented for many primitive types. Usually generates values with a numerically uniform distribution, and with a range appropriate to the type.",N,N],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",N,N],[12,"weight","","The numerical weight of this item",4,N],[12,"item","","The actual item which is being weighted",4,N],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",N,N],[0,"uniform","","A distribution uniformly sampling numbers within a given range.",N,N],[3,"Uniform","rand::distributions::uniform","Sample values uniformly between two bounds.",N,N],[3,"UniformInt","","The back-end implementing [`UniformSampler`] for integer types.",N,N],[3,"UniformFloat","","The back-end implementing [`UniformSampler`] for floating-point types.",N,N],[3,"UniformDuration","","The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,"SampleUniform","","Helper trait for creating objects using the correct implementation of [`UniformSampler`] for the sampling type.",N,N],[16,"Sampler","","The `UniformSampler` implementation supporting type `X`.",5,N],[8,"UniformSampler","","Helper trait handling actual uniform sampling.",N,N],[16,"X","","The type sampled by this implementation.",6,N],[10,"new","","Construct self, with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[10,"new_inclusive","","Construct self, with inclusive bounds `[low, high]`.",6,N],[10,"sample","","Sample a value.",6,N],[11,"sample_single","","Sample a single value uniformly from a range with inclusive lower bound and exclusive upper bound `[low, high)`.",6,N],[11,"clone","","",7,[[["self"]],["uniform"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Uniform` instance which samples uniformly from the half open range `[low, high)` (excluding `high`). Panics if `low >= high`.",7,[[["x"],["x"]],["uniform"]]],[11,"new_inclusive","","Create a new `Uniform` instance which samples uniformly from the closed range `[low, high]` (inclusive). Panics if `low > high`.",7,[[["x"],["x"]],["uniform"]]],[11,"sample","","",7,[[["self"],["r"]],["x"]]],[11,"from","","",7,[[["range"]],["uniform"]]],[11,"clone","","",8,[[["self"]],["uniformint"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"new","","",8,N],[11,"new_inclusive","","",8,N],[11,"sample","","",8,N],[11,"sample_single","","",8,N],[11,"clone","","",9,[[["self"]],["uniformfloat"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"new","","",9,N],[11,"new_inclusive","","",9,N],[11,"sample","","",9,N],[11,"sample_single","","",9,N],[11,"clone","","",10,[[["self"]],["uniformduration"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"new","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"new_inclusive","","",10,[[["duration"],["duration"]],["uniformduration"]]],[11,"sample","","",10,[[["self"],["r"]],["duration"]]],[11,"clone","rand::distributions","",11,[[["self"]],["gamma"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",11,[[["f64"],["f64"]],["gamma"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"clone","","",12,[[["self"]],["chisquared"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",12,[[["f64"]],["chisquared"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"clone","","",13,[[["self"]],["fisherf"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",13,[[["f64"],["f64"]],["fisherf"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"clone","","",14,[[["self"]],["studentt"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",14,[[["f64"]],["studentt"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"clone","","",15,[[["self"]],["standardnormal"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"sample","","",15,[[["self"],["r"]],["f64"]]],[11,"clone","","",16,[[["self"]],["normal"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",16,[[["f64"],["f64"]],["normal"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"clone","","",17,[[["self"]],["lognormal"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",17,[[["f64"],["f64"]],["lognormal"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"clone","","",18,[[["self"]],["exp1"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"sample","","",18,[[["self"],["r"]],["f64"]]],[11,"clone","","",19,[[["self"]],["exp"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",19,[[["f64"]],["exp"]]],[11,"sample","","",19,[[["self"],["r"]],["f64"]]],[11,"clone","","",20,[[["self"]],["pareto"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new Pareto distribution with given `scale` and `shape`.",20,[[["f64"],["f64"]],["pareto"]]],[11,"sample","","",20,[[["self"],["r"]],["f64"]]],[11,"clone","","",21,[[["self"]],["poisson"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Poisson` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",21,[[["f64"]],["poisson"]]],[11,"sample","","",21,[[["self"],["r"]],["u64"]]],[11,"clone","","",22,[[["self"]],["binomial"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Binomial` with the given shape parameters `n` (number of trials) and `p` (probability of success).",22,[[["u64"],["f64"]],["binomial"]]],[11,"sample","","",22,[[["self"],["r"]],["u64"]]],[11,"clone","","",23,[[["self"]],["bernoulli"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Bernoulli` with the given probability of success `p`.",23,[[["f64"]],["bernoulli"]]],[11,"sample","","",23,[[["self"],["r"]],["bool"]]],[11,"clone","","",24,[[["self"]],["cauchy"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `Cauchy` with the given shape parameters `median` the peak location and `scale` the scale factor. Panics if `scale <= 0`.",24,[[["f64"],["f64"]],["cauchy"]]],[11,"sample","","",24,[[["self"],["r"]],["f64"]]],[11,"clone","","",25,[[["self"]],["openclosed01"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"clone","","",26,[[["self"]],["open01"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["f32"]]],[11,"sample","","",25,[[["self"],["r"]],["f32"]]],[11,"sample","","",26,[[["self"],["r"]],["f32"]]],[11,"sample","","",27,[[["self"],["r"]],["f64"]]],[11,"sample","","",25,[[["self"],["r"]],["f64"]]],[11,"sample","","",26,[[["self"],["r"]],["f64"]]],[11,"sample","","",27,[[["self"],["r"]],["u8"]]],[11,"sample","","",27,[[["self"],["r"]],["u16"]]],[11,"sample","","",27,[[["self"],["r"]],["u32"]]],[11,"sample","","",27,[[["self"],["r"]],["u64"]]],[11,"sample","","",27,[[["self"],["r"]],["usize"]]],[11,"sample","","",27,[[["self"],["r"]],["i8"]]],[11,"sample","","",27,[[["self"],["r"]],["i16"]]],[11,"sample","","",27,[[["self"],["r"]],["i32"]]],[11,"sample","","",27,[[["self"],["r"]],["i64"]]],[11,"sample","","",27,[[["self"],["r"]],["isize"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"sample","","",27,[[["self"],["r"]],["char"]]],[11,"sample","","",28,[[["self"],["r"]],["char"]]],[11,"sample","","",27,[[["self"],["r"]],["bool"]]],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,N],[11,"sample","","",27,[[["self"],["r"]],["option"]]],[11,"sample","","",27,[[["self"],["r"]],["wrapping"]]],[0,"range","","DEPRECATED: Use `distributions::uniform` instead.",N,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",29,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions::uniform","",7,[[["self"],["r"]],["t"]]],[11,"ind_sample","","",7,[[["self"],["r"]],["t"]]],[11,"sample","rand::distributions","",19,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",19,[[["self"],["r"]],["f64"]]],[11,"sample","","",11,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",11,[[["self"],["r"]],["f64"]]],[11,"sample","","",12,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",12,[[["self"],["r"]],["f64"]]],[11,"sample","","",13,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",13,[[["self"],["r"]],["f64"]]],[11,"sample","","",14,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",14,[[["self"],["r"]],["f64"]]],[11,"sample","","",16,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",16,[[["self"],["r"]],["f64"]]],[11,"sample","","",17,[[["self"],["r"]],["f64"]]],[11,"ind_sample","","",17,[[["self"],["r"]],["f64"]]],[8,"Sample","","Types that can be used to create a random instance of `Support`.",N,N],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",30,[[["self"],["r"]],["support"]]],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",N,N],[10,"ind_sample","","Generate a random value.",31,[[["self"],["r"]],["support"]]],[8,"Distribution","","Types (distributions) that can be used to create a random instance of `T`.",N,N],[10,"sample","","Generate a random value of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["t"]]],[11,"sample_iter","","Create an iterator that generates random values of `T`, using `rng` as the source of randomness.",32,[[["self"],["r"]],["distiter"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"next","","",33,[[["self"]],["option"]]],[11,"size_hint","","",33,N],[11,"clone","","",27,[[["self"]],["standard"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["weighted"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `WeightedChoice`.",29,N],[11,"sample","","",29,[[["self"],["r"]],["t"]]],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"prng","","Pseudo-random number generators.",N,N],[3,"XorShiftRng","rand::prng","An Xorshift random number generator.",N,N],[0,"chacha","","The ChaCha random number generator.",N,N],[3,"ChaChaRng","rand::prng::chacha","A cryptographically secure random number generator that uses the ChaCha algorithm.",N,N],[3,"ChaChaCore","","The core of `ChaChaRng`, used with `BlockRng`.",N,N],[11,"clone","","",34,[[["self"]],["chacharng"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",34,[[["self"]],["u32"]]],[11,"next_u64","","",34,[[["self"]],["u64"]]],[11,"fill_bytes","","",34,N],[11,"try_fill_bytes","","",34,N],[11,"from_seed","","",34,N],[11,"from_rng","","",34,[[["r"]],["result",["error"]]]],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",34,[[],["chacharng"]]],[11,"set_stream","","Set the stream number.",34,[[["self"],["u64"]]]],[11,"clone","","",35,[[["self"]],["chachacore"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"generate","","",35,N],[11,"from_seed","","",35,N],[11,"from","","",34,[[["chachacore"]],["self"]]],[0,"hc128","rand::prng","The HC-128 random number generator.",N,N],[3,"Hc128Rng","rand::prng::hc128","A cryptographically secure random number generator that uses the HC-128 algorithm.",N,N],[3,"Hc128Core","","The core of `Hc128Rng`, used with `BlockRng`.",N,N],[11,"clone","","",36,[[["self"]],["hc128rng"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",36,[[["self"]],["u32"]]],[11,"next_u64","","",36,[[["self"]],["u64"]]],[11,"fill_bytes","","",36,N],[11,"try_fill_bytes","","",36,N],[11,"from_seed","","",36,N],[11,"from_rng","","",36,[[["r"]],["result",["error"]]]],[11,"clone","","",37,[[["self"]],["hc128core"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"generate","","",37,N],[11,"from_seed","","Create an HC-128 random number generator with a seed. The seed has to be 256 bits in length, matching the 128 bit `key` followed by 128 bit `iv` when HC-128 where to be used as a stream cipher.",37,N],[0,"isaac","rand::prng","The ISAAC random number generator.",N,N],[3,"IsaacRng","rand::prng::isaac","A random number generator that uses the ISAAC algorithm.",N,N],[3,"IsaacCore","","The core of `IsaacRng`, used with `BlockRng`.",N,N],[11,"clone","","",38,[[["self"]],["isaacrng"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",38,[[["self"]],["u32"]]],[11,"next_u64","","",38,[[["self"]],["u64"]]],[11,"fill_bytes","","",38,N],[11,"try_fill_bytes","","",38,N],[11,"from_seed","","",38,N],[11,"from_rng","","",38,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",38,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",38,[[["u64"]],["self"]]],[11,"clone","","",39,[[["self"]],["isaaccore"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`IsaacRng`] documentation.",39,[[["self"],["isaacarray"]]]],[11,"from_seed","","",39,N],[11,"from_rng","","",39,[[["r"]],["result",["error"]]]],[0,"isaac64","rand::prng","The ISAAC-64 random number generator.",N,N],[3,"Isaac64Rng","rand::prng::isaac64","A random number generator that uses ISAAC-64, the 64-bit variant of the ISAAC algorithm.",N,N],[3,"Isaac64Core","","The core of `Isaac64Rng`, used with `BlockRng`.",N,N],[11,"clone","","",40,[[["self"]],["isaac64rng"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",40,[[["self"]],["u32"]]],[11,"next_u64","","",40,[[["self"]],["u64"]]],[11,"fill_bytes","","",40,N],[11,"try_fill_bytes","","",40,N],[11,"from_seed","","",40,N],[11,"from_rng","","",40,[[["s"]],["result",["error"]]]],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",40,[[],["self"]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",40,[[["u64"]],["self"]]],[11,"clone","","",41,[[["self"]],["isaac64core"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"generate","","Refills the output buffer, `results`. See also the pseudocode desciption of the algorithm in the [`Isaac64Rng`] documentation.",41,[[["self"],["isaacarray"]]]],[11,"new_from_u64","","Create an ISAAC-64 random number generator using an `u64` as seed. If `seed == 0` this will produce the same stream of random numbers as the reference implementation when used unseeded.",41,[[["u64"]],["self"]]],[11,"from_seed","","",41,N],[11,"from_rng","","",41,[[["r"]],["result",["error"]]]],[11,"clone","rand::prng","",42,[[["self"]],["xorshiftrng"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",42,[[],["xorshiftrng"]]],[11,"next_u32","","",42,[[["self"]],["u32"]]],[11,"next_u64","","",42,[[["self"]],["u64"]]],[11,"fill_bytes","","",42,N],[11,"try_fill_bytes","","",42,N],[11,"from_seed","","",42,N],[11,"from_rng","","",42,[[["r"]],["result",["error"]]]],[0,"rngs","rand","Random number generators and adapters for common usage:",N,N],[3,"JitterRng","rand::rngs","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",N,N],[3,"EntropyRng","","An interface returning random data from external source(s), provided specifically for securely seeding algorithmic generators (PRNGs).",N,N],[3,"SmallRng","","An RNG recommended when small state, cheap initialization and good performance are required. The PRNG algorithm in `SmallRng` is chosen to be efficient on the current platform, without consideration for cryptography or security. The size of its state is much smaller than for [`StdRng`].",N,N],[3,"StdRng","","The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient on the current platform, to be statistically strong and unpredictable (meaning a cryptographically secure PRNG).",N,N],[3,"ThreadRng","","The type returned by [`thread_rng`], essentially just a reference to the PRNG in thread-local memory.",N,N],[3,"OsRng","","A random number generator that retrieves randomness straight from the operating system.",N,N],[4,"TimerError","","An error that can occur when [`JitterRng::test_timer`] fails.",N,N],[13,"NoTimer","","No timer available.",43,N],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",43,N],[13,"NotMonotonic","","Timer is not monotonically increasing.",43,N],[13,"TinyVariantions","","Variations of deltas of time too small.",43,N],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",43,N],[0,"adapter","","Wrappers / adapters forming RNGs",N,N],[3,"ReadRng","rand::rngs::adapter","An RNG that reads random bytes straight from any type supporting `std::io::Read`, for example files.",N,N],[3,"ReseedingRng","","A wrapper around any PRNG which reseeds the underlying PRNG after it has generated a certain number of random bytes.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReadRng` from a `Read`.",44,[[["r"]],["readrng"]]],[11,"next_u32","","",44,[[["self"]],["u32"]]],[11,"next_u64","","",44,[[["self"]],["u64"]]],[11,"fill_bytes","","",44,N],[11,"try_fill_bytes","","",44,N],[11,"fmt","","",45,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ReseedingRng` with the given parameters.",45,[[["r"],["u64"],["rsdr"]],["self"]]],[11,"reseed","","Reseed the internal PRNG.",45,[[["self"]],["result",["error"]]]],[11,"next_u32","","",45,[[["self"]],["u32"]]],[11,"next_u64","","",45,[[["self"]],["u64"]]],[11,"fill_bytes","","",45,N],[11,"try_fill_bytes","","",45,N],[11,"clone","","",45,[[["self"]],["reseedingrng"]]],[11,"fmt","rand::rngs","",46,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `EntropyRng`.",46,[[],["self"]]],[11,"default","","",46,[[],["self"]]],[11,"next_u32","","",46,[[["self"]],["u32"]]],[11,"next_u64","","",46,[[["self"]],["u64"]]],[11,"fill_bytes","","",46,N],[11,"try_fill_bytes","","",46,N],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"clone","","",47,[[["self"]],["jitterrng"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"clone","","",43,[[["self"]],["timererror"]]],[11,"eq","","",43,[[["self"],["timererror"]],["bool"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"description","","",43,[[["self"]],["str"]]],[11,"from","rand","",3,[[["timererror"]],["error"]]],[11,"new","rand::rngs","Create a new `JitterRng`. Makes use of `std::time` for a timer, or a platform-specific function with higher accuracy if necessary and available.",47,[[],["result",["jitterrng","timererror"]]]],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",47,N],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",47,[[["self"],["u8"]]]],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",47,[[["self"]],["result",["u8","timererror"]]]],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterRng` entropy collector.",47,[[["self"],["bool"]],["i64"]]],[11,"next_u32","","",47,[[["self"]],["u32"]]],[11,"next_u64","","",47,[[["self"]],["u64"]]],[11,"fill_bytes","","",47,N],[11,"try_fill_bytes","","",47,N],[0,"mock","","Mock random number generator",N,N],[3,"StepRng","rand::rngs::mock","A simple implementation of `RngCore` for testing purposes.",N,N],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"clone","","",48,[[["self"]],["steprng"]]],[11,"new","","Create a `StepRng`, yielding an arithmetic sequence starting with `initial` and incremented by `increment` each time.",48,[[["u64"],["u64"]],["self"]]],[11,"next_u32","","",48,[[["self"]],["u32"]]],[11,"next_u64","","",48,[[["self"]],["u64"]]],[11,"fill_bytes","","",48,N],[11,"try_fill_bytes","","",48,N],[11,"clone","rand::rngs","",49,[[["self"]],["smallrng"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",49,[[["self"]],["u32"]]],[11,"next_u64","","",49,[[["self"]],["u64"]]],[11,"fill_bytes","","",49,N],[11,"try_fill_bytes","","",49,N],[11,"from_seed","","",49,N],[11,"from_rng","","",49,[[["r"]],["result",["error"]]]],[11,"clone","","",50,[[["self"]],["stdrng"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",50,[[["self"]],["u32"]]],[11,"next_u64","","",50,[[["self"]],["u64"]]],[11,"fill_bytes","","",50,N],[11,"try_fill_bytes","","",50,N],[11,"from_seed","","",50,N],[11,"from_rng","","",50,[[["r"]],["result",["error"]]]],[11,"clone","","",51,[[["self"]],["threadrng"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"next_u32","","",51,[[["self"]],["u32"]]],[11,"next_u64","","",51,[[["self"]],["u64"]]],[11,"fill_bytes","","",51,N],[11,"try_fill_bytes","","",51,N],[11,"clone","","",52,[[["self"]],["osrng"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `OsRng`.",52,[[],["result",["osrng","error"]]]],[11,"next_u32","","",52,[[["self"]],["u32"]]],[11,"next_u64","","",52,[[["self"]],["u64"]]],[11,"fill_bytes","","",52,N],[11,"try_fill_bytes","","",52,N],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",N,N],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",N,[[["r"],["i"],["usize"]],["result",["vec","vec"]]]],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",N,N],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",N,N],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",N,[[["r"],["usize"],["usize"]],["vec",["usize"]]]],[8,"Rand","rand","A type that can be randomly generated using an [`Rng`].",N,N],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",53,[[["r"]],["self"]]],[8,"Rng","","An automatically-implemented extension trait on [`RngCore`] providing high-level generic methods for sampling values and other convenience methods.",N,N],[11,"gen","","Return a random value supporting the [`Standard`] distribution.",54,[[["self"]],["t"]]],[11,"gen_range","","Generate a random value in the range [`low`, `high`), i.e. inclusive of `low` and exclusive of `high`.",54,[[["self"],["t"],["t"]],["t"]]],[11,"sample","","Sample a new value, using the given distribution.",54,[[["self"],["d"]],["t"]]],[11,"sample_iter","","Create an iterator that generates values using the given distribution.",54,[[["self"],["d"]],["distiter"]]],[11,"fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]]]],[11,"try_fill","","Fill `dest` entirely with random bytes (uniform value distribution), where `dest` is any type supporting [`AsByteSliceMut`], namely slices and arrays over primitive integer types (`i8`, `i16`, `u32`, etc.).",54,[[["self"],["t"]],["result",["error"]]]],[11,"gen_bool","","Return a bool with a probability `p` of being true.",54,[[["self"],["f64"]],["bool"]]],[11,"choose","","Return a random element from `values`.",54,N],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",54,N],[11,"shuffle","","Shuffle a mutable slice in place.",54,N],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",54,[[["self"]],["generator"]]],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",54,[[["self"],["u32"]],["bool"]]],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",54,[[["self"]],["asciigenerator"]]],[8,"AsByteSliceMut","","Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut","","Return a mutable reference to self as a byte slice",55,N],[10,"to_le","","Call `to_le` on each element (i.e. byte-swap on Big Endian platforms).",55,[[["self"]]]],[8,"FromEntropy","","A convenience extension to [`SeedableRng`] allowing construction from fresh entropy. This trait is automatically implemented for any PRNG implementing [`SeedableRng`] and is not intended to be implemented by users.",N,N],[10,"from_entropy","","Creates a new instance, automatically seeded with fresh entropy.",56,[[],["self"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"next","","",57,[[["self"]],["option"]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"next","","",58,[[["self"]],["option",["char"]]]],[11,"clone","","",2,[[["self"]],["errorkind"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"cause","","",3,[[["self"]],["option",["error"]]]],[11,"read","","",0,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",2,[[["self"],["errorkind"]],["bool"]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",2,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",2,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",2,[[["self"]],["str"]]],[11,"new","","Create a new instance, with specified kind and a message.",3,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",3,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",3,[[["self"]],["option",["box"]]]]],"paths":[[8,"RngCore"],[8,"SeedableRng"],[4,"ErrorKind"],[3,"Error"],[3,"Weighted"],[8,"SampleUniform"],[8,"UniformSampler"],[3,"Uniform"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Bernoulli"],[3,"Cauchy"],[3,"OpenClosed01"],[3,"Open01"],[3,"Standard"],[3,"Alphanumeric"],[3,"WeightedChoice"],[8,"Sample"],[8,"IndependentSample"],[8,"Distribution"],[3,"DistIter"],[3,"ChaChaRng"],[3,"ChaChaCore"],[3,"Hc128Rng"],[3,"Hc128Core"],[3,"IsaacRng"],[3,"IsaacCore"],[3,"Isaac64Rng"],[3,"Isaac64Core"],[3,"XorShiftRng"],[4,"TimerError"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"EntropyRng"],[3,"JitterRng"],[3,"StepRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"OsRng"],[8,"Rand"],[8,"Rng"],[8,"AsByteSliceMut"],[8,"FromEntropy"],[3,"Generator"],[3,"AsciiGenerator"]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","items":[[4,"ErrorKind","rand_core","Error kind which can be matched over.",N,N],[13,"Unavailable","","Feature is not available; not recoverable.",0,N],[13,"Unexpected","","General failure; there may be a chance of recovery on retry.",0,N],[13,"Transient","","A transient failure which likely can be resolved or worked around.",0,N],[13,"NotReady","","Not ready yet: recommended to try again a little later.",0,N],[3,"Error","","Error type of random number generators",N,N],[12,"kind","","The error kind",1,N],[12,"msg","","The error message",1,N],[0,"block","","The `BlockRngCore` trait and implementation helpers",N,N],[8,"BlockRngCore","rand_core::block","A trait for RNGs which do not generate random numbers individually, but in blocks (typically `[u32; N]`). This technique is commonly used by cryptographic RNGs to improve performance.",N,N],[16,"Item","","Results element type, e.g. `u32`.",2,N],[16,"Results","","Results type. This is the 'block' an RNG implementing `BlockRngCore` generates, which will usually be an array like `[u32; 16]`.",2,N],[10,"generate","","Generate a new block of results.",2,N],[3,"BlockRng","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",3,N],[3,"BlockRng64","","A wrapper type implementing [`RngCore`] for some type implementing [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement a full RNG from just a `generate` function.",N,N],[12,"core","","The core part of the RNG, implementing the `generate` function.",4,N],[0,"impls","rand_core","Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next","","Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.",N,N],[5,"fill_via_u32_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"fill_via_u64_chunks","","Implement `fill_bytes` by reading chunks from the output buffer of a block based RNG.",N,N],[5,"next_u32_via_fill","","Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill","","Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le","rand_core","Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[5,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`. Borrowed from the `byteorder` crate.",N,N],[8,"RngCore","rand_core","The core of a random number generator.",N,N],[10,"next_u32","","Return the next random `u32`.",5,[[["self"]],["u32"]]],[10,"next_u64","","Return the next random `u64`.",5,[[["self"]],["u64"]]],[10,"fill_bytes","","Fill `dest` with random data.",5,N],[10,"try_fill_bytes","","Fill `dest` entirely with random data.",5,N],[8,"CryptoRng","","A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`] implementation is supposed to be cryptographically secure.",N,N],[8,"SeedableRng","","A random number generator that can be explicitly seeded.",N,N],[16,"Seed","","Seed type, which is restricted to types mutably-dereferencable as `u8` arrays (we recommend `[u8; N]` for some `N`).",6,N],[10,"from_seed","","Create a new PRNG using the given seed.",6,N],[11,"seed_from_u64","","Create a new PRNG using a `u64` seed.",6,[[["u64"]],["self"]]],[11,"from_rng","","Create a new PRNG seeded from another `Rng`.",6,[[["r"]],["result",["error"]]]],[11,"should_retry","","True if this kind of error may resolve itself on retry.",0,[[["self"]],["bool"]]],[11,"should_wait","","True if we should retry but wait before retrying",0,[[["self"]],["bool"]]],[11,"description","","A description of this error kind",0,[[["self"]],["str"]]],[11,"clone","","",0,[[["self"]],["errorkind"]]],[11,"clone","rand_core::block","",3,[[["self"]],["blockrng"]]],[11,"clone","","",4,[[["self"]],["blockrng64"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","rand_core::block","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_seed","","",3,N],[11,"seed_from_u64","","",3,[[["u64"]],["blockrng"]]],[11,"from_rng","","",3,[[["s"]],["result",["blockrng","error"]]]],[11,"from_seed","","",4,N],[11,"seed_from_u64","","",4,[[["u64"]],["blockrng64"]]],[11,"from_rng","","",4,[[["s"]],["result",["blockrng64","error"]]]],[11,"description","rand_core","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"next_u32","rand_core::block","",3,[[["self"]],["u32"]]],[11,"next_u64","","",3,[[["self"]],["u64"]]],[11,"fill_bytes","","",3,N],[11,"try_fill_bytes","","",3,N],[11,"next_u32","","",4,[[["self"]],["u32"]]],[11,"next_u64","","",4,[[["self"]],["u64"]]],[11,"fill_bytes","","",4,N],[11,"try_fill_bytes","","",4,N],[11,"read","rand_core","",5,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"eq","","",0,[[["self"],["errorkind"]],["bool"]]],[11,"new","","Create a new instance, with specified kind and a message.",1,[[["errorkind"],["str"]],["error"]]],[11,"with_cause","","Create a new instance, with specified kind, message, and a chained cause.",1,[[["errorkind"],["str"],["e"]],["error"]]],[11,"take_cause","","Take the cause, if any. This allows the embedded cause to be extracted. This uses `Option::take`, leaving `self` with no cause.",1,[[["self"]],["option",["box"]]]],[11,"new","rand_core::block","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",3,[[["r"]],["blockrng"]]],[11,"index","","Get the index into the result buffer.",3,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",3,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",3,N],[11,"new","","Create a new `BlockRng` from an existing RNG implementing `BlockRngCore`. Results will be generated on first use.",4,[[["r"]],["blockrng64"]]],[11,"index","","Get the index into the result buffer.",4,[[["self"]],["usize"]]],[11,"reset","","Reset the number of available results. This will force a new set of results to be generated on next use.",4,N],[11,"generate_and_set","","Generate a new set of results immediately, setting the index to the given value.",4,N]],"paths":[[4,"ErrorKind"],[3,"Error"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"],[8,"RngCore"],[8,"SeedableRng"]]};
searchIndex["regex"]={"doc":"This crate provides a native implementation of regular expressions that is heavily based on RE2 both in syntax and in implementation. Notably, backreferences and arbitrary lookahead/lookbehind assertions are not provided. In return, regular expression searching provided by this package has excellent worst-case performance. The specific syntax supported is documented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching Unicode strings.",N,N],[3,"Captures","","Captures represents a group of captured strings for a single match.",N,N],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",N,N],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",N,N],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"NoExpand","","NoExpand indicates literal string replacement.",N,N],[12,"0","","",0,N],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",N,N],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",N,N],[13,"Syntax","","A syntax error.",1,N],[13,"CompiledTooBig","","The compiled program exceeded the set size limit. The argument is the size limit imposed.",1,N],[13,"InvalidSet","","DEPRECATED: Will be removed on next major version bump.",1,N],[5,"quote","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",N,[[["str"],["str"]],["result",["bool","error"]]]],[0,"bytes","","Match regular expressions on arbitrary bytes.",N,N],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",N,N],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",N,N],[3,"SetMatches","","A set of matches returned by a regex set.",N,N],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",N,N],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",N,N],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",N,N],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",N,N],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a particular regular expression.",N,N],[3,"Splits","","Yields all substrings delimited by a regular expression match.",N,N],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",N,N],[3,"CaptureNames","","An iterator over the names of all possible captures.",N,N],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",N,N],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular expression.",N,N],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a regular expression.",N,N],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and the value.",N,N],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",N,N],[12,"0","","",2,N],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte string.",N,N],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"fmt","regex","",1,[[["self"],["formatter"]],["result"]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from","","",1,[[["error"]],["error"]]],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,[[["str"]],["regexbuilder"]]],[11,"compile","","Consume the builder and compile the regular expression.",4,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,[[["self"],["usize"]],["regexbuilder"]]],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,[[["str"]],["regexbuilder"]]],[11,"compile","","Consume the builder and compile the regular expression.",5,[[["self"]],["result",["regex","error"]]]],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches anything when `s` is set and matches anything except for new line when it is not set (the default).",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,[[["self"],["bool"]],["regexbuilder"]]],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,[[["self"],["usize"]],["regexbuilder"]]],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,[[["self"]],["option",["cow"]]]],[11,"clone","","",6,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",6,[[["self"],["formatter"]],["result"]]],[11,"from_str","","Attempts to parse a string into a regular expression",6,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",6,[[["str"]],["result",["regex","error"]]]],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,[[["usize"],["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,N],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",6,N],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",6,N],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",6,N],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",6,N],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",6,N],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",6,N],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular byte string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced byte string.",6,N],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",6,N],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",6,N],[11,"shortest_match","","Returns the end location of a match in the text given.",6,N],[11,"as_str","","Returns the original string of this regex.",6,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",6,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",6,[[["self"]],["usize"]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"next","","",8,[[["self"]],["option",["captures"]]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"next","","",11,[[["self"]],["option",["option"]]]],[11,"size_hint","","",11,N],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original byte string matched.",12,[[["self"],["usize"]],["option"]]],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",12,[[["self"],["usize"]],["option"]]],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",12,[[["self"],["str"]],["option"]]],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",12,[[["self"]],["subcaptures"]]],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",12,[[["self"]],["subcapturespos"]]],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",12,[[["self"]],["subcapturesnamed"]]],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`, and writes them to the `dst` buffer given.",12,N],[11,"len","","Returns the number of captured groups.",12,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,[[["self"]],["bool"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"index","","",12,N],[11,"index","","",12,N],[11,"next","","",13,[[["self"]],["option",["option"]]]],[11,"next","","",14,[[["self"]],["option",["option"]]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"replace_append","","",2,[[["self"],["captures"],["vec"]]]],[11,"no_expansion","","",2,[[["self"]],["option",["cow"]]]],[11,"clone","regex","",16,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",16,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",16,[[["self"],["str"]],["bool"]]],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,[[["self"],["str"]],["setmatches"]]],[11,"len","","Returns the total number of regular expressions in this set.",16,[[["self"]],["usize"]]],[11,"clone","","",17,[[["self"]],["setmatches"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",17,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",17,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",17,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",17,N],[11,"next","","",18,[[["self"]],["option",["usize"]]]],[11,"next_back","","",18,[[["self"]],["option",["usize"]]]],[11,"clone","","",19,[[["self"]],["setmatchesiter"]]],[11,"next","","",19,[[["self"]],["option",["usize"]]]],[11,"next_back","","",19,[[["self"]],["option",["usize"]]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","regex::bytes","",20,[[["self"]],["regexset"]]],[11,"new","","Create a new regex set with the given regular expressions.",20,[[["i"]],["result",["regexset","error"]]]],[11,"is_match","","Returns true if and only if one of the regexes in this set matches the text given.",20,N],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,N],[11,"len","","Returns the total number of regular expressions in this set.",20,[[["self"]],["usize"]]],[11,"clone","","",21,[[["self"]],["setmatches"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"matched_any","","Whether this set contains any matches.",21,[[["self"]],["bool"]]],[11,"matched","","Whether the regex at the given index matched.",21,[[["self"],["usize"]],["bool"]]],[11,"len","","The total number of regexes in the set that created these matches.",21,[[["self"]],["usize"]]],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,[[["self"]],["setmatchesiter"]]],[11,"into_iter","","",21,N],[11,"next","","",22,[[["self"]],["option",["usize"]]]],[11,"next_back","","",22,[[["self"]],["option",["usize"]]]],[11,"clone","","",23,[[["self"]],["setmatchesiter"]]],[11,"next","","",23,[[["self"]],["option",["usize"]]]],[11,"next_back","","",23,[[["self"]],["option",["usize"]]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","regex","",24,[[["self"]],["regex"]]],[11,"fmt","","Shows the original regular expression.",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Shows the original regular expression.",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["regex"]],["bool"]]],[11,"from_str","","Attempts to parse a string into a regular expression",24,[[["str"]],["result",["regex","error"]]]],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly to search, split or replace text in a string.",24,[[["str"]],["result",["regex","error"]]]],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,[[["usize"],["str"]],["result",["regex","error"]]]],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,[[["self"],["str"]],["bool"]]],[11,"find","","Returns the start and end byte range of the leftmost-first match in `text`. If no match exists, then `None` is returned.",24,[[["self"],["str"]],["option"]]],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in `text`, returning the start and end byte indices with respect to `text`.",24,[[["self"],["str"]],["findmatches"]]],[11,"captures","","Returns the capture groups corresponding to the leftmost-first match in `text`. Capture group `0` always corresponds to the entire match. If no match is found, then `None` is returned.",24,[[["self"],["str"]],["option",["captures"]]]],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched in `text`. This is operationally the same as `find_iter`, except it yields information about submatches.",24,[[["self"],["str"]],["findcaptures"]]],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the regular expression. Namely, each element of the iterator corresponds to text that isn't matched by the regular expression.",24,[[["self"],["str"]],["regexsplits"]]],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited by a match of the regular expression. (A `limit` of `0` will return no substrings.) Namely, each element of the iterator corresponds to text that isn't matched by the regular expression. The remainder of the string that is not split will be the last element in the iterator.",24,[[["self"],["str"],["usize"]],["regexsplitsn"]]],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The replacement can be a regular string (where `$N` and `$name` are expanded to match capture groups) or a function that takes the matches' `Captures` and returns the replaced string.",24,[[["self"],["str"],["r"]],["string"]]],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement provided. This is the same as calling `replacen` with `limit` set to `0`.",24,[[["self"],["str"],["r"]],["string"]]],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the replacement provided. If `limit` is 0, then all non-overlapping matches are replaced.",24,[[["self"],["str"],["usize"],["r"]],["string"]]],[11,"shortest_match","","Returns the end location of a match in the text given.",24,[[["self"],["str"]],["option",["usize"]]]],[11,"as_str","","Returns the original string of this regex.",24,[[["self"]],["str"]]],[11,"capture_names","","Returns an iterator over the capture names.",24,[[["self"]],["capturenames"]]],[11,"captures_len","","Returns the number of captures.",24,[[["self"]],["usize"]]],[11,"next","","",25,[[["self"]],["option",["option"]]]],[11,"size_hint","","",25,N],[11,"reg_replace","","",0,[[["self"],["captures"]],["cow",["str"]]]],[11,"no_expand","","",0,[[["self"]],["option",["cow"]]]],[11,"next","","",26,[[["self"]],["option",["str"]]]],[11,"next","","",27,[[["self"]],["option",["str"]]]],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns `None` if `i` is not a valid capture group or if the capture group did not match anything. The positions returned are always byte indices with respect to the original string matched.",28,[[["self"],["usize"]],["option"]]],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't a valid capture group or didn't match anything, then `None` is returned.",28,[[["self"],["usize"]],["option",["str"]]]],[11,"name","","Returns the matched string for the capture group named `name`.  If `name` isn't a valid capture group or didn't match anything, then `None` is returned.",28,[[["self"],["str"]],["option",["str"]]]],[11,"iter","","Creates an iterator of all the capture groups in order of appearance in the regular expression.",28,[[["self"]],["subcaptures"]]],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of appearance in the regular expression. Positions are byte indices in terms of the original string matched.",28,[[["self"]],["subcapturespos"]]],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group name and the value. The iterator returns these values in arbitrary order.",28,[[["self"]],["subcapturesnamed"]]],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture group `name`.",28,[[["self"],["str"]],["string"]]],[11,"len","","Returns the number of captured groups.",28,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,[[["self"]],["bool"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"index","","",28,[[["self"],["usize"]],["str"]]],[11,"index","","",28,[[["self"],["str"]],["str"]]],[11,"next","","",29,[[["self"]],["option",["option"]]]],[11,"next","","",30,[[["self"]],["option",["option"]]]],[11,"next","","",31,[[["self"]],["option"]]],[11,"next","","",32,[[["self"]],["option",["captures"]]]],[11,"next","","",33,[[["self"]],["option"]]],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",N,N],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match corresponding to the `caps` capture group.",34,[[["self"],["captures"]],["cow",["str"]]]],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,[[["self"]],["option",["cow"]]]],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,[[["self"]],["option",["cow"]]]]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","items":[[3,"Parser","regex_syntax","A convenience parser for regular expressions.",N,N],[3,"ParserBuilder","","A builder for a regular expression parser.",N,N],[4,"Error","","This error type encompasses any error that can be returned by this crate.",N,N],[13,"Parse","","An error that occurred while translating concrete syntax into abstract syntax (AST).",0,N],[13,"Translate","","An error that occurred while translating abstract syntax into a high level intermediate representation (HIR).",0,N],[5,"escape","","Escapes all regular expression meta characters in `text`.",N,[[["str"]],["string"]]],[5,"escape_into","","Escapes all meta characters in `text` and writes the result into `buf`.",N,[[["str"],["string"]]]],[5,"is_meta_character","","Returns true if the give character has significance in a regex.",N,[[["char"]],["bool"]]],[5,"is_word_character","","Returns true if and only if the given character is a Unicode word character.",N,[[["char"]],["bool"]]],[5,"is_word_byte","","Returns true if and only if the given character is an ASCII word character.",N,[[["u8"]],["bool"]]],[0,"ast","","Defines an abstract syntax for regular expressions.",N,N],[3,"Error","regex_syntax::ast","An error that occurred while parsing a regular expression into an abstract syntax tree.",N,N],[3,"Span","","Span represents the position information of a single AST item.",N,N],[12,"start","","The start byte offset.",1,N],[12,"end","","The end byte offset.",1,N],[3,"Position","","A single position in a regular expression.",N,N],[12,"offset","","The absolute offset of this position, starting at `0` from the beginning of the regular expression pattern string.",2,N],[12,"line","","The line number, starting at `1`.",2,N],[12,"column","","The approximate column number, starting at `1`.",2,N],[3,"WithComments","","An abstract syntax tree for a singular expression along with comments found.",N,N],[12,"ast","","The actual ast.",3,N],[12,"comments","","All comments found in the original regular expression.",3,N],[3,"Comment","","A comment from a regular expression with an associated span.",N,N],[12,"span","","The span of this comment, including the beginning `#` and ending `\\n`.",4,N],[12,"comment","","The comment text, starting with the first character following the `#` and ending with the last character preceding the `\\n`.",4,N],[3,"Alternation","","An alternation of regular expressions.",N,N],[12,"span","","The span of this alternation.",5,N],[12,"asts","","The alternate regular expressions.",5,N],[3,"Concat","","A concatenation of regular expressions.",N,N],[12,"span","","The span of this concatenation.",6,N],[12,"asts","","The concatenation regular expressions.",6,N],[3,"Literal","","A single literal expression.",N,N],[12,"span","","The span of this literal.",7,N],[12,"kind","","The kind of this literal.",7,N],[12,"c","","The Unicode scalar value corresponding to this literal.",7,N],[3,"ClassPerl","","A Perl character class.",N,N],[12,"span","","The span of this class.",8,N],[12,"kind","","The kind of Perl class.",8,N],[12,"negated","","Whether the class is negated or not. e.g., `\\d` is not negated but `\\D` is.",8,N],[3,"ClassAscii","","An ASCII character class.",N,N],[12,"span","","The span of this class.",9,N],[12,"kind","","The kind of ASCII class.",9,N],[12,"negated","","Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated but `[[:^alpha:]]` is.",9,N],[3,"ClassUnicode","","A Unicode character class.",N,N],[12,"span","","The span of this class.",10,N],[12,"negated","","Whether this class is negated or not.",10,N],[12,"kind","","The kind of Unicode class.",10,N],[3,"ClassBracketed","","A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span","","The span of this class.",11,N],[12,"negated","","Whether this class is negated or not. e.g., `[a]` is not negated but `[^a]` is.",11,N],[12,"kind","","The type of this set. A set is either a normal union of things, e.g., `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.",11,N],[3,"ClassSetRange","","A single character class range in a set.",N,N],[12,"span","","The span of this range.",12,N],[12,"start","","The start of this range.",12,N],[12,"end","","The end of this range.",12,N],[3,"ClassSetUnion","","A union of items inside a character class set.",N,N],[12,"span","","The span of the items in this operation. e.g., the `a-z0-9` in `[^a-z0-9]`",13,N],[12,"items","","The sequence of items that make up this union.",13,N],[3,"ClassSetBinaryOp","","A Unicode character class set operation.",N,N],[12,"span","","The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.",14,N],[12,"kind","","The type of this set operation.",14,N],[12,"lhs","","The left hand side of the operation.",14,N],[12,"rhs","","The right hand side of the operation.",14,N],[3,"Assertion","","A single zero-width assertion.",N,N],[12,"span","","The span of this assertion.",15,N],[12,"kind","","The assertion kind, e.g., `\\b` or `^`.",15,N],[3,"Repetition","","A repetition operation applied to a regular expression.",N,N],[12,"span","","The span of this operation.",16,N],[12,"op","","The actual operation.",16,N],[12,"greedy","","Whether this operation was applied greedily or not.",16,N],[12,"ast","","The regular expression under repetition.",16,N],[3,"RepetitionOp","","The repetition operator itself.",N,N],[12,"span","","The span of this operator. This includes things like `+`, `*?` and `{m,n}`.",17,N],[12,"kind","","The type of operation.",17,N],[3,"Group","","A grouped regular expression.",N,N],[12,"span","","The span of this group.",18,N],[12,"kind","","The kind of this group.",18,N],[12,"ast","","The regular expression in this group.",18,N],[3,"CaptureName","","A capture name.",N,N],[12,"span","","The span of this capture name.",19,N],[12,"name","","The capture name.",19,N],[12,"index","","The capture index.",19,N],[3,"SetFlags","","A group of flags that is not applied to a particular regular expression.",N,N],[12,"span","","The span of these flags, including the grouping parentheses.",20,N],[12,"flags","","The actual sequence of flags.",20,N],[3,"Flags","","A group of flags.",N,N],[12,"span","","The span of this group of flags.",21,N],[12,"items","","A sequence of flag items. Each item is either a flag or a negation operator.",21,N],[3,"FlagsItem","","A single item in a group of flags.",N,N],[12,"span","","The span of this item.",22,N],[12,"kind","","The kind of this item.",22,N],[4,"ErrorKind","","The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded","","The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid","","An invalid escape sequence was found in a character class set.",23,N],[13,"ClassRangeInvalid","","An invalid character class range was found. An invalid range is any range where the start is greater than the end.",23,N],[13,"ClassRangeLiteral","","An invalid range boundary was found in a character class. Range boundaries must be a single literal codepoint, but this error indicates that something else was found, such as a nested class.",23,N],[13,"ClassUnclosed","","An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty","","An empty decimal number was given where one was expected.",23,N],[13,"DecimalInvalid","","An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty","","A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid","","A bracketed hex literal did not correspond to a Unicode scalar value.",23,N],[13,"EscapeHexInvalidDigit","","An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof","","EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized","","An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation","","A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate","","A flag was used twice, e.g., `i-i`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original flag. The error position points to the duplicate flag.",23,N],[13,"FlagRepeatedNegation","regex_syntax::ast","The negation operator was used twice, e.g., `-i-s`.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the original negation operator. The error position points to the duplicate negation operator.",23,N],[13,"FlagUnexpectedEof","regex_syntax::ast","Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized","","Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate","","A duplicate capture name was found.",23,N],[12,"original","regex_syntax::ast::ErrorKind","The position of the initial occurrence of the capture name. The error position itself points to the duplicate occurrence.",23,N],[13,"GroupNameEmpty","regex_syntax::ast","A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid","","An invalid character was seen for a capture group name. This includes errors where the first character is a digit (even though subsequent characters are allowed to be digits).",23,N],[13,"GroupNameUnexpectedEof","","A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed","","An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened","","An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded","","The nest limit was exceeded. The limit stored here is the limit configured in the parser.",23,N],[13,"RepetitionCountInvalid","","The range provided in a counted repetition operator is invalid. The range is invalid if the start is greater than the end.",23,N],[13,"RepetitionCountUnclosed","","An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing","","A repetition operator was applied to a missing sub-expression. This occurs, for example, in the regex consisting of just a `*` or even `(?i)*`. It is, however, possible to create a repetition operating on an empty sub-expression. For example, `()*` is still considered valid.",23,N],[13,"UnsupportedBackreference","","When octal support is disabled, this error is produced when an octal escape is used. The octal escape is assumed to be an invocation of a backreference, which is the common case.",23,N],[13,"UnsupportedLookAround","","When syntax similar to PCRE's look-around is used, this error is returned. Some example syntaxes that are rejected include, but are not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this error is used to improve the user experience.",23,N],[4,"Ast","","An abstract syntax tree for a single regular expression.",N,N],[13,"Empty","","An empty regex that matches everything.",24,N],[13,"Flags","","A set of flags, e.g., `(?is)`.",24,N],[13,"Literal","","A single character literal, which includes escape sequences.",24,N],[13,"Dot","","The \"any character\" class.",24,N],[13,"Assertion","","A single zero-width assertion.",24,N],[13,"Class","","A single character class. This includes all forms of character classes except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.",24,N],[13,"Repetition","","A repetition operator applied to an arbitrary regular expression.",24,N],[13,"Group","","A grouped regular expression.",24,N],[13,"Alternation","","An alternation of regular expressions.",24,N],[13,"Concat","","A concatenation of regular expressions.",24,N],[4,"LiteralKind","","The kind of a single literal expression.",N,N],[13,"Verbatim","","The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation","","The literal is written as an escape because it is punctuation, e.g., `\\*` or `\\[`.",25,N],[13,"Octal","","The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed","","The literal is written as a hex code with a fixed number of digits depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or `\\U00000061`.",25,N],[13,"HexBrace","","The literal is written as a hex code with a bracketed number of digits. The only restriction is that the bracketed hex code must refer to a valid Unicode scalar value.",25,N],[13,"Special","","The literal is written as a specially recognized escape, e.g., `\\f` or `\\n`.",25,N],[4,"SpecialLiteralKind","","The type of a special literal.",N,N],[13,"Bell","","Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed","","Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab","","Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed","","Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn","","Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab","","Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space","","Space, spelled `\\` (`\\x20`). Note that this can only appear when parsing in verbose mode.",26,N],[4,"HexLiteralKind","","The type of a Unicode hex literal.",N,N],[13,"X","","A `\\x` prefix. When used without brackets, this form is limited to two digits.",27,N],[13,"UnicodeShort","","A `\\u` prefix. When used without brackets, this form is limited to four digits.",27,N],[13,"UnicodeLong","","A `\\U` prefix. When used without brackets, this form is limited to eight digits.",27,N],[4,"Class","","A single character class expression.",N,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",28,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",28,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",28,N],[4,"ClassPerlKind","","The available Perl character classes.",N,N],[13,"Digit","","Decimal numbers.",29,N],[13,"Space","","Whitespace.",29,N],[13,"Word","","Word characters.",29,N],[4,"ClassAsciiKind","","The available ASCII character classes.",N,N],[13,"Alnum","","`[0-9A-Za-z]`",30,N],[13,"Alpha","","`[A-Za-z]`",30,N],[13,"Ascii","","`[\\x00-\\x7F]`",30,N],[13,"Blank","","`[ \\t]`",30,N],[13,"Cntrl","","`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit","","`[0-9]`",30,N],[13,"Graph","","`[!-~]`",30,N],[13,"Lower","","`[a-z]`",30,N],[13,"Print","","`[ -~]`",30,N],[13,"Punct","","`[!-/:-@\\[-`{-~]`",30,N],[13,"Space","","`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper","","`[A-Z]`",30,N],[13,"Word","","`[0-9A-Za-z_]`",30,N],[13,"Xdigit","","`[0-9A-Fa-f]`",30,N],[4,"ClassUnicodeKind","","The available forms of Unicode character classes.",N,N],[13,"OneLetter","","A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named","","A binary property, general category or script. The string may be empty.",31,N],[13,"NamedValue","","A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with `value`.",31,N],[12,"name","","The property name (which may be empty).",31,N],[12,"value","","The property value (which may be empty).",31,N],[4,"ClassUnicodeOpKind","regex_syntax::ast","The type of op used in a Unicode character class.",N,N],[13,"Equal","","A property set to a specific value, e.g., `\\p{scx=Katakana}`.",32,N],[13,"Colon","","A property set to a specific value using a colon, e.g., `\\p{scx:Katakana}`.",32,N],[13,"NotEqual","","A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.",32,N],[4,"ClassSet","","A character class set.",N,N],[13,"Item","","An item, which can be a single literal, range, nested character class or a union of items.",33,N],[13,"BinaryOp","","A single binary operation (i.e., &&, -- or ~~).",33,N],[4,"ClassSetItem","","A single component of a character class set.",N,N],[13,"Empty","","An empty item.",34,N],[13,"Literal","","A single literal.",34,N],[13,"Range","","A range between two literals.",34,N],[13,"Ascii","","An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,"Unicode","","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.",34,N],[13,"Perl","","A perl character class, e.g., `\\d` or `\\W`.",34,N],[13,"Bracketed","","A bracketed character class set, which may contain zero or more character ranges and/or zero or more nested classes. e.g., `[a-zA-Z\\pL]`.",34,N],[13,"Union","","A union of items.",34,N],[4,"ClassSetBinaryOpKind","","The type of a Unicode character class set operation.",N,N],[13,"Intersection","","The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference","","The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference","","The symmetric difference of two sets. The symmetric difference is the set of elements belonging to one but not both sets. e.g., `[\\pL~~[:ascii:]]`.",35,N],[4,"AssertionKind","","An assertion kind.",N,N],[13,"StartLine","","`^`",36,N],[13,"EndLine","","`$`",36,N],[13,"StartText","","`\\A`",36,N],[13,"EndText","","`\\z`",36,N],[13,"WordBoundary","","`\\b`",36,N],[13,"NotWordBoundary","","`\\B`",36,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","`?`",37,N],[13,"ZeroOrMore","","`*`",37,N],[13,"OneOrMore","","`+`",37,N],[13,"Range","","`{m,n}`",37,N],[4,"RepetitionRange","","A range repetition operator.",N,N],[13,"Exactly","","`{m}`",38,N],[13,"AtLeast","","`{m,}`",38,N],[13,"Bounded","","`{m,n}`",38,N],[4,"GroupKind","","The kind of a group.",N,N],[13,"CaptureIndex","","`(a)`",39,N],[13,"CaptureName","","`(?P<name>a)`",39,N],[13,"NonCapturing","","`(?:a)` and `(?i:a)`",39,N],[4,"FlagsItemKind","","The kind of an item in a group of flags.",N,N],[13,"Negation","","A negation operator applied to all subsequent flags in the enclosing group.",40,N],[13,"Flag","","A single flag in a group.",40,N],[4,"Flag","","A single flag.",N,N],[13,"CaseInsensitive","","`i`",41,N],[13,"MultiLine","","`m`",41,N],[13,"DotMatchesNewLine","","`s`",41,N],[13,"SwapGreed","","`U`",41,N],[13,"Unicode","","`u`",41,N],[13,"IgnoreWhitespace","","`x`",41,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["ast"],["v"]],["result"]]],[0,"parse","","This module provides a regular expression parser.",N,N],[3,"ParserBuilder","regex_syntax::ast::parse","A builder for a regular expression parser.",N,N],[3,"Parser","","A regular expression parser.",N,N],[11,"clone","","",42,[[["self"]],["parserbuilder"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"default","","",42,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",42,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",42,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",42,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",42,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",43,[[["self"]],["parser"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",43,[[],["parser"]]],[11,"parse","","Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],["result",["ast","error"]]]],[11,"parse_with_comments","","Parse the regular expression and return an abstract syntax tree with all of the comments found in the pattern.",43,[[["self"],["str"]],["result",["withcomments","error"]]]],[0,"print","regex_syntax::ast","This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer","regex_syntax::ast::print","A printer for a regular expression abstract syntax tree.",N,N],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",44,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",44,[[["self"],["ast"],["w"]],["result"]]],[8,"Visitor","regex_syntax::ast","A trait for visiting an abstract syntax tree (AST) in depth first order.",N,N],[16,"Output","","The result of visiting an AST.",45,N],[16,"Err","","An error that visiting an AST might return.",45,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the AST or an error.",45,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"clone","","",46,[[["self"]],["error"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"eq","","",46,[[["self"],["error"]],["bool"]]],[11,"ne","","",46,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",46,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",46,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",46,[[["self"]],["span"]]],[11,"auxiliary_span","","Return an auxiliary span. This span exists only for some errors that benefit from being able to point to two locations in the original regular expression. For example, \"duplicate\" errors will have the main error position set to the duplicate occurrence while its auxiliary span will be set to the initial occurrence.",46,[[["self"]],["option",["span"]]]],[11,"clone","","",23,[[["self"]],["errorkind"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"eq","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"ne","","",23,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",46,[[["self"]],["str"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["span"]]],[11,"eq","","",1,[[["self"],["span"]],["bool"]]],[11,"ne","","",1,[[["self"],["span"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",1,[[["self"],["span"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["span"]],["option",["ordering"]]]],[11,"clone","","",2,[[["self"]],["position"]]],[11,"eq","","",2,[[["self"],["position"]],["bool"]]],[11,"ne","","",2,[[["self"],["position"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",2,[[["self"],["position"]],["ordering"]]],[11,"partial_cmp","","",2,[[["self"],["position"]],["option",["ordering"]]]],[11,"new","","Create a new span with the given positions.",1,[[["position"],["position"]],["span"]]],[11,"splat","","Create a new span using the given position as the start and end.",1,[[["position"]],["span"]]],[11,"with_start","","Create a new span by replacing the starting the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"with_end","","Create a new span by replacing the ending the position with the one given.",1,[[["self"],["position"]],["span"]]],[11,"is_one_line","","Returns true if and only if this span occurs on a single line.",1,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if and only if this span is empty. That is, it points to a single position in the concrete syntax of a regular expression.",1,[[["self"]],["bool"]]],[11,"new","","Create a new position with the given information.",2,[[["usize"],["usize"],["usize"]],["position"]]],[11,"clone","","",3,[[["self"]],["withcomments"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"ne","","",3,[[["self"],["withcomments"]],["bool"]]],[11,"clone","","",4,[[["self"]],["comment"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"eq","","",4,[[["self"],["comment"]],["bool"]]],[11,"ne","","",4,[[["self"],["comment"]],["bool"]]],[11,"clone","","",24,[[["self"]],["ast"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"eq","","",24,[[["self"],["ast"]],["bool"]]],[11,"ne","","",24,[[["self"],["ast"]],["bool"]]],[11,"span","","Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,"is_empty","","Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["alternation"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["alternation"]],["bool"]]],[11,"ne","","",5,[[["self"],["alternation"]],["bool"]]],[11,"into_ast","","Return this alternation as an AST.",5,[[["self"]],["ast"]]],[11,"clone","","",6,[[["self"]],["concat"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["concat"]],["bool"]]],[11,"ne","","",6,[[["self"],["concat"]],["bool"]]],[11,"into_ast","","Return this concatenation as an AST.",6,[[["self"]],["ast"]]],[11,"clone","","",7,[[["self"]],["literal"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["literal"]],["bool"]]],[11,"ne","","",7,[[["self"],["literal"]],["bool"]]],[11,"byte","","If this literal was written as a `\\x` hex escape, then this returns the corresponding byte value. Otherwise, this returns `None`.",7,[[["self"]],["option",["u8"]]]],[11,"clone","","",25,[[["self"]],["literalkind"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"eq","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"ne","","",25,[[["self"],["literalkind"]],["bool"]]],[11,"clone","","",26,[[["self"]],["specialliteralkind"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"eq","","",26,[[["self"],["specialliteralkind"]],["bool"]]],[11,"clone","","",27,[[["self"]],["hexliteralkind"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"eq","","",27,[[["self"],["hexliteralkind"]],["bool"]]],[11,"digits","","The number of digits that must be used with this literal form when used without brackets. When used with brackets, there is no restriction on the number of digits.",27,[[["self"]],["u32"]]],[11,"clone","","",28,[[["self"]],["class"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"eq","","",28,[[["self"],["class"]],["bool"]]],[11,"ne","","",28,[[["self"],["class"]],["bool"]]],[11,"span","","Return the span of this character class.",28,[[["self"]],["span"]]],[11,"clone","","",8,[[["self"]],["classperl"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",8,[[["self"],["classperl"]],["bool"]]],[11,"ne","","",8,[[["self"],["classperl"]],["bool"]]],[11,"clone","","",29,[[["self"]],["classperlkind"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"eq","","",29,[[["self"],["classperlkind"]],["bool"]]],[11,"clone","","",9,[[["self"]],["classascii"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"eq","","",9,[[["self"],["classascii"]],["bool"]]],[11,"ne","","",9,[[["self"],["classascii"]],["bool"]]],[11,"clone","","",30,[[["self"]],["classasciikind"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"eq","","",30,[[["self"],["classasciikind"]],["bool"]]],[11,"from_name","","Return the corresponding ClassAsciiKind variant for the given name.",30,[[["str"]],["option",["classasciikind"]]]],[11,"clone","","",10,[[["self"]],["classunicode"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"eq","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",10,[[["self"],["classunicode"]],["bool"]]],[11,"is_negated","","Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"clone","","",31,[[["self"]],["classunicodekind"]]],[11,"fmt","","",31,[[["self"],["formatter"]],["result"]]],[11,"eq","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"ne","","",31,[[["self"],["classunicodekind"]],["bool"]]],[11,"clone","","",32,[[["self"]],["classunicodeopkind"]]],[11,"fmt","","",32,[[["self"],["formatter"]],["result"]]],[11,"eq","","",32,[[["self"],["classunicodeopkind"]],["bool"]]],[11,"is_equal","","Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"clone","","",11,[[["self"]],["classbracketed"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"eq","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"ne","","",11,[[["self"],["classbracketed"]],["bool"]]],[11,"clone","","",33,[[["self"]],["classset"]]],[11,"fmt","","",33,[[["self"],["formatter"]],["result"]]],[11,"eq","","",33,[[["self"],["classset"]],["bool"]]],[11,"ne","","",33,[[["self"],["classset"]],["bool"]]],[11,"union","","Build a set from a union.",33,[[["classsetunion"]],["classset"]]],[11,"span","","Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"clone","","",34,[[["self"]],["classsetitem"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"eq","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"ne","","",34,[[["self"],["classsetitem"]],["bool"]]],[11,"span","","Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"clone","","",12,[[["self"]],["classsetrange"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"eq","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"ne","","",12,[[["self"],["classsetrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this character class range is valid.",12,[[["self"]],["bool"]]],[11,"clone","","",13,[[["self"]],["classsetunion"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"eq","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"ne","","",13,[[["self"],["classsetunion"]],["bool"]]],[11,"push","","Push a new item in this union.",13,[[["self"],["classsetitem"]]]],[11,"into_item","","Return this union as a character class set item.",13,[[["self"]],["classsetitem"]]],[11,"clone","","",14,[[["self"]],["classsetbinaryop"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"eq","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"ne","","",14,[[["self"],["classsetbinaryop"]],["bool"]]],[11,"clone","","",35,[[["self"]],["classsetbinaryopkind"]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result"]]],[11,"eq","","",35,[[["self"],["classsetbinaryopkind"]],["bool"]]],[11,"clone","","",15,[[["self"]],["assertion"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",15,[[["self"],["assertion"]],["bool"]]],[11,"ne","","",15,[[["self"],["assertion"]],["bool"]]],[11,"clone","","",36,[[["self"]],["assertionkind"]]],[11,"fmt","","",36,[[["self"],["formatter"]],["result"]]],[11,"eq","","",36,[[["self"],["assertionkind"]],["bool"]]],[11,"clone","","",16,[[["self"]],["repetition"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"eq","","",16,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",16,[[["self"],["repetition"]],["bool"]]],[11,"clone","","",17,[[["self"]],["repetitionop"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"eq","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"ne","","",17,[[["self"],["repetitionop"]],["bool"]]],[11,"clone","","",37,[[["self"]],["repetitionkind"]]],[11,"fmt","","",37,[[["self"],["formatter"]],["result"]]],[11,"eq","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",37,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",38,[[["self"]],["repetitionrange"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"eq","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",38,[[["self"],["repetitionrange"]],["bool"]]],[11,"is_valid","","Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"clone","","",18,[[["self"]],["group"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"eq","","",18,[[["self"],["group"]],["bool"]]],[11,"ne","","",18,[[["self"],["group"]],["bool"]]],[11,"flags","","If this group is non-capturing, then this returns the (possibly empty) set of flags. Otherwise, `None` is returned.",18,[[["self"]],["option",["flags"]]]],[11,"is_capturing","","Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index","","Returns the capture index of this group, if this is a capturing group.",18,[[["self"]],["option",["u32"]]]],[11,"clone","","",39,[[["self"]],["groupkind"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"eq","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",39,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",19,[[["self"]],["capturename"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"eq","","",19,[[["self"],["capturename"]],["bool"]]],[11,"ne","","",19,[[["self"],["capturename"]],["bool"]]],[11,"clone","","",20,[[["self"]],["setflags"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"eq","","",20,[[["self"],["setflags"]],["bool"]]],[11,"ne","","",20,[[["self"],["setflags"]],["bool"]]],[11,"clone","","",21,[[["self"]],["flags"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"eq","","",21,[[["self"],["flags"]],["bool"]]],[11,"ne","","",21,[[["self"],["flags"]],["bool"]]],[11,"add_item","","Add the given item to this sequence of flags.",21,[[["self"],["flagsitem"]],["option",["usize"]]]],[11,"flag_state","","Returns the state of the given flag in this set.",21,[[["self"],["flag"]],["option",["bool"]]]],[11,"clone","","",22,[[["self"]],["flagsitem"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"eq","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"ne","","",22,[[["self"],["flagsitem"]],["bool"]]],[11,"clone","","",40,[[["self"]],["flagsitemkind"]]],[11,"fmt","","",40,[[["self"],["formatter"]],["result"]]],[11,"eq","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"ne","","",40,[[["self"],["flagsitemkind"]],["bool"]]],[11,"is_negation","","Returns true if and only if this item is a negation operator.",40,[[["self"]],["bool"]]],[11,"clone","","",41,[[["self"]],["flag"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"eq","","",41,[[["self"],["flag"]],["bool"]]],[11,"drop","","",24,[[["self"]]]],[11,"drop","","",33,[[["self"]]]],[11,"clone","regex_syntax","",0,[[["self"]],["error"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"from","","",0,[[["error"]],["error"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[0,"hir","","Defines a high-level intermediate representation for regular expressions.",N,N],[3,"Error","regex_syntax::hir","An error that can occur while translating an `Ast` to a `Hir`.",N,N],[3,"Hir","","A high-level intermediate representation (HIR) for a regular expression.",N,N],[3,"ClassUnicode","","A set of characters represented by Unicode scalar values.",N,N],[3,"ClassUnicodeIter","","An iterator over all ranges in a Unicode character class.",N,N],[3,"ClassUnicodeRange","","A single range of characters represented by Unicode scalar values.",N,N],[3,"ClassBytes","","A set of characters represented by arbitrary bytes (where one byte corresponds to one character).",N,N],[3,"ClassBytesIter","","An iterator over all ranges in a byte character class.",N,N],[3,"ClassBytesRange","","A single range of characters represented by arbitrary bytes.",N,N],[3,"Group","","The high-level intermediate representation for a group.",N,N],[12,"kind","","The kind of this group. If it is a capturing group, then the kind contains the capture group index (and the name, if it is a named group).",47,N],[12,"hir","","The expression inside the capturing group, which may be empty.",47,N],[3,"Repetition","","The high-level intermediate representation of a repetition operator.",N,N],[12,"kind","","The kind of this repetition operator.",48,N],[12,"greedy","","Whether this repetition operator is greedy or not. A greedy operator will match as much as it can. A non-greedy operator will match as little as it can.",48,N],[12,"hir","","The expression being repeated.",48,N],[4,"ErrorKind","","The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed","","This error occurs when a Unicode feature is used when Unicode support is disabled. For example `(?-u:\\pL)` would trigger this error.",49,N],[13,"InvalidUtf8","","This error occurs when translating a pattern that could match a byte sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.",49,N],[13,"UnicodePropertyNotFound","","This occurs when an unrecognized Unicode property name could not be found.",49,N],[13,"UnicodePropertyValueNotFound","","This occurs when an unrecognized Unicode property value could not be found.",49,N],[13,"EmptyClassNotAllowed","","This occurs when the translator attempts to construct a character class that is empty.",49,N],[4,"HirKind","","The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty","","The empty regular expression, which matches everything, including the empty string.",50,N],[13,"Literal","","A single literal character that matches exactly this character.",50,N],[13,"Class","","A single character class that matches any of the characters in the class. A class can either consist of Unicode scalar values as characters, or it can use bytes.",50,N],[13,"Anchor","","An anchor assertion. An anchor assertion match always has zero length.",50,N],[13,"WordBoundary","","A word boundary assertion, which may or may not be Unicode aware. A word boundary assertion match always has zero length.",50,N],[13,"Repetition","","A repetition operation applied to a child expression.",50,N],[13,"Group","","A possibly capturing group, which contains a child expression.",50,N],[13,"Concat","","A concatenation of expressions. A concatenation always has at least two child expressions.",50,N],[13,"Alternation","","An alternation of expressions. An alternation always has at least two child expressions.",50,N],[4,"Literal","","The high-level intermediate representation of a literal.",N,N],[13,"Unicode","","A single character represented by a Unicode scalar value.",51,N],[13,"Byte","","A single character represented by an arbitrary byte.",51,N],[4,"Class","","The high-level intermediate representation of a character class.",N,N],[13,"Unicode","","A set of characters represented by Unicode scalar values.",52,N],[13,"Bytes","","A set of characters represented by arbitrary bytes (one byte per character).",52,N],[4,"Anchor","","The high-level intermediate representation for an anchor assertion.",N,N],[13,"StartLine","","Match the beginning of a line or the beginning of text. Specifically, this matches at the starting position of the input, or at the position immediately following a `\\n` character.",53,N],[13,"EndLine","","Match the end of a line or the end of text. Specifically, this matches at the end position of the input, or at the position immediately preceding a `\\n` character.",53,N],[13,"StartText","","Match the beginning of text. Specifically, this matches at the starting position of the input.",53,N],[13,"EndText","","Match the end of text. Specifically, this matches at the ending position of the input.",53,N],[4,"WordBoundary","","The high-level intermediate representation for a word-boundary assertion.",N,N],[13,"Unicode","","Match a Unicode-aware word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"UnicodeNegate","","Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii","","Match an ASCII-only word boundary. That is, this matches a position where the left adjacent character and right adjacent character correspond to a word and non-word or a non-word and word character.",54,N],[13,"AsciiNegate","","Match an ASCII-only negation of a word boundary.",54,N],[4,"GroupKind","","The kind of group.",N,N],[13,"CaptureIndex","","A normal unnamed capturing group.",55,N],[13,"CaptureName","","A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index","","The capture index of the group.",55,N],[13,"NonCapturing","regex_syntax::hir","A non-capturing group.",55,N],[4,"RepetitionKind","","The kind of a repetition operator.",N,N],[13,"ZeroOrOne","","Matches a sub-expression zero or one times.",56,N],[13,"ZeroOrMore","","Matches a sub-expression zero or more times.",56,N],[13,"OneOrMore","","Matches a sub-expression one or more times.",56,N],[13,"Range","","Matches a sub-expression within a bounded range of times.",56,N],[4,"RepetitionRange","","The kind of a counted repetition operator.",N,N],[13,"Exactly","","Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast","","Matches a sub-expression at least this many times.",57,N],[13,"Bounded","","Matches a sub-expression at least `m` times and at most `n` times.",57,N],[5,"visit","","Executes an implementation of `Visitor` in constant stack space.",N,[[["hir"],["v"]],["result"]]],[0,"literal","","Provides routines for extracting literal prefixes and suffixes from an `Hir`.",N,N],[3,"Literals","regex_syntax::hir::literal","A set of literal byte strings extracted from a regular expression.",N,N],[3,"Literal","","A single member of a set of literals extracted from a regular expression.",N,N],[11,"clone","","",58,[[["self"]],["literals"]]],[11,"eq","","",58,[[["self"],["literals"]],["bool"]]],[11,"ne","","",58,[[["self"],["literals"]],["bool"]]],[11,"clone","","",59,[[["self"]],["literal"]]],[11,"cmp","","",59,[[["self"],["literal"]],["ordering"]]],[11,"empty","","Returns a new empty set of literals using default limits.",58,[[],["literals"]]],[11,"prefixes","","Returns a set of literal prefixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"suffixes","","Returns a set of literal suffixes extracted from the given `Hir`.",58,[[["hir"]],["literals"]]],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],["literals"]]],[11,"limit_class","","Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],["literals"]]],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",58,N],[11,"min_len","","Returns the length of the smallest literal.",58,[[["self"]],["option",["usize"]]]],[11,"all_complete","","Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete","","Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty","","Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",58,[[["self"]],["bool"]]],[11,"to_empty","","Returns a new empty set of literals using this set's limits.",58,[[["self"]],["literals"]]],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",58,N],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",58,N],[11,"trim_suffix","","Returns a new set of literals with the given number of bytes trimmed from the suffix of each literal.",58,[[["self"],["usize"]],["option",["literals"]]]],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are guaranteed to be unambiguous.",58,[[["self"]],["literals"]]],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union","","Unions this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_product","","Extends this set with another set.",58,[[["self"],["literals"]],["bool"]]],[11,"cross_add","","Extends each literal in this set with the bytes given.",58,N],[11,"add","","Adds the given literal to this set.",58,[[["self"],["literal"]],["bool"]]],[11,"add_char_class","","Extends each literal in this set with the character class given.",58,[[["self"],["classunicode"]],["bool"]]],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",58,[[["self"],["classbytes"]],["bool"]]],[11,"cut","","Cuts every member of this set. When a member is cut, it can never be extended.",58,[[["self"]]]],[11,"reverse","","Reverses all members in place.",58,[[["self"]]]],[11,"clear","","Clears this set of all members.",58,[[["self"]]]],[11,"fmt","","",58,[[["self"],["formatter"]],["result"]]],[11,"new","","Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]]],["literal"]]],[11,"empty","","Returns a new complete empty literal.",59,[[],["literal"]]],[11,"is_cut","","Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut","","Cuts this literal.",59,[[["self"]]]],[11,"eq","","",59,[[["self"],["literal"]],["bool"]]],[11,"partial_cmp","","",59,[[["self"],["literal"]],["option",["ordering"]]]],[11,"fmt","","",59,[[["self"],["formatter"]],["result"]]],[11,"as_ref","","",59,N],[11,"deref","","",59,[[["self"]],["vec"]]],[11,"deref_mut","","",59,[[["self"]],["vec"]]],[0,"print","regex_syntax::hir","This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer","regex_syntax::hir::print","A printer for a regular expression's high-level intermediate representation.",N,N],[11,"fmt","","",60,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new printer.",60,[[],["printer"]]],[11,"print","","Print the given `Ast` to the given writer. The writer must implement `fmt::Write`. Typical implementations of `fmt::Write` that can be used here are a `fmt::Formatter` (which is available in `fmt::Display` implementations) or a `&mut String`.",60,[[["self"],["hir"],["w"]],["result"]]],[0,"translate","regex_syntax::hir","Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,"TranslatorBuilder","regex_syntax::hir::translate","A builder for constructing an AST->HIR translator.",N,N],[3,"Translator","","A translator maps abstract syntax to a high level intermediate representation.",N,N],[11,"clone","","",61,[[["self"]],["translatorbuilder"]]],[11,"fmt","","",61,[[["self"],["formatter"]],["result"]]],[11,"default","","",61,[[],["translatorbuilder"]]],[11,"new","","Create a new translator builder with a default c onfiguration.",61,[[],["translatorbuilder"]]],[11,"build","","Build a translator using the current configuration.",61,[[["self"]],["translator"]]],[11,"allow_invalid_utf8","","When enabled, translation will permit the construction of a regular expression that may match invalid UTF-8.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag (`i`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag (`m`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag (`s`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",61,[[["self"],["bool"]],["translatorbuilder"]]],[11,"clone","","",62,[[["self"]],["translator"]]],[11,"fmt","","",62,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new translator using the default configuration.",62,[[],["translator"]]],[11,"translate","","Translate the given abstract syntax tree (AST) into a high level intermediate representation (HIR).",62,[[["self"],["str"],["ast"]],["result",["hir","error"]]]],[8,"Visitor","regex_syntax::hir","A trait for visiting the high-level IR (HIR) in depth first order.",N,N],[16,"Output","","The result of visiting an HIR.",63,N],[16,"Err","","An error that visiting an HIR might return.",63,N],[10,"finish","","All implementors of `Visitor` must provide a `finish` method, which yields the result of visiting the HIR or an error.",63,[[["self"]],["result"]]],[11,"start","","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]],[11,"clone","","",64,[[["self"]],["error"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"eq","","",64,[[["self"],["error"]],["bool"]]],[11,"ne","","",64,[[["self"],["error"]],["bool"]]],[11,"kind","","Return the type of this error.",64,[[["self"]],["errorkind"]]],[11,"pattern","","The original pattern string in which this error occurred.",64,[[["self"]],["str"]]],[11,"span","","Return the span at which this error occurred.",64,[[["self"]],["span"]]],[11,"clone","","",49,[[["self"]],["errorkind"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"eq","","",49,[[["self"],["errorkind"]],["bool"]]],[11,"description","","",64,[[["self"]],["str"]]],[11,"fmt","","",64,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",49,[[["self"],["formatter"]],["result"]]],[11,"clone","","",65,[[["self"]],["hir"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"eq","","",65,[[["self"],["hir"]],["bool"]]],[11,"ne","","",65,[[["self"],["hir"]],["bool"]]],[11,"clone","","",50,[[["self"]],["hirkind"]]],[11,"fmt","","",50,[[["self"],["formatter"]],["result"]]],[11,"eq","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"ne","","",50,[[["self"],["hirkind"]],["bool"]]],[11,"kind","","Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind","","Consumes ownership of this HIR expression and returns its underlying `HirKind`.",65,[[["self"]],["hirkind"]]],[11,"empty","","Returns an empty HIR expression.",65,[[],["hir"]]],[11,"literal","","Creates a literal HIR expression.",65,[[["literal"]],["hir"]]],[11,"class","","Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor","","Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary","","Creates a word boundary assertion HIR expression.",65,[[["wordboundary"]],["hir"]]],[11,"repetition","","Creates a repetition HIR expression.",65,[[["repetition"]],["hir"]]],[11,"group","","Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat","","Returns the concatenation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"alternation","","Returns the alternation of the given expressions.",65,[[["vec",["hir"]]],["hir"]]],[11,"dot","","Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any","","Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,"is_always_utf8","","Return true if and only if this HIR will always match valid UTF-8.",65,[[["self"]],["bool"]]],[11,"is_all_assertions","","Returns true if and only if this entire HIR expression is made up of zero-width assertions.",65,[[["self"]],["bool"]]],[11,"is_anchored_start","","Return true if and only if this HIR is required to match from the beginning of text. This includes expressions like `^foo`, `^(foo|bar)`, `^foo|^bar` but not `^foo|bar`.",65,[[["self"]],["bool"]]],[11,"is_anchored_end","","Return true if and only if this HIR is required to match at the end of text. This includes expressions like `foo$`, `(foo|bar)$`, `foo$|bar$` but not `foo$|bar`.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_start","","Return true if and only if this HIR contains any sub-expression that is required to match at the beginning of text. Specifically, this returns true if the `^` symbol (when multiline mode is disabled) or the `\\A` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_any_anchored_end","","Return true if and only if this HIR contains any sub-expression that is required to match at the end of text. Specifically, this returns true if the `$` symbol (when multiline mode is disabled) or the `\\z` escape appear anywhere in the regex.",65,[[["self"]],["bool"]]],[11,"is_match_empty","","Return true if and only if the empty string is part of the language matched by this regular expression.",65,[[["self"]],["bool"]]],[11,"is_empty","","Return true if and only if this HIR is the empty regular expression.",50,[[["self"]],["bool"]]],[11,"has_subexprs","","Returns true if and only if this kind has any (including possibly empty) subexpressions.",50,[[["self"]],["bool"]]],[11,"fmt","","",65,[[["self"],["formatter"]],["result"]]],[11,"clone","","",51,[[["self"]],["literal"]]],[11,"fmt","","",51,[[["self"],["formatter"]],["result"]]],[11,"eq","","",51,[[["self"],["literal"]],["bool"]]],[11,"ne","","",51,[[["self"],["literal"]],["bool"]]],[11,"is_unicode","","Returns true if and only if this literal corresponds to a Unicode scalar value.",51,[[["self"]],["bool"]]],[11,"clone","","",52,[[["self"]],["class"]]],[11,"fmt","","",52,[[["self"],["formatter"]],["result"]]],[11,"eq","","",52,[[["self"],["class"]],["bool"]]],[11,"ne","","",52,[[["self"],["class"]],["bool"]]],[11,"case_fold_simple","","Apply Unicode simple case folding to this character class, in place. The character class will be expanded to include all simple case folded character variants.",52,[[["self"]]]],[11,"negate","","Negate this character class in place.",52,[[["self"]]]],[11,"is_always_utf8","","Returns true if and only if this character class will only ever match valid UTF-8.",52,[[["self"]],["bool"]]],[11,"clone","","",66,[[["self"]],["classunicode"]]],[11,"fmt","","",66,[[["self"],["formatter"]],["result"]]],[11,"eq","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"ne","","",66,[[["self"],["classunicode"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",66,[[["i"]],["classunicode"]]],[11,"empty","","Create a new class with no ranges.",66,[[],["classunicode"]]],[11,"push","","Add a new range to this set.",66,[[["self"],["classunicoderange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",66,[[["self"]],["classunicodeiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",66,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters, according to Unicode's \"simple\" mapping. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",66,[[["self"]]]],[11,"negate","","Negate this character class.",66,[[["self"]]]],[11,"union","","Union this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"intersect","","Intersect this character class with the given character class, in place.",66,[[["self"],["classunicode"]]]],[11,"difference","","Subtract the given character class from this character class, in place.",66,[[["self"],["classunicode"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given character classes, in place.",66,[[["self"],["classunicode"]]]],[11,"fmt","","",67,[[["self"],["formatter"]],["result"]]],[11,"next","","",67,[[["self"]],["option",["classunicoderange"]]]],[11,"clone","","",68,[[["self"]],["classunicoderange"]]],[11,"default","","",68,[[],["classunicoderange"]]],[11,"eq","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ne","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"partial_cmp","","",68,[[["self"],["classunicoderange"]],["option",["ordering"]]]],[11,"lt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"le","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"gt","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"ge","","",68,[[["self"],["classunicoderange"]],["bool"]]],[11,"cmp","","",68,[[["self"],["classunicoderange"]],["ordering"]]],[11,"fmt","","",68,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Unicode scalar value range for a character class.",68,[[["char"],["char"]],["classunicoderange"]]],[11,"start","","Return the start of this range.",68,[[["self"]],["char"]]],[11,"end","","Return the end of this range.",68,[[["self"]],["char"]]],[11,"clone","","",69,[[["self"]],["classbytes"]]],[11,"fmt","","",69,[[["self"],["formatter"]],["result"]]],[11,"eq","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"ne","","",69,[[["self"],["classbytes"]],["bool"]]],[11,"new","","Create a new class from a sequence of ranges.",69,[[["i"]],["classbytes"]]],[11,"empty","","Create a new class with no ranges.",69,[[],["classbytes"]]],[11,"push","","Add a new range to this set.",69,[[["self"],["classbytesrange"]]]],[11,"iter","","Return an iterator over all ranges in this class.",69,[[["self"]],["classbytesiter"]]],[11,"ranges","","Return the underlying ranges as a slice.",69,N],[11,"case_fold_simple","","Expand this character class such that it contains all case folded characters. For example, if this class consists of the range `a-z`, then applying case folding will result in the class containing both the ranges `a-z` and `A-Z`.",69,[[["self"]]]],[11,"negate","","Negate this byte class.",69,[[["self"]]]],[11,"union","","Union this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"intersect","","Intersect this byte class with the given byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"difference","","Subtract the given byte class from this byte class, in place.",69,[[["self"],["classbytes"]]]],[11,"symmetric_difference","","Compute the symmetric difference of the given byte classes, in place.",69,[[["self"],["classbytes"]]]],[11,"is_all_ascii","","Returns true if and only if this character class will either match nothing or only ASCII bytes. Stated differently, this returns false if and only if this class contains a non-ASCII byte.",69,[[["self"]],["bool"]]],[11,"fmt","","",70,[[["self"],["formatter"]],["result"]]],[11,"next","","",70,[[["self"]],["option",["classbytesrange"]]]],[11,"clone","","",71,[[["self"]],["classbytesrange"]]],[11,"default","","",71,[[],["classbytesrange"]]],[11,"eq","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ne","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"partial_cmp","","",71,[[["self"],["classbytesrange"]],["option",["ordering"]]]],[11,"lt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"le","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"gt","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"ge","","",71,[[["self"],["classbytesrange"]],["bool"]]],[11,"cmp","","",71,[[["self"],["classbytesrange"]],["ordering"]]],[11,"new","","Create a new byte range for a character class.",71,[[["u8"],["u8"]],["classbytesrange"]]],[11,"start","","Return the start of this range.",71,[[["self"]],["u8"]]],[11,"end","","Return the end of this range.",71,[[["self"]],["u8"]]],[11,"fmt","","",71,[[["self"],["formatter"]],["result"]]],[11,"clone","","",53,[[["self"]],["anchor"]]],[11,"fmt","","",53,[[["self"],["formatter"]],["result"]]],[11,"eq","","",53,[[["self"],["anchor"]],["bool"]]],[11,"clone","","",54,[[["self"]],["wordboundary"]]],[11,"fmt","","",54,[[["self"],["formatter"]],["result"]]],[11,"eq","","",54,[[["self"],["wordboundary"]],["bool"]]],[11,"is_negated","","Returns true if and only if this word boundary assertion is negated.",54,[[["self"]],["bool"]]],[11,"clone","","",47,[[["self"]],["group"]]],[11,"fmt","","",47,[[["self"],["formatter"]],["result"]]],[11,"eq","","",47,[[["self"],["group"]],["bool"]]],[11,"ne","","",47,[[["self"],["group"]],["bool"]]],[11,"clone","","",55,[[["self"]],["groupkind"]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result"]]],[11,"eq","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"ne","","",55,[[["self"],["groupkind"]],["bool"]]],[11,"clone","","",48,[[["self"]],["repetition"]]],[11,"fmt","","",48,[[["self"],["formatter"]],["result"]]],[11,"eq","","",48,[[["self"],["repetition"]],["bool"]]],[11,"ne","","",48,[[["self"],["repetition"]],["bool"]]],[11,"is_match_empty","","Returns true if and only if this repetition operator makes it possible to match the empty string.",48,[[["self"]],["bool"]]],[11,"clone","","",56,[[["self"]],["repetitionkind"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result"]]],[11,"eq","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"ne","","",56,[[["self"],["repetitionkind"]],["bool"]]],[11,"clone","","",57,[[["self"]],["repetitionrange"]]],[11,"fmt","","",57,[[["self"],["formatter"]],["result"]]],[11,"eq","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"ne","","",57,[[["self"],["repetitionrange"]],["bool"]]],[11,"drop","","",65,[[["self"]]]],[11,"clone","regex_syntax","",72,[[["self"]],["parserbuilder"]]],[11,"fmt","","",72,[[["self"],["formatter"]],["result"]]],[11,"default","","",72,[[],["parserbuilder"]]],[11,"new","","Create a new parser builder with a default configuration.",72,[[],["parserbuilder"]]],[11,"build","","Build a parser from this configuration with the given pattern.",72,[[["self"]],["parser"]]],[11,"nest_limit","","Set the nesting limit for this parser.",72,[[["self"],["u32"]],["parserbuilder"]]],[11,"octal","","Whether to support octal syntax or not.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"allow_invalid_utf8","","When enabled, the parser will permit the construction of a regular expression that may match invalid UTF-8.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"ignore_whitespace","","Enable verbose mode in the regular expression.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"case_insensitive","","Enable or disable the case insensitive flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"multi_line","","Enable or disable the multi-line matching flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"dot_matches_new_line","","Enable or disable the \"dot matches any character\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"swap_greed","","Enable or disable the \"swap greed\" flag by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"unicode","","Enable or disable the Unicode flag (`u`) by default.",72,[[["self"],["bool"]],["parserbuilder"]]],[11,"clone","","",73,[[["self"]],["parser"]]],[11,"fmt","","",73,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new parser with a default configuration.",73,[[],["parser"]]],[11,"parse","","Parse the regular expression into a high level intermediate representation.",73,[[["self"],["str"]],["result",["hir"]]]],[6,"Result","","A type alias for dealing with errors returned by this crate.",N,N],[11,"start","regex_syntax::ast","This method is called before beginning traversal of the AST.",45,[[["self"]]]],[11,"visit_pre","","This method is called on an `Ast` before descending into child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_post","","This method is called on an `Ast` after descending all of its child `Ast` nodes.",45,[[["self"],["ast"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an `Alternation`.",45,[[["self"]],["result"]]],[11,"visit_class_set_item_pre","","This method is called on every `ClassSetItem` before descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_item_post","","This method is called on every `ClassSetItem` after descending into child nodes.",45,[[["self"],["classsetitem"]],["result"]]],[11,"visit_class_set_binary_op_pre","","This method is called on every `ClassSetBinaryOp` before descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_post","","This method is called on every `ClassSetBinaryOp` after descending into child nodes.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"visit_class_set_binary_op_in","","This method is called between the left hand and right hand child nodes of a `ClassSetBinaryOp`.",45,[[["self"],["classsetbinaryop"]],["result"]]],[11,"start","regex_syntax::hir","This method is called before beginning traversal of the HIR.",63,[[["self"]]]],[11,"visit_pre","","This method is called on an `Hir` before descending into child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_post","","This method is called on an `Hir` after descending all of its child `Hir` nodes.",63,[[["self"],["hir"]],["result"]]],[11,"visit_alternation_in","","This method is called between child nodes of an alternation.",63,[[["self"]],["result"]]]],"paths":[[4,"Error"],[3,"Span"],[3,"Position"],[3,"WithComments"],[3,"Comment"],[3,"Alternation"],[3,"Concat"],[3,"Literal"],[3,"ClassPerl"],[3,"ClassAscii"],[3,"ClassUnicode"],[3,"ClassBracketed"],[3,"ClassSetRange"],[3,"ClassSetUnion"],[3,"ClassSetBinaryOp"],[3,"Assertion"],[3,"Repetition"],[3,"RepetitionOp"],[3,"Group"],[3,"CaptureName"],[3,"SetFlags"],[3,"Flags"],[3,"FlagsItem"],[4,"ErrorKind"],[4,"Ast"],[4,"LiteralKind"],[4,"SpecialLiteralKind"],[4,"HexLiteralKind"],[4,"Class"],[4,"ClassPerlKind"],[4,"ClassAsciiKind"],[4,"ClassUnicodeKind"],[4,"ClassUnicodeOpKind"],[4,"ClassSet"],[4,"ClassSetItem"],[4,"ClassSetBinaryOpKind"],[4,"AssertionKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[4,"GroupKind"],[4,"FlagsItemKind"],[4,"Flag"],[3,"ParserBuilder"],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,"Repetition"],[4,"ErrorKind"],[4,"HirKind"],[4,"Literal"],[4,"Class"],[4,"Anchor"],[4,"WordBoundary"],[4,"GroupKind"],[4,"RepetitionKind"],[4,"RepetitionRange"],[3,"Literals"],[3,"Literal"],[3,"Printer"],[3,"TranslatorBuilder"],[3,"Translator"],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,"ClassUnicode"],[3,"ClassUnicodeIter"],[3,"ClassUnicodeRange"],[3,"ClassBytes"],[3,"ClassBytesIter"],[3,"ClassBytesRange"],[3,"ParserBuilder"],[3,"Parser"]]};
searchIndex["ryu"]={"doc":"Pure Rust implementation of Ryū, an algorithm to quickly convert floating point numbers to decimal strings.","items":[[3,"Buffer","ryu","Safe API for formatting floating point numbers to text.",N,N],[11,"clone","","",0,[[["self"]],["buffer"]]],[11,"new","","This is a cheap operation; you don't need to worry about reusing buffers for efficiency.",0,[[],["self"]]],[11,"format","","Print a floating point number into this buffer and return a reference to its string representation within the buffer.",0,[[["self"],["f"]],["str"]]],[11,"default","","",0,[[],["self"]]],[0,"raw","","Unsafe functions that exactly mirror the API of the C implementation of Ryū.",N,N],[5,"d2s_buffered_n","ryu::raw","Print f64 to the given buffer and return number of bytes written.",N,N],[5,"f2s_buffered_n","","Print f32 to the given buffer and return number of bytes written.",N,N],[8,"Float","ryu","A floating point number, f32 or f64, that can be written into a [`ryu::Buffer`][Buffer].",N,N]],"paths":[[3,"Buffer"]]};
searchIndex["same_file"]={"doc":"This crate provides a safe and simple cross platform way to determine whether two file paths refer to the same file or directory.","items":[[3,"Handle","same_file","A handle to a file that can be tested for equality with other handles.",N,N],[5,"is_same_file","","Returns true if the two file paths may correspond to the same file.",N,[[["p"],["q"]],["result",["bool"]]]],[11,"as_raw_fd","","",0,[[["self"]],["rawfd"]]],[11,"into_raw_fd","","",0,[[["self"]],["rawfd"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["handle"]],["bool"]]],[11,"ne","","",0,[[["self"],["handle"]],["bool"]]],[11,"from_path","","Construct a handle from a path.",0,[[["p"]],["result",["handle"]]]],[11,"from_file","","Construct a handle from a file.",0,[[["file"]],["result",["handle"]]]],[11,"stdin","","Construct a handle from stdin.",0,[[],["result",["handle"]]]],[11,"stdout","","Construct a handle from stdout.",0,[[],["result",["handle"]]]],[11,"stderr","","Construct a handle from stderr.",0,[[],["result",["handle"]]]],[11,"as_file","","Return a reference to the underlying file.",0,[[["self"]],["file"]]],[11,"as_file_mut","","Return a mutable reference to the underlying file.",0,[[["self"]],["file"]]],[11,"dev","","Return the underlying device number of this handle.",0,[[["self"]],["u64"]]],[11,"ino","","Return the underlying inode number of this handle.",0,[[["self"]],["u64"]]]],"paths":[[3,"Handle"]]};
searchIndex["scopeguard"]={"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",N,N],[4,"Always","","Always run on scope exit.",N,N],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",N,[[["t"],["f"]],["scopeguard",["always"]]]],[8,"Strategy","","",N,N],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,[[],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"should_run","","",1,[[],["bool"]]],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,[[["t"],["f"]],["scopeguard"]]],[11,"deref","","",2,[[["self"]],["t"]]],[11,"deref_mut","","",2,[[["self"]],["t"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[14,"defer","","Macro to create a `ScopeGuard` (always run).",N,N],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",N,N]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["serde"]={"doc":"Serde","items":[[0,"de","serde","Generic data structure deserialization framework.",N,N],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",N,N],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",N,N],[13,"Bool","","The input contained a boolean value that was not expected.",0,N],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",0,N],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",0,N],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",0,N],[13,"Char","","The input contained a `char` that was not expected.",0,N],[13,"Str","","The input contained a `&str` or `String` that was not expected.",0,N],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",0,N],[13,"Unit","","The input contained a unit `()` that was not expected.",0,N],[13,"Option","","The input contained an `Option<T>` that was not expected.",0,N],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",0,N],[13,"Seq","","The input contained a sequence that was not expected.",0,N],[13,"Map","","The input contained a map that was not expected.",0,N],[13,"Enum","","The input contained an enum that was not expected.",0,N],[13,"UnitVariant","","The input contained a unit variant that was not expected.",0,N],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",0,N],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",0,N],[13,"StructVariant","","The input contained a struct variant that was not expected.",0,N],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",0,N],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",N,N],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",N,N],[3,"UnitDeserializer","","A deserializer holding a `()`.",N,N],[3,"BoolDeserializer","","A deserializer holding a `bool`.",N,N],[3,"I8Deserializer","","A deserializer holding an `i8`.",N,N],[3,"I16Deserializer","","A deserializer holding an `i16`.",N,N],[3,"I32Deserializer","","A deserializer holding an `i32`.",N,N],[3,"I64Deserializer","","A deserializer holding an `i64`.",N,N],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",N,N],[3,"U8Deserializer","","A deserializer holding a `u8`.",N,N],[3,"U16Deserializer","","A deserializer holding a `u16`.",N,N],[3,"U64Deserializer","","A deserializer holding a `u64`.",N,N],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",N,N],[3,"F32Deserializer","","A deserializer holding an `f32`.",N,N],[3,"F64Deserializer","","A deserializer holding an `f64`.",N,N],[3,"CharDeserializer","","A deserializer holding a `char`.",N,N],[3,"I128Deserializer","","A deserializer holding an `i128`.",N,N],[3,"U128Deserializer","","A deserializer holding a `u128`.",N,N],[3,"U32Deserializer","","A deserializer holding a `u32`.",N,N],[3,"StrDeserializer","","A deserializer holding a `&str`.",N,N],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",N,N],[3,"StringDeserializer","","A deserializer holding a `String`.",N,N],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",N,N],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",N,N],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",N,N],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",N,N],[3,"MapDeserializer","","A deserializer that iterates over a map.",N,N],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",N,N],[11,"clone","","",1,[[["self"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"custom","","",1,[[["t"]],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"clone","","",3,[[["self"]],["self"]]],[11,"deserialize_bool","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",3,N],[11,"deserialize_enum","","",3,N],[11,"deserialize_identifier","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",3,[[["self"],["v"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["self"]]],[11,"deserialize_bool","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",4,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",4,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",4,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",4,N],[11,"deserialize_enum","","",4,N],[11,"deserialize_identifier","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",4,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",4,[[["self"],["v"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["self"]]],[11,"deserialize_bool","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",5,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",5,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",5,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",5,N],[11,"deserialize_enum","","",5,N],[11,"deserialize_identifier","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",5,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",5,[[["self"],["v"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["self"]]],[11,"deserialize_bool","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",6,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",6,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",6,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",6,N],[11,"deserialize_enum","","",6,N],[11,"deserialize_identifier","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",6,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",6,[[["self"],["v"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"deserialize_bool","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",7,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",7,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",7,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",7,N],[11,"deserialize_enum","","",7,N],[11,"deserialize_identifier","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",7,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",7,[[["self"],["v"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["self"]]],[11,"deserialize_bool","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",8,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",8,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",8,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",8,N],[11,"deserialize_enum","","",8,N],[11,"deserialize_identifier","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",8,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",8,[[["self"],["v"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["self"]]],[11,"deserialize_bool","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",9,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",9,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",9,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",9,N],[11,"deserialize_enum","","",9,N],[11,"deserialize_identifier","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",9,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",9,[[["self"],["v"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["self"]]],[11,"deserialize_bool","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",10,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",10,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",10,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",10,N],[11,"deserialize_enum","","",10,N],[11,"deserialize_identifier","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",10,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",10,[[["self"],["v"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",11,[[["self"]],["self"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_enum","","",11,N],[11,"deserialize_identifier","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",11,[[["self"],["v"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"clone","","",12,[[["self"]],["self"]]],[11,"deserialize_bool","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",12,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",12,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",12,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",12,N],[11,"deserialize_enum","","",12,N],[11,"deserialize_identifier","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",12,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",12,[[["self"],["v"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"clone","","",13,[[["self"]],["self"]]],[11,"deserialize_bool","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",13,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",13,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",13,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",13,N],[11,"deserialize_enum","","",13,N],[11,"deserialize_identifier","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",13,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",13,[[["self"],["v"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"clone","","",14,[[["self"]],["self"]]],[11,"deserialize_bool","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",14,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",14,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",14,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",14,N],[11,"deserialize_enum","","",14,N],[11,"deserialize_identifier","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",14,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",14,[[["self"],["v"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"clone","","",15,[[["self"]],["self"]]],[11,"deserialize_bool","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",15,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",15,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",15,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",15,N],[11,"deserialize_enum","","",15,N],[11,"deserialize_identifier","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",15,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",15,[[["self"],["v"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"clone","","",16,[[["self"]],["self"]]],[11,"deserialize_bool","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",16,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",16,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",16,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",16,N],[11,"deserialize_enum","","",16,N],[11,"deserialize_identifier","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",16,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",16,[[["self"],["v"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"clone","","",17,[[["self"]],["self"]]],[11,"deserialize_bool","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",17,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",17,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",17,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",17,N],[11,"deserialize_enum","","",17,N],[11,"deserialize_identifier","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",17,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",17,[[["self"],["v"]],["result"]]],[11,"fmt","","",18,[[["self"],["formatter"]],["result"]]],[11,"clone","","",18,[[["self"]],["self"]]],[11,"deserialize_bool","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",18,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",18,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",18,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",18,N],[11,"deserialize_identifier","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_any","","",18,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",18,N],[11,"variant_seed","","",18,[[["self"],["t"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",19,[[["self"]],["self"]]],[11,"deserialize_any","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",19,N],[11,"deserialize_bool","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",19,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",19,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",19,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",19,N],[11,"deserialize_identifier","","",19,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",19,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",19,[[["self"],["t"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given string.",20,[[["str"]],["borrowedstrdeserializer"]]],[11,"deserialize_any","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",20,N],[11,"deserialize_bool","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",20,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",20,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",20,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",20,N],[11,"deserialize_identifier","","",20,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",20,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",20,[[["self"],["t"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"clone","","",21,[[["self"]],["self"]]],[11,"deserialize_any","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",21,N],[11,"deserialize_bool","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",21,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",21,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",21,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",21,N],[11,"deserialize_identifier","","",21,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",21,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",21,[[["self"],["t"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"clone","","",22,[[["self"]],["self"]]],[11,"deserialize_any","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",22,N],[11,"deserialize_bool","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",22,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",22,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",22,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",22,N],[11,"deserialize_identifier","","",22,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",22,[[["self"],["v"]],["result"]]],[11,"variant_seed","","",22,[[["self"],["t"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"clone","","",23,[[["self"]],["self"]]],[11,"new","","Create a new borrowed deserializer from the given byte slice.",23,N],[11,"deserialize_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",23,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",23,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",23,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",23,N],[11,"deserialize_identifier","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",23,[[["self"],["v"]],["result"]]],[11,"deserialize_enum","","",23,N],[11,"clone","","",24,[[["self"]],["seqdeserializer"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",24,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",24,[[["self"]],["result"]]],[11,"deserialize_any","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",24,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",24,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",24,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",24,N],[11,"deserialize_enum","","",24,N],[11,"deserialize_identifier","","",24,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",24,[[["self"],["v"]],["result"]]],[11,"next_element_seed","","",24,[[["self"],["v"]],["result",["option"]]]],[11,"size_hint","","",24,[[["self"]],["option",["usize"]]]],[11,"clone","","",25,[[["self"]],["seqaccessdeserializer"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",25,[[["a"]],["self"]]],[11,"deserialize_any","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",25,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",25,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",25,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",25,N],[11,"deserialize_enum","","",25,N],[11,"deserialize_identifier","","",25,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",25,[[["self"],["v"]],["result"]]],[11,"new","","Construct a new `MapDeserializer<I, E>`.",26,[[["i"]],["self"]]],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",26,[[["self"]],["result"]]],[11,"deserialize_any","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",26,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bool","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",26,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",26,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",26,N],[11,"deserialize_enum","","",26,N],[11,"deserialize_identifier","","",26,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",26,[[["self"],["v"]],["result"]]],[11,"next_key_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"next_value_seed","","",26,[[["self"],["t"]],["result"]]],[11,"next_entry_seed","","",26,[[["self"],["tk"],["tv"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"next_element_seed","","",26,[[["self"],["t"]],["result",["option"]]]],[11,"size_hint","","",26,[[["self"]],["option",["usize"]]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"clone","","",27,[[["self"]],["mapaccessdeserializer"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",27,[[["a"]],["self"]]],[11,"deserialize_any","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bool","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",27,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",27,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",27,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",27,N],[11,"deserialize_enum","","",27,N],[11,"deserialize_identifier","","",27,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",27,[[["self"],["v"]],["result"]]],[11,"clone","serde::de","",28,[[["self"]],["ignoredany"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"default","","",28,[[],["ignoredany"]]],[11,"expecting","","",28,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","",28,[[["self"],["bool"]],["result"]]],[11,"visit_i64","","",28,[[["self"],["i64"]],["result"]]],[11,"visit_u64","","",28,[[["self"],["u64"]],["result"]]],[11,"visit_f64","","",28,[[["self"],["f64"]],["result"]]],[11,"visit_str","","",28,[[["self"],["str"]],["result"]]],[11,"visit_none","","",28,[[["self"]],["result"]]],[11,"visit_some","","",28,[[["self"],["d"]],["result"]]],[11,"visit_newtype_struct","","",28,[[["self"],["d"]],["result"]]],[11,"visit_unit","","",28,[[["self"]],["result"]]],[11,"visit_seq","","",28,[[["self"],["a"]],["result"]]],[11,"visit_map","","",28,[[["self"],["a"]],["result"]]],[11,"visit_bytes","","",28,N],[11,"deserialize","","",28,[[["d"]],["result",["ignoredany"]]]],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",N,N],[10,"custom","","Raised when there is general error when deserializing a type.",29,[[["t"]],["self"]]],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,[[["unexpected"],["expected"]],["self"]]],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,[[["usize"],["expected"]],["self"]]],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,N],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,N],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,[[["str"]],["self"]]],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,[[["str"]],["self"]]],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",N,N],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,[[["self"],["formatter"]],["result"]]],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",N,N],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",N,N],[16,"Value","","The type produced by using this seed.",32,N],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,[[["self"],["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",N,N],[16,"Value","","The value produced by this visitor.",34,N],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,[[["self"],["formatter"]],["result"]]],[11,"visit_bool","","The input contains a boolean.",34,[[["self"],["bool"]],["result"]]],[11,"visit_i8","","The input contains an `i8`.",34,[[["self"],["i8"]],["result"]]],[11,"visit_i16","","The input contains an `i16`.",34,[[["self"],["i16"]],["result"]]],[11,"visit_i32","","The input contains an `i32`.",34,[[["self"],["i32"]],["result"]]],[11,"visit_i64","","The input contains an `i64`.",34,[[["self"],["i64"]],["result"]]],[11,"visit_i128","","The input contains a `i128`.",34,[[["self"],["i128"]],["result"]]],[11,"visit_u8","","The input contains a `u8`.",34,[[["self"],["u8"]],["result"]]],[11,"visit_u16","","The input contains a `u16`.",34,[[["self"],["u16"]],["result"]]],[11,"visit_u32","","The input contains a `u32`.",34,[[["self"],["u32"]],["result"]]],[11,"visit_u64","","The input contains a `u64`.",34,[[["self"],["u64"]],["result"]]],[11,"visit_u128","","The input contains a `u128`.",34,[[["self"],["u128"]],["result"]]],[11,"visit_f32","","The input contains an `f32`.",34,[[["self"],["f32"]],["result"]]],[11,"visit_f64","","The input contains an `f64`.",34,[[["self"],["f64"]],["result"]]],[11,"visit_char","","The input contains a `char`.",34,[[["self"],["char"]],["result"]]],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",34,[[["self"],["str"]],["result"]]],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",34,[[["self"],["str"]],["result"]]],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",34,[[["self"],["string"]],["result"]]],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",34,N],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",34,N],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",34,[[["self"],["vec",["u8"]]],["result"]]],[11,"visit_none","","The input contains an optional that is absent.",34,[[["self"]],["result"]]],[11,"visit_some","","The input contains an optional that is present.",34,[[["self"],["d"]],["result"]]],[11,"visit_unit","","The input contains a unit `()`.",34,[[["self"]],["result"]]],[11,"visit_newtype_struct","","The input contains a newtype struct.",34,[[["self"],["d"]],["result"]]],[11,"visit_seq","","The input contains a sequence of elements.",34,[[["self"],["a"]],["result"]]],[11,"visit_map","","The input contains a key-value map.",34,[[["self"],["a"]],["result"]]],[11,"visit_enum","","The input contains an enum.",34,[[["self"],["a"]],["result"]]],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,N],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"],["t"]],["result",["option"]]]],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",35,[[["self"]],["option",["usize"]]]],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,N],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"],["k"]],["result",["option"]]]],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"],["v"]],["result"]]],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"],["k"],["v"]],["result",["option"]]]],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,[[["self"]],["result",["option"]]]],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",36,[[["self"]],["result"]]],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,[[["self"]],["result",["option"]]]],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",36,[[["self"]],["option",["usize"]]]],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,N],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,N],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",37,[[["self"],["v"]],["result"]]],[11,"variant","","`variant` is called to identify which variant to deserialize.",37,[[["self"]],["result"]]],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",38,N],[10,"unit_variant","","Called when deserializing a variant with no values.",38,[[["self"]],["result"]]],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",38,[[["self"],["t"]],["result"]]],[11,"newtype_variant","","Called when deserializing a variant with a single value.",38,[[["self"]],["result"]]],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",38,[[["self"],["usize"],["v"]],["result"]]],[10,"struct_variant","","Called when deserializing a struct-like variant.",38,N],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",N,N],[16,"Deserializer","","The type of the deserializer being converted into.",39,N],[10,"into_deserializer","","Convert this value into a deserializer.",39,N],[11,"clone","","",0,[[["self"]],["unexpected"]]],[11,"eq","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"ne","","",0,[[["self"],["unexpected"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[0,"ser","serde","Generic data structure serialization framework.",N,N],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",N,N],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_element","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_key","","",40,[[["self"],["t"]],["result"]]],[11,"serialize_value","","",40,[[["self"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[11,"serialize_field","","",40,[[["self"],["str"],["t"]],["result"]]],[11,"end","","",40,[[["self"]],["result"]]],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",N,N],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",41,[[["t"]],["self"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,N],[10,"serialize_element","","Serialize a sequence element.",44,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a sequence.",44,[[["self"]],["result"]]],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,N],[10,"serialize_element","","Serialize a tuple element.",45,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple.",45,[[["self"]],["result"]]],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,N],[10,"serialize_field","","Serialize a tuple struct field.",46,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple struct.",46,[[["self"]],["result"]]],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,N],[10,"serialize_field","","Serialize a tuple variant field.",47,[[["self"],["t"]],["result"]]],[10,"end","","Finish serializing a tuple variant.",47,[[["self"]],["result"]]],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,N],[10,"serialize_key","","Serialize a map key.",48,[[["self"],["t"]],["result"]]],[10,"serialize_value","","Serialize a map value.",48,[[["self"],["t"]],["result"]]],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",48,[[["self"],["k"],["v"]],["result"]]],[10,"end","","Finish serializing a map.",48,[[["self"]],["result"]]],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,N],[10,"serialize_field","","Serialize a struct field.",49,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct field has been skipped.",49,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct.",49,[[["self"]],["result"]]],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",N,N],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",50,N],[16,"Error","","Must match the `Error` type of our `Serializer`.",50,N],[10,"serialize_field","","Serialize a struct variant field.",50,[[["self"],["str"],["t"]],["result"]]],[11,"skip_field","","Indicate that a struct variant field has been skipped.",50,[[["self"],["str"]],["result"]]],[10,"end","","Finish serializing a struct variant.",50,[[["self"]],["result"]]],[8,"Deserialize","serde","A data structure that can be deserialized from any data format supported by Serde.",N,N],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,[[["d"]],["result"]]],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",N,N],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,N],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_i128","","Hint that the `Deserialize` type is expecting an `i128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,[[["self"],["v"]],["result"]]],[11,"deserialize_u128","","Hint that the `Deserialize` type is expecting an `u128` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,[[["self"],["str"],["v"]],["result"]]],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,[[["self"],["usize"],["v"]],["result"]]],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,[[["self"],["str"],["usize"],["v"]],["result"]]],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,N],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,N],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",33,[[["self"],["v"]],["result"]]],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,[[["self"],["v"]],["result"]]],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",33,[[["self"]],["bool"]]],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",N,N],[10,"serialize","","Serialize this value into the given Serde serializer.",42,[[["self"],["s"]],["result"]]],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",N,N],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",43,N],[16,"Error","","The error type when some error occurs during serialization.",43,N],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",43,N],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",43,N],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",43,N],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",43,N],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",43,N],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",43,N],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",43,N],[10,"serialize_bool","","Serialize a `bool` value.",43,[[["self"],["bool"]],["result"]]],[10,"serialize_i8","","Serialize an `i8` value.",43,[[["self"],["i8"]],["result"]]],[10,"serialize_i16","","Serialize an `i16` value.",43,[[["self"],["i16"]],["result"]]],[10,"serialize_i32","","Serialize an `i32` value.",43,[[["self"],["i32"]],["result"]]],[10,"serialize_i64","","Serialize an `i64` value.",43,[[["self"],["i64"]],["result"]]],[11,"serialize_i128","","Serialize an `i128` value.",43,[[["self"],["i128"]],["result"]]],[10,"serialize_u8","","Serialize a `u8` value.",43,[[["self"],["u8"]],["result"]]],[10,"serialize_u16","","Serialize a `u16` value.",43,[[["self"],["u16"]],["result"]]],[10,"serialize_u32","","Serialize a `u32` value.",43,[[["self"],["u32"]],["result"]]],[10,"serialize_u64","","Serialize a `u64` value.",43,[[["self"],["u64"]],["result"]]],[11,"serialize_u128","","Serialize a `u128` value.",43,[[["self"],["u128"]],["result"]]],[10,"serialize_f32","","Serialize an `f32` value.",43,[[["self"],["f32"]],["result"]]],[10,"serialize_f64","","Serialize an `f64` value.",43,[[["self"],["f64"]],["result"]]],[10,"serialize_char","","Serialize a character.",43,[[["self"],["char"]],["result"]]],[10,"serialize_str","","Serialize a `&str`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",43,N],[10,"serialize_none","","Serialize a [`None`] value.",43,[[["self"]],["result"]]],[10,"serialize_some","","Serialize a [`Some(T)`] value.",43,[[["self"],["t"]],["result"]]],[10,"serialize_unit","","Serialize a `()` value.",43,[[["self"]],["result"]]],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",43,[[["self"],["str"]],["result"]]],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",43,[[["self"],["str"],["u32"],["str"]],["result"]]],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",43,[[["self"],["str"],["t"]],["result"]]],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",43,[[["self"],["str"],["u32"],["str"],["t"]],["result"]]],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",43,[[["self"],["usize"]],["result"]]],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",43,[[["self"],["option",["usize"]]],["result"]]],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["usize"]],["result"]]],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",43,[[["self"],["str"],["u32"],["str"],["usize"]],["result"]]],[11,"collect_seq","","Collect an iterator as a sequence.",43,[[["self"],["i"]],["result"]]],[11,"collect_map","","Collect an iterator as a map.",43,[[["self"],["i"]],["result"]]],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",43,[[["self"],["t"]],["result"]]],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",43,[[["self"]],["bool"]]],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",N,N],[14,"serde_if_integer128","","Conditional compilation depending on whether Serde is built with support for 128-bit integers.",N,N]],"paths":[[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_hjson"]={"doc":"JSON and serialization - TODO/hjson","items":[[0,"builder","serde_hjson","JSON Builders",N,N],[3,"ArrayBuilder","serde_hjson::builder","This structure provides a simple interface for constructing a JSON array.",N,N],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",N,N],[11,"new","","Construct an `ObjectBuilder`.",0,[[],["arraybuilder"]]],[11,"unwrap","","Return the constructed `Value`.",0,[[["self"]],["value"]]],[11,"push","","Insert a value into the array.",0,[[["self"],["t"]],["arraybuilder"]]],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into this array.",0,[[["self"],["f"]],["arraybuilder"]]],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into this array.",0,[[["self"],["f"]],["arraybuilder"]]],[11,"new","","Construct an `ObjectBuilder`.",1,[[],["objectbuilder"]]],[11,"unwrap","","Return the constructed `Value`.",1,[[["self"]],["value"]]],[11,"insert","","Insert a key-value pair into the object.",1,[[["self"],["s"],["v"]],["objectbuilder"]]],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into this object.",1,[[["self"],["s"],["f"]],["objectbuilder"]]],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into this object.",1,[[["self"],["s"],["f"]],["objectbuilder"]]],[0,"de","serde_hjson","Hjson Deserialization",N,N],[3,"Deserializer","serde_hjson::de","A structure that deserializes Hjson into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple Hjson values.",N,N],[5,"from_iter","","Decodes a Hjson value from an iterator over an iterator `Iterator<Item=u8>`.",N,[[["i"]],["result"]]],[5,"from_reader","","Decodes a Hjson value from a `std::io::Read`.",N,[[["r"]],["result"]]],[5,"from_slice","","Decodes a Hjson value from a byte slice `&[u8]`.",N,N],[5,"from_str","","Decodes a Hjson value from a `&str`.",N,[[["str"]],["result"]]],[11,"new","","Creates the Hjson parser from an `std::iter::Iterator`.",2,[[["iter"]],["deserializer"]]],[11,"new_for_root","","Creates the Hjson parser from an `std::iter::Iterator`.",2,[[["iter"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",2,[[["self"]],["result"]]],[11,"deserialize","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,[[["self"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_enum","","Parses an enum as an object like `{\"$KEY\":$VALUE}`, where $VALUE is either a straight value, a `[..]`, or a `{..}`.",2,N],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_usize","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_isize","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_struct_field","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"visit_variant","","",2,[[["self"]],["result"]]],[11,"visit_unit","","",2,[[["self"]],["result"]]],[11,"visit_newtype","","",2,[[["self"]],["result"]]],[11,"visit_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"visit_struct","","",2,N],[11,"new","","Returns an `Iterator` of decoded Hjson values from an iterator over `Iterator<Item=u8>`.",3,[[["iter"]],["streamdeserializer"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_hjson","JSON Errors",N,N],[4,"ErrorCode","serde_hjson::error","The errors that can arise while parsing a JSON stream.",N,N],[13,"Custom","","Catchall for syntax error messages",4,N],[13,"InvalidType","","Incorrect type from value",4,N],[13,"InvalidValue","","Incorrect value",4,N],[13,"InvalidLength","","Invalid length",4,N],[13,"UnknownVariant","","Unknown variant in an enum.",4,N],[13,"UnknownField","","Unknown field in struct.",4,N],[13,"MissingField","","Struct is missing a field.",4,N],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,N],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,N],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,N],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,N],[13,"ExpectedColon","","Expected this character to be a `':'`.",4,N],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `','` or a `]`.",4,N],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `','` or a `}`.",4,N],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,N],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,N],[13,"InvalidEscape","","Invalid hex escape code.",4,N],[13,"InvalidNumber","","Invalid number.",4,N],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,N],[13,"KeyMustBeAString","","Object key is not a string.",4,N],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,N],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,N],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,N],[13,"PunctuatorInQlString","","Found a punctuator character when excpecting a quoteless string.",4,N],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a value into JSON.",N,N],[13,"Syntax","","The JSON value had some syntatic error.",5,N],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,N],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,N],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",N,N],[11,"clone","","",4,[[["self"]],["errorcode"]]],[11,"eq","","",4,[[["self"],["errorcode"]],["bool"]]],[11,"ne","","",4,[[["self"],["errorcode"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"from","","",5,[[["error"]],["error"]]],[11,"from","","",5,[[["fromutf8error"]],["error"]]],[11,"from","","",5,[[["error"]],["error"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"end_of_stream","","",5,[[],["error"]]],[11,"invalid_type","","",5,[[["type"]],["error"]]],[11,"invalid_value","","",5,[[["str"]],["error"]]],[11,"invalid_length","","",5,[[["usize"]],["error"]]],[11,"unknown_variant","","",5,[[["str"]],["error"]]],[11,"unknown_field","","",5,[[["str"]],["error"]]],[11,"missing_field","","",5,[[["str"]],["error"]]],[11,"custom","","Raised when there is general error when deserializing a type.",5,[[["t"]],["error"]]],[0,"ser","serde_hjson","Hjson Serialization",N,N],[3,"Serializer","serde_hjson::ser","A structure for serializing Rust values into Hjson.",N,N],[5,"escape_bytes","","Serializes and escapes a `&[u8]` into a Hjson string.",N,N],[5,"quote_str","","Serializes and escapes a `&str` into a Hjson string.",N,[[["w"],["f"],["str"]],["result"]]],[5,"ml_str","","Serializes and escapes a `&str` into a multiline Hjson string.",N,[[["w"],["f"],["str"]],["result"]]],[5,"escape_key","","Serializes and escapes a `&str` into a Hjson key.",N,[[["w"],["str"]],["result"]]],[5,"to_writer","","Encode the specified struct into a Hjson `[u8]` writer.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Encode the specified struct into a Hjson `[u8]` buffer.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Encode the specified struct into a Hjson `String` buffer.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters",N,N],[10,"open","","Called when serializing a '{' or '['.",6,[[["self"],["w"],["u8"]],["result"]]],[10,"comma","","Called when serializing a ','.",6,[[["self"],["w"],["bool"]],["result"]]],[10,"colon","","Called when serializing a ':'.",6,[[["self"],["w"]],["result"]]],[10,"close","","Called when serializing a '}' or ']'.",6,[[["self"],["w"],["u8"]],["result"]]],[10,"newline","","Newline with indent.",6,[[["self"],["w"],["i32"]],["result"]]],[10,"start_value","","Start a value.",6,[[["self"],["w"]],["result"]]],[11,"new","","Creates a new Hjson serializer.",7,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new Hjson visitor whose output will be written to the writer specified.",7,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,[[["self"]],["w"]]],[11,"serialize_bool","","",7,[[["self"],["bool"]],["result"]]],[11,"serialize_isize","","",7,[[["self"],["isize"]],["result"]]],[11,"serialize_i8","","",7,[[["self"],["i8"]],["result"]]],[11,"serialize_i16","","",7,[[["self"],["i16"]],["result"]]],[11,"serialize_i32","","",7,[[["self"],["i32"]],["result"]]],[11,"serialize_i64","","",7,[[["self"],["i64"]],["result"]]],[11,"serialize_usize","","",7,[[["self"],["usize"]],["result"]]],[11,"serialize_u8","","",7,[[["self"],["u8"]],["result"]]],[11,"serialize_u16","","",7,[[["self"],["u16"]],["result"]]],[11,"serialize_u32","","",7,[[["self"],["u32"]],["result"]]],[11,"serialize_u64","","",7,[[["self"],["u64"]],["result"]]],[11,"serialize_f32","","",7,[[["self"],["f32"]],["result"]]],[11,"serialize_f64","","",7,[[["self"],["f64"]],["result"]]],[11,"serialize_char","","",7,[[["self"],["char"]],["result"]]],[11,"serialize_str","","",7,[[["self"],["str"]],["result"]]],[11,"serialize_bytes","","",7,N],[11,"serialize_unit","","",7,[[["self"]],["result"]]],[11,"serialize_unit_struct","","",7,[[["self"],["str"]],["result"]]],[11,"serialize_unit_variant","","",7,[[["self"],["str"],["usize"],["str"]],["result"]]],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,[[["self"],["str"],["t"]],["result"]]],[11,"serialize_newtype_variant","","",7,[[["self"],["str"],["usize"],["str"],["t"]],["result"]]],[11,"serialize_none","","",7,[[["self"]],["result"]]],[11,"serialize_some","","",7,[[["self"],["v"]],["result"]]],[11,"serialize_seq","","",7,[[["self"],["option",["usize"]]],["result",["state"]]]],[11,"serialize_seq_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_seq_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_seq_fixed_size","","",7,[[["self"],["usize"]],["result",["state"]]]],[11,"serialize_tuple","","",7,[[["self"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_tuple_struct","","",7,[[["self"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_struct_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_struct_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_tuple_variant","","",7,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_tuple_variant_elt","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_tuple_variant_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_map","","",7,[[["self"],["option",["usize"]]],["result",["state"]]]],[11,"serialize_map_key","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_map_value","","",7,[[["self"],["state"],["t"]],["result"]]],[11,"serialize_map_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_struct","","",7,[[["self"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_struct_elt","","",7,[[["self"],["state"],["str"],["v"]],["result"]]],[11,"serialize_struct_end","","",7,[[["self"],["state"]],["result"]]],[11,"serialize_struct_variant","","",7,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["state"]]]],[11,"serialize_struct_variant_elt","","",7,[[["self"],["state"],["str"],["v"]],["result"]]],[11,"serialize_struct_variant_end","","",7,[[["self"],["state"]],["result"]]],[0,"value","serde_hjson","JSON Value",N,N],[3,"Serializer","serde_hjson::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",N,N],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",N,N],[4,"Value","","Represents a JSON value",N,N],[13,"Null","","Represents a JSON null value",8,N],[13,"Bool","","Represents a JSON Boolean",8,N],[13,"I64","","Represents a JSON signed integer",8,N],[13,"U64","","Represents a JSON unsigned integer",8,N],[13,"F64","","Represents a JSON floating point number",8,N],[13,"String","","Represents a JSON string",8,N],[13,"Array","","Represents a JSON array",8,N],[13,"Object","","Represents a JSON object",8,N],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",N,[[["t"]],["value"]]],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",N,[[["value"]],["result",["error"]]]],[6,"Map","","Represents a key/value type.",N,N],[6,"MapIntoIter","","Represents the IntoIter type.",N,N],[8,"ToJson","","A trait for converting values to JSON",N,N],[10,"to_json","","Converts the value of `self` to an instance of JSON",9,[[["self"]],["value"]]],[11,"clone","","",8,[[["self"]],["value"]]],[11,"eq","","",8,[[["self"],["value"]],["bool"]]],[11,"ne","","",8,[[["self"],["value"]],["bool"]]],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key. Otherwise, returns None.",8,[[["self"],["str"]],["option",["value"]]]],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the `Value` associated with the final key.",8,N],[11,"lookup","","Deprecated: Use `Value.pointer()` and pointer syntax instead.",8,[[["self"],["str"]],["option",["value"]]]],[11,"pointer","","Looks up a value by a JSON Pointer.",8,[[["self"],["str"]],["option",["value"]]]],[11,"search","","If the `Value` is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the `Value` is not an Object, returns None.",8,[[["self"],["str"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",8,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",8,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",8,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",8,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",8,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64. Returns None otherwise.",8,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64. Returns None otherwise.",8,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64. Returns None otherwise.",8,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",8,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",8,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",8,[[["self"]],["option"]]],[11,"serialize","","",8,[[["self"],["s"]],["result"]]],[11,"deserialize","","",8,[[["d"]],["result",["value"]]]],[11,"fmt","","Serializes a json value into a string",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Serializes a json value into a string",8,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",8,[[["str"]],["result",["value","error"]]]],[11,"new","","Construct a new `Serializer`.",10,[[],["serializer"]]],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",10,[[["self"]],["value"]]],[11,"default","","",10,[[],["self"]]],[11,"serialize_bool","","",10,[[["self"],["bool"]],["result",["error"]]]],[11,"serialize_isize","","",10,[[["self"],["isize"]],["result",["error"]]]],[11,"serialize_i8","","",10,[[["self"],["i8"]],["result",["error"]]]],[11,"serialize_i16","","",10,[[["self"],["i16"]],["result",["error"]]]],[11,"serialize_i32","","",10,[[["self"],["i32"]],["result",["error"]]]],[11,"serialize_i64","","",10,[[["self"],["i64"]],["result",["error"]]]],[11,"serialize_usize","","",10,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_u8","","",10,[[["self"],["u8"]],["result",["error"]]]],[11,"serialize_u16","","",10,[[["self"],["u16"]],["result",["error"]]]],[11,"serialize_u32","","",10,[[["self"],["u32"]],["result",["error"]]]],[11,"serialize_u64","","",10,[[["self"],["u64"]],["result",["error"]]]],[11,"serialize_f32","","",10,[[["self"],["f32"]],["result",["error"]]]],[11,"serialize_f64","","",10,[[["self"],["f64"]],["result",["error"]]]],[11,"serialize_char","","",10,[[["self"],["char"]],["result",["error"]]]],[11,"serialize_str","","",10,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_bytes","","",10,N],[11,"serialize_unit","","",10,[[["self"]],["result",["error"]]]],[11,"serialize_unit_struct","","",10,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_unit_variant","","",10,[[["self"],["str"],["usize"],["str"]],["result",["error"]]]],[11,"serialize_newtype_struct","","",10,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"serialize_newtype_variant","","",10,[[["self"],["str"],["usize"],["str"],["t"]],["result",["error"]]]],[11,"serialize_none","","",10,[[["self"]],["result",["error"]]]],[11,"serialize_some","","",10,[[["self"],["v"]],["result",["error"]]]],[11,"serialize_seq","","",10,[[["self"],["option",["usize"]]],["result",["vec","error"]]]],[11,"serialize_seq_elt","","",10,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_seq_end","","",10,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_seq_fixed_size","","",10,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple","","",10,[[["self"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple_elt","","",10,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_tuple_end","","",10,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_tuple_struct","","",10,[[["self"],["str"],["usize"]],["result",["vec","error"]]]],[11,"serialize_tuple_struct_elt","","",10,[[["self"],["vec"],["t"]],["result",["error"]]]],[11,"serialize_tuple_struct_end","","",10,[[["self"],["vec",["value"]]],["result",["error"]]]],[11,"serialize_tuple_variant","","",10,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["tuplevariantstate","error"]]]],[11,"serialize_tuple_variant_elt","","",10,[[["self"],["tuplevariantstate"],["t"]],["result",["error"]]]],[11,"serialize_tuple_variant_end","","",10,[[["self"],["tuplevariantstate"]],["result",["error"]]]],[11,"serialize_map","","",10,[[["self"],["option",["usize"]]],["result",["mapstate","error"]]]],[11,"serialize_map_key","","",10,[[["self"],["mapstate"],["t"]],["result",["error"]]]],[11,"serialize_map_value","","",10,[[["self"],["mapstate"],["t"]],["result",["error"]]]],[11,"serialize_map_end","","",10,[[["self"],["mapstate"]],["result",["error"]]]],[11,"serialize_struct","","",10,[[["self"],["str"],["usize"]],["result",["mapstate","error"]]]],[11,"serialize_struct_elt","","",10,[[["self"],["mapstate"],["str"],["v"]],["result",["error"]]]],[11,"serialize_struct_end","","",10,[[["self"],["mapstate"]],["result",["error"]]]],[11,"serialize_struct_variant","","",10,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["structvariantstate","error"]]]],[11,"serialize_struct_variant_elt","","",10,[[["self"],["structvariantstate"],["str"],["v"]],["result",["error"]]]],[11,"serialize_struct_variant_end","","",10,[[["self"],["structvariantstate"]],["result",["error"]]]],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",11,[[["value"]],["deserializer"]]],[11,"deserialize","","",11,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",11,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",11,N],[11,"deserialize_newtype_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_usize","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_isize","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_seq_fixed_size","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_bytes","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",11,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",11,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",11,N],[11,"deserialize_struct_field","","",11,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",11,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",11,[[["self"],["v"]],["result"]]],[14,"forward_to_deserialize","serde_hjson","",N,N]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["serde_json"]={"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[3,"Serializer","","A structure for serializing Rust values into JSON.",N,N],[3,"Map","","Represents a JSON key/value type.",N,N],[3,"Number","","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[0,"de","","Deserialize JSON data to a Rust data structure.",N,N],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",N,N],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",N,N],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",N,N],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",N,N],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",N,N],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",N,[[["r"]],["result"]]],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",N,N],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",N,[[["str"]],["result"]]],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",N,N],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,[[["r"]],["self"]]],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,[[["r"]],["self"]]],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,N],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,[[["str"]],["self"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,[[["self"]],["result"]]],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,[[["self"]],["streamdeserializer"]]],[11,"from_str","serde_json","",2,[[["str"]],["result"]]],[11,"new","serde_json::de","Create a JSON stream deserializer from one of the possible serde_json input sources.",3,[[["r"]],["self"]]],[11,"byte_offset","","Returns the number of bytes so far deserialized into a successful `T`.",3,[[["self"]],["usize"]]],[11,"next","","",3,[[["self"]],["option",["result"]]]],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",N,N],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",N,N],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",N,N],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",4,N],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",4,N],[13,"Data","","The error was caused by input data that was semantically incorrect.",4,N],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",4,N],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[11,"line","","One-based line number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"column","","One-based column number at which the error was detected.",5,[[["self"]],["usize"]]],[11,"classify","","Categorizes the cause of this error.",5,[[["self"]],["category"]]],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",5,[[["self"]],["bool"]]],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",5,[[["self"]],["bool"]]],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",5,[[["self"]],["bool"]]],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",5,[[["self"]],["bool"]]],[11,"clone","","",4,[[["self"]],["category"]]],[11,"eq","","",4,[[["self"],["category"]],["bool"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"custom","","",5,[[["t"]],["error"]]],[11,"invalid_type","","",5,[[["unexpected"],["expected"]],["self"]]],[11,"custom","","",5,[[["t"]],["error"]]],[0,"map","serde_json","A map of String to serde_json::Value.",N,N],[3,"Map","serde_json::map","Represents a JSON key/value type.",N,N],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",N,N],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",N,N],[3,"Iter","","An iterator over a serde_json::Map's entries.",N,N],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",N,N],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",N,N],[3,"Keys","","An iterator over a serde_json::Map's keys.",N,N],[3,"Values","","An iterator over a serde_json::Map's values.",N,N],[3,"ValuesMut","","A mutable iterator over a serde_json::Map's values.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",N,N],[13,"Vacant","","A vacant Entry.",6,N],[13,"Occupied","","An occupied Entry.",6,N],[11,"new","","Makes a new empty Map.",7,[[],["self"]]],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",7,[[["usize"]],["self"]]],[11,"clear","","Clears the map, removing all values.",7,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",7,[[["self"],["q"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",7,[[["self"],["q"]],["option",["value"]]]],[11,"insert","","Inserts a key-value pair into the map.",7,[[["self"],["string"],["value"]],["option",["value"]]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",7,[[["self"],["q"]],["option",["value"]]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",7,[[["self"],["s"]],["entry"]]],[11,"len","","Returns the number of elements in the map.",7,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",7,[[["self"]],["bool"]]],[11,"iter","","Gets an iterator over the entries of the map.",7,[[["self"]],["iter"]]],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",7,[[["self"]],["itermut"]]],[11,"keys","","Gets an iterator over the keys of the map.",7,[[["self"]],["keys"]]],[11,"values","","Gets an iterator over the values of the map.",7,[[["self"]],["values"]]],[11,"values_mut","","Gets an iterator over mutable values of the map.",7,[[["self"]],["valuesmut"]]],[11,"default","","",7,[[],["self"]]],[11,"clone","","",7,[[["self"]],["self"]]],[11,"eq","","",7,[[["self"],["self"]],["bool"]]],[11,"index","","",7,[[["self"],["q"]],["value"]]],[11,"index_mut","","",7,[[["self"],["q"]],["value"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result",["error"]]]],[11,"serialize","","",7,[[["self"],["s"]],["result"]]],[11,"deserialize","","",7,[[["d"]],["result"]]],[11,"from_iter","","",7,[[["t"]],["self"]]],[11,"extend","","",7,[[["self"],["t"]]]],[11,"key","","Returns a reference to this entry's key.",6,[[["self"]],["string"]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["value"]],["value"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",6,[[["self"],["f"]],["value"]]],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",8,[[["self"]],["string"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",8,[[["self"],["value"]],["value"]]],[11,"key","","Gets a reference to the key in the entry.",9,[[["self"]],["string"]]],[11,"get","","Gets a reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",9,[[["self"]],["value"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",9,[[["self"]],["value"]]],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",9,[[["self"],["value"]],["value"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",9,[[["self"]],["value"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]],[11,"len","","",10,[[["self"]],["usize"]]],[11,"next","","",11,[[["self"]],["option"]]],[11,"size_hint","","",11,N],[11,"next_back","","",11,[[["self"]],["option"]]],[11,"len","","",11,[[["self"]],["usize"]]],[11,"into_iter","","",7,N],[11,"next","","",12,[[["self"]],["option"]]],[11,"size_hint","","",12,N],[11,"next_back","","",12,[[["self"]],["option"]]],[11,"len","","",12,[[["self"]],["usize"]]],[11,"next","","",13,[[["self"]],["option"]]],[11,"size_hint","","",13,N],[11,"next_back","","",13,[[["self"]],["option"]]],[11,"len","","",13,[[["self"]],["usize"]]],[11,"next","","",14,[[["self"]],["option"]]],[11,"size_hint","","",14,N],[11,"next_back","","",14,[[["self"]],["option"]]],[11,"len","","",14,[[["self"]],["usize"]]],[11,"next","","",15,[[["self"]],["option"]]],[11,"size_hint","","",15,N],[11,"next_back","","",15,[[["self"]],["option"]]],[11,"len","","",15,[[["self"]],["usize"]]],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",N,N],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",N,N],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",N,N],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",N,N],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",N,N],[13,"Quote","","An escaped quote `\"`",16,N],[13,"ReverseSolidus","","An escaped reverse solidus `\\`",16,N],[13,"Solidus","","An escaped solidus `/`",16,N],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",16,N],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",16,N],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",16,N],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",16,N],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",16,N],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",16,N],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",N,[[["w"],["t"]],["result"]]],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",N,[[["t"]],["result",["vec"]]]],[5,"to_string","","Serialize the given data structure as a String of JSON.",N,[[["t"]],["result",["string"]]]],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",N,[[["t"]],["result",["string"]]]],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",N,N],[11,"write_null","","Writes a `null` value to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i8"]],["result"]]],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i16"]],["result"]]],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i32"]],["result"]]],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",17,[[["self"],["w"],["i64"]],["result"]]],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u8"]],["result"]]],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u16"]],["result"]]],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u32"]],["result"]]],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",17,[[["self"],["w"],["u64"]],["result"]]],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f32"]],["result"]]],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",17,[[["self"],["w"],["f64"]],["result"]]],[11,"write_number_str","","Writes a number that has already been rendered to a string.",17,[[["self"],["w"],["str"]],["result"]]],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"write_char_escape","","Writes a character escape code to the specified writer.",17,[[["self"],["w"],["charescape"]],["result"]]],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","Called after every array value.",17,[[["self"],["w"]],["result"]]],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","Called before every object key.",17,[[["self"],["w"],["bool"]],["result"]]],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",17,[[["self"],["w"]],["result"]]],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",17,[[["self"],["w"]],["result"]]],[11,"end_object_value","","Called after every object value.",17,[[["self"],["w"]],["result"]]],[11,"write_raw_fragment","","Writes a raw JSON fragment that doesn't need any escaping to the specified writer.",17,[[["self"],["w"],["str"]],["result"]]],[11,"new","","Creates a new JSON serializer.",18,[[["w"]],["self"]]],[11,"pretty","","Creates a new JSON pretty print serializer.",18,[[["w"]],["self"]]],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",18,[[["w"],["f"]],["self"]]],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",18,[[["self"]],["w"]]],[11,"clone","","",19,[[["self"]],["compactformatter"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"clone","","",20,[[["self"]],["prettyformatter"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",20,[[],["self"]]],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",20,N],[11,"default","","",20,[[],["self"]]],[11,"begin_array","","",20,[[["self"],["w"]],["result"]]],[11,"end_array","","",20,[[["self"],["w"]],["result"]]],[11,"begin_array_value","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"end_array_value","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object","","",20,[[["self"],["w"]],["result"]]],[11,"end_object","","",20,[[["self"],["w"]],["result"]]],[11,"begin_object_key","","",20,[[["self"],["w"],["bool"]],["result"]]],[11,"begin_object_value","","",20,[[["self"],["w"]],["result"]]],[11,"end_object_value","","",20,[[["self"],["w"]],["result"]]],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",N,N],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",N,N],[4,"Value","","Represents any valid JSON value.",N,N],[13,"Null","","Represents a JSON null value.",0,N],[13,"Bool","","Represents a JSON boolean.",0,N],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,N],[13,"String","","Represents a JSON string.",0,N],[13,"Array","","Represents a JSON array.",0,N],[13,"Object","","Represents a JSON object.",0,N],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",N,[[["t"]],["result",["value","error"]]]],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",N,[[["value"]],["result",["error"]]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"from_str","","",0,[[["str"]],["result",["value","error"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"from","","",0,[[["i8"]],["self"]]],[11,"from","","",0,[[["i16"]],["self"]]],[11,"from","","",0,[[["i32"]],["self"]]],[11,"from","","",0,[[["i64"]],["self"]]],[11,"from","","",0,[[["isize"]],["self"]]],[11,"from","","",0,[[["u8"]],["self"]]],[11,"from","","",0,[[["u16"]],["self"]]],[11,"from","","",0,[[["u32"]],["self"]]],[11,"from","","",0,[[["u64"]],["self"]]],[11,"from","","",0,[[["usize"]],["self"]]],[11,"from","","Convert 32-bit floating point number to `Value`",0,[[["f32"]],["self"]]],[11,"from","","Convert 64-bit floating point number to `Value`",0,[[["f64"]],["self"]]],[11,"from","","Convert boolean to `Value`",0,[[["bool"]],["self"]]],[11,"from","","Convert `String` to `Value`",0,[[["string"]],["self"]]],[11,"from","","Convert string slice to `Value`",0,[[["str"]],["self"]]],[11,"from","","Convert copy-on-write string to `Value`",0,[[["cow",["str"]]],["self"]]],[11,"from","","Convert map (with string keys) to `Value`",0,[[["map",["string","value"]]],["self"]]],[11,"from","","Convert a `Vec` to `Value`",0,[[["vec"]],["self"]]],[11,"from","","Convert a slice to `Value`",0,N],[11,"from_iter","","Convert an iteratable type to a `Value`",0,[[["i"]],["self"]]],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,[[["self"],["i"]],["value"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["str"]],["bool"]]],[11,"eq","","",0,[[["self"],["string"]],["bool"]]],[11,"eq","","",0,[[["self"],["i8"]],["bool"]]],[11,"eq","","",0,[[["self"],["i16"]],["bool"]]],[11,"eq","","",0,[[["self"],["i32"]],["bool"]]],[11,"eq","","",0,[[["self"],["i64"]],["bool"]]],[11,"eq","","",0,[[["self"],["isize"]],["bool"]]],[11,"eq","","",0,[[["self"],["u8"]],["bool"]]],[11,"eq","","",0,[[["self"],["u16"]],["bool"]]],[11,"eq","","",0,[[["self"],["u32"]],["bool"]]],[11,"eq","","",0,[[["self"],["u64"]],["bool"]]],[11,"eq","","",0,[[["self"],["usize"]],["bool"]]],[11,"eq","","",0,[[["self"],["f32"]],["bool"]]],[11,"eq","","",0,[[["self"],["f64"]],["bool"]]],[11,"eq","","",0,[[["self"],["bool"]],["bool"]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[8,"Index","","A type that can be used to index into a `serde_json::Value`.",N,N],[11,"clone","","",0,[[["self"]],["value"]]],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Display a JSON value as a string.",0,[[["self"],["formatter"]],["result"]]],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,[[["self"]],["option",["map"]]]],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,[[["self"]],["option",["vec"]]]],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,[[["self"]],["option",["str"]]]],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"is_i64","","Returns true if the `Value` is an integer between `i64::MIN` and `i64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Value` is an integer between zero and `u64::MAX`.",0,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,[[["self"]],["bool"]]],[11,"as_i64","","If the `Value` is an integer, represent it as i64 if possible. Returns None otherwise.",0,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Value` is an integer, represent it as u64 if possible. Returns None otherwise.",0,[[["self"]],["option",["u64"]]]],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,[[["self"]],["option",["f64"]]]],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,[[["self"]],["option",["bool"]]]],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,[[["self"]],["bool"]]],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,[[["self"]],["option"]]],[11,"pointer","","Looks up a value by a JSON Pointer.",0,[[["self"],["str"]],["option",["value"]]]],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,[[["self"],["str"]],["option",["value"]]]],[11,"take","","Takes the value out of the `Value`, leaving a `Null` in its place.",0,[[["self"]],["value"]]],[11,"default","","",0,[[],["value"]]],[11,"clone","serde_json","",2,[[["self"]],["number"]]],[11,"eq","","",2,[[["self"],["number"]],["bool"]]],[11,"ne","","",2,[[["self"],["number"]],["bool"]]],[11,"is_i64","","Returns true if the `Number` is an integer between `i64::MIN` and `i64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_u64","","Returns true if the `Number` is an integer between zero and `u64::MAX`.",2,[[["self"]],["bool"]]],[11,"is_f64","","Returns true if the `Number` can be represented by f64.",2,[[["self"]],["bool"]]],[11,"as_i64","","If the `Number` is an integer, represent it as i64 if possible. Returns None otherwise.",2,[[["self"]],["option",["i64"]]]],[11,"as_u64","","If the `Number` is an integer, represent it as u64 if possible. Returns None otherwise.",2,[[["self"]],["option",["u64"]]]],[11,"as_f64","","Represents the number as f64 if possible. Returns None otherwise.",2,[[["self"]],["option",["f64"]]]],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",2,[[["f64"]],["option",["number"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",2,[[["self"],["s"]],["result"]]],[11,"deserialize","","",2,[[["d"]],["result",["number"]]]],[11,"deserialize_any","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u8","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u16","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f32","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_f64","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_i128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_u128","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_option","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_newtype_struct","","",2,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_seq","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_tuple","","",2,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",2,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_map","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_struct","","",2,N],[11,"deserialize_enum","","",2,N],[11,"deserialize_identifier","","",2,[[["self"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",2,[[["self"],["v"]],["result"]]],[11,"from","","",2,[[["u8"]],["self"]]],[11,"from","","",2,[[["u16"]],["self"]]],[11,"from","","",2,[[["u32"]],["self"]]],[11,"from","","",2,[[["u64"]],["self"]]],[11,"from","","",2,[[["usize"]],["self"]]],[11,"from","","",2,[[["i8"]],["self"]]],[11,"from","","",2,[[["i16"]],["self"]]],[11,"from","","",2,[[["i32"]],["self"]]],[11,"from","","",2,[[["i64"]],["self"]]],[11,"from","","",2,[[["isize"]],["self"]]],[11,"new","serde_json::de","Create a JSON input source to read from a std::io input stream.",21,[[["r"]],["self"]]],[11,"next","","",21,[[["self"]],["result",["option"]]]],[11,"peek","","",21,[[["self"]],["result",["option"]]]],[11,"discard","","",21,[[["self"]]]],[11,"position","","",21,[[["self"]],["position"]]],[11,"peek_position","","",21,[[["self"]],["position"]]],[11,"byte_offset","","",21,[[["self"]],["usize"]]],[11,"parse_str","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",21,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",21,[[["self"]],["result"]]],[11,"decode_hex_escape","","",21,[[["self"]],["result",["u16"]]]],[11,"new","","Create a JSON input source to read from a slice of bytes.",22,N],[11,"next","","",22,[[["self"]],["result",["option"]]]],[11,"peek","","",22,[[["self"]],["result",["option"]]]],[11,"discard","","",22,[[["self"]]]],[11,"position","","",22,[[["self"]],["position"]]],[11,"peek_position","","",22,[[["self"]],["position"]]],[11,"byte_offset","","",22,[[["self"]],["usize"]]],[11,"parse_str","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",22,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",22,[[["self"]],["result"]]],[11,"decode_hex_escape","","",22,[[["self"]],["result",["u16"]]]],[11,"new","","Create a JSON input source to read from a UTF-8 string.",23,[[["str"]],["self"]]],[11,"next","","",23,[[["self"]],["result",["option"]]]],[11,"peek","","",23,[[["self"]],["result",["option"]]]],[11,"discard","","",23,[[["self"]]]],[11,"position","","",23,[[["self"]],["position"]]],[11,"peek_position","","",23,[[["self"]],["position"]]],[11,"byte_offset","","",23,[[["self"]],["usize"]]],[11,"parse_str","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"parse_str_raw","","",23,[[["self"],["vec"]],["result",["reference"]]]],[11,"ignore_str","","",23,[[["self"]],["result"]]],[11,"decode_hex_escape","","",23,[[["self"]],["result",["u16"]]]],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",N,N],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",N,N]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"Number"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["serde_test"]={"doc":"","items":[[3,"Serializer","serde_test","",N,N],[3,"Deserializer","","",N,N],[4,"Token","","",N,N],[13,"Bool","","",0,N],[13,"Isize","","",0,N],[13,"I8","","",0,N],[13,"I16","","",0,N],[13,"I32","","",0,N],[13,"I64","","",0,N],[13,"Usize","","",0,N],[13,"U8","","",0,N],[13,"U16","","",0,N],[13,"U32","","",0,N],[13,"U64","","",0,N],[13,"F32","","",0,N],[13,"F64","","",0,N],[13,"Char","","",0,N],[13,"Str","","",0,N],[13,"String","","",0,N],[13,"Bytes","","",0,N],[13,"Option","","",0,N],[13,"Unit","","",0,N],[13,"UnitStruct","","",0,N],[13,"StructNewType","","",0,N],[13,"EnumStart","","",0,N],[13,"EnumUnit","","",0,N],[13,"EnumNewType","","",0,N],[13,"SeqStart","","",0,N],[13,"SeqArrayStart","","",0,N],[13,"SeqSep","","",0,N],[13,"SeqEnd","","",0,N],[13,"TupleStart","","",0,N],[13,"TupleSep","","",0,N],[13,"TupleEnd","","",0,N],[13,"TupleStructStart","","",0,N],[13,"TupleStructSep","","",0,N],[13,"TupleStructEnd","","",0,N],[13,"MapStart","","",0,N],[13,"MapSep","","",0,N],[13,"MapEnd","","",0,N],[13,"StructStart","","",0,N],[13,"StructSep","","",0,N],[13,"StructEnd","","",0,N],[13,"EnumSeqStart","","",0,N],[13,"EnumSeqSep","","",0,N],[13,"EnumSeqEnd","","",0,N],[13,"EnumMapStart","","",0,N],[13,"EnumMapSep","","",0,N],[13,"EnumMapEnd","","",0,N],[4,"Error","","",N,N],[13,"Custom","","",1,N],[13,"InvalidValue","","",1,N],[13,"EndOfStream","","",1,N],[13,"InvalidType","","",1,N],[13,"InvalidLength","","",1,N],[13,"UnknownVariant","","",1,N],[13,"UnknownField","","",1,N],[13,"MissingField","","",1,N],[13,"DuplicateField","","",1,N],[13,"InvalidName","","",1,N],[13,"UnexpectedToken","","",1,N],[5,"assert_tokens","","",N,N],[5,"assert_ser_tokens","","",N,N],[5,"assert_ser_tokens_error","","Expect an error serializing `T`.",N,N],[5,"assert_de_tokens","","",N,N],[5,"assert_de_tokens_error","","Expect an error deserializing tokens into a `T`.",N,N],[11,"new","","",2,[[["i"]],["serializer"]]],[11,"next_token","","",2,[[["self"]],["option",["token"]]]],[11,"serialize_unit","","",2,[[["self"]],["result",["error"]]]],[11,"serialize_newtype_variant","","",2,[[["self"],["str"],["usize"],["str"],["t"]],["result",["error"]]]],[11,"serialize_unit_struct","","",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_unit_variant","","",2,[[["self"],["str"],["usize"],["str"]],["result",["error"]]]],[11,"serialize_bool","","",2,[[["self"],["bool"]],["result",["error"]]]],[11,"serialize_isize","","",2,[[["self"],["isize"]],["result",["error"]]]],[11,"serialize_i8","","",2,[[["self"],["i8"]],["result",["error"]]]],[11,"serialize_i16","","",2,[[["self"],["i16"]],["result",["error"]]]],[11,"serialize_i32","","",2,[[["self"],["i32"]],["result",["error"]]]],[11,"serialize_i64","","",2,[[["self"],["i64"]],["result",["error"]]]],[11,"serialize_usize","","",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_u8","","",2,[[["self"],["u8"]],["result",["error"]]]],[11,"serialize_u16","","",2,[[["self"],["u16"]],["result",["error"]]]],[11,"serialize_u32","","",2,[[["self"],["u32"]],["result",["error"]]]],[11,"serialize_u64","","",2,[[["self"],["u64"]],["result",["error"]]]],[11,"serialize_f32","","",2,[[["self"],["f32"]],["result",["error"]]]],[11,"serialize_f64","","",2,[[["self"],["f64"]],["result",["error"]]]],[11,"serialize_char","","",2,[[["self"],["char"]],["result",["error"]]]],[11,"serialize_str","","",2,[[["self"],["str"]],["result",["error"]]]],[11,"serialize_none","","",2,[[["self"]],["result",["error"]]]],[11,"serialize_some","","",2,[[["self"],["v"]],["result",["error"]]]],[11,"serialize_seq","","",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_seq_elt","","",2,N],[11,"serialize_seq_end","","",2,N],[11,"serialize_seq_fixed_size","","",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_tuple","","",2,[[["self"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_elt","","",2,N],[11,"serialize_tuple_end","","",2,N],[11,"serialize_newtype_struct","","",2,[[["self"],["str"],["t"]],["result",["error"]]]],[11,"serialize_tuple_struct","","",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_struct_elt","","",2,N],[11,"serialize_tuple_struct_end","","",2,N],[11,"serialize_tuple_variant","","",2,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_tuple_variant_elt","","",2,N],[11,"serialize_tuple_variant_end","","",2,N],[11,"serialize_map","","",2,[[["self"],["option",["usize"]]],["result",["error"]]]],[11,"serialize_map_key","","",2,N],[11,"serialize_map_value","","",2,N],[11,"serialize_map_end","","",2,N],[11,"serialize_struct","","",2,[[["self"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_struct_elt","","",2,N],[11,"serialize_struct_end","","",2,N],[11,"serialize_struct_variant","","",2,[[["self"],["str"],["usize"],["str"],["usize"]],["result",["error"]]]],[11,"serialize_struct_variant_elt","","",2,N],[11,"serialize_struct_variant_end","","",2,N],[11,"serialize_bytes","","",2,N],[11,"new","","",3,[[["i"]],["deserializer"]]],[11,"next_token","","",3,[[["self"]],["option",["token"]]]],[11,"deserialize_seq","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_struct_field","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_map","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_unit","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_bytes","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_ignored_any","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_string","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_str","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_char","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i64","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i32","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i16","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_i8","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u64","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u32","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u16","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_u8","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_f32","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_f64","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_bool","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_usize","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize_isize","","",3,[[["self"],["__v"]],["result"]]],[11,"deserialize","","",3,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_option","","Hook into `Option` deserializing so we can treat `Unit` as a `None`, or a regular value as `Some(value)`.",3,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",3,N],[11,"deserialize_unit_struct","","",3,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",3,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_seq_fixed_size","","",3,[[["self"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_tuple","","",3,[[["self"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_tuple_struct","","",3,[[["self"],["str"],["usize"],["v"]],["result",["error"]]]],[11,"deserialize_struct","","",3,N],[11,"clone","","",0,[[["self"]],["token"]]],[11,"eq","","",0,[[["self"],["token"]],["bool"]]],[11,"ne","","",0,[[["self"],["token"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",1,[[["self"]],["error"]]],[11,"eq","","",1,[[["self"],["error"]],["bool"]]],[11,"ne","","",1,[[["self"],["error"]],["bool"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"custom","","",1,[[["t"]],["error"]]],[11,"invalid_value","","",1,[[["str"]],["error"]]],[11,"custom","","",1,[[["t"]],["error"]]],[11,"end_of_stream","","",1,[[],["error"]]],[11,"invalid_type","","",1,[[["type"]],["error"]]],[11,"invalid_value","","",1,[[["str"]],["error"]]],[11,"invalid_length","","",1,[[["usize"]],["error"]]],[11,"unknown_variant","","",1,[[["str"]],["error"]]],[11,"unknown_field","","",1,[[["str"]],["error"]]],[11,"missing_field","","",1,[[["str"]],["error"]]],[11,"duplicate_field","","",1,[[["str"]],["error"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result",["error"]]]],[11,"description","","",1,[[["self"]],["str"]]],[11,"cause","","",1,[[["self"]],["option",["error"]]]]],"paths":[[4,"Token"],[4,"Error"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["slab"]={"doc":"Pre-allocated storage for a uniform data type.","items":[[3,"Slab","slab","Pre-allocated storage for a uniform data type",N,N],[3,"VacantEntry","","A handle to a vacant entry in a `Slab`.",N,N],[3,"Iter","","An iterator over the values stored in the `Slab`",N,N],[3,"IterMut","","A mutable iterator over the values stored in the `Slab`",N,N],[11,"clone","","",0,[[["self"]],["slab"]]],[11,"default","","",0,[[],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"new","","Construct a new, empty `Slab`.",0,[[],["slab"]]],[11,"with_capacity","","Construct a new, empty `Slab` with the specified capacity.",0,[[["usize"]],["slab"]]],[11,"capacity","","Return the number of values the slab can store without reallocating.",0,[[["self"]],["usize"]]],[11,"reserve","","Reserve capacity for at least `additional` more values to be stored without allocating.",0,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minimum capacity required to store exactly `additional` more values.",0,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the slab as much as possible.",0,[[["self"]]]],[11,"clear","","Clear the slab of all values.",0,[[["self"]]]],[11,"len","","Return the number of stored values.",0,[[["self"]],["usize"]]],[11,"is_empty","","Return `true` if there are no values stored in the slab.",0,[[["self"]],["bool"]]],[11,"iter","","Return an iterator over the slab.",0,[[["self"]],["iter"]]],[11,"iter_mut","","Return an iterator that allows modifying each value.",0,[[["self"]],["itermut"]]],[11,"get","","Return a reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_mut","","Return a mutable reference to the value associated with the given key.",0,[[["self"],["usize"]],["option"]]],[11,"get_unchecked","","Return a reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"get_unchecked_mut","","Return a mutable reference to the value associated with the given key without performing bounds checking.",0,[[["self"],["usize"]],["t"]]],[11,"insert","","Insert a value in the slab, returning key assigned to the value.",0,[[["self"],["t"]],["usize"]]],[11,"vacant_entry","","Return a handle to a vacant entry allowing for further manipulation.",0,[[["self"]],["vacantentry"]]],[11,"remove","","Remove and return the value associated with the given key.",0,[[["self"],["usize"]],["t"]]],[11,"contains","","Return `true` if a value is associated with the given key.",0,[[["self"],["usize"]],["bool"]]],[11,"retain","","Retain only the elements specified by the predicate.",0,[[["self"],["f"]]]],[11,"index","","",0,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",0,[[["self"],["usize"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"insert","","Insert a value in the entry, returning a mutable reference to the value.",1,[[["self"],["t"]],["t"]]],[11,"key","","Return the key associated with this entry.",1,[[["self"]],["usize"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]]],"paths":[[3,"Slab"],[3,"VacantEntry"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["smallvec"]={"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",N,N],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",N,N],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",N,N],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",N,N],[10,"push","","Append an element to the vector.",0,[[["self"],["t"]]]],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",N,N],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,N],[8,"Array","","Types that can be used as the backing store for a SmallVec",N,N],[16,"Item","","The type of the array's elements.",2,N],[10,"size","","Returns the number of items the array can hold.",2,[[],["usize"]]],[10,"ptr","","Returns a pointer to the first element of the array.",2,N],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,N],[11,"next","","",3,[[["self"]],["option"]]],[11,"size_hint","","",3,N],[11,"next_back","","",3,[[["self"]],["option"]]],[11,"drop","","",3,[[["self"]]]],[11,"new","","Construct an empty vector",4,[[],["smallvec"]]],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,[[["usize"]],["self"]]],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>`.",4,[[["vec"]],["smallvec"]]],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,[[["a"]],["smallvec"]]],[11,"from_buf_and_len","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length, which must be less or equal to the size of `buf`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"from_buf_and_len_unchecked","","Constructs a new `SmallVec` on the stack from an `A` without copying elements. Also sets the length. The user is responsible for ensuring that `len <= A::size()`.",4,[[["a"],["usize"]],["smallvec"]]],[11,"set_len","","Sets the length of a vector.",4,[[["self"],["usize"]]]],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,[[["self"]],["usize"]]],[11,"len","","The number of elements stored in the vector",4,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if the vector is empty",4,[[["self"]],["bool"]]],[11,"capacity","","The number of items the vector can hold without reallocating",4,[[["self"]],["usize"]]],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,[[["self"]],["bool"]]],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,[[["self"]],["drain"]]],[11,"push","","Append an item to the vector.",4,N],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,[[["self"]],["option"]]],[11,"grow","","Re-allocate to set the capacity to `max(new_cap, inline_size())`.",4,[[["self"],["usize"]]]],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,[[["self"]]]],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,[[["self"],["usize"]]]],[11,"as_slice","","Extracts a slice containing the entire vector.",4,N],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,N],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,N],[11,"clear","","Remove all elements from the vector.",4,[[["self"]]]],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,N],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,N],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,[[["self"],["usize"],["i"]]]],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,[[["self"]],["vec"]]],[11,"into_inner","","Convert the SmallVec into an `A` if possible. Otherwise return `Err(Self)`.",4,[[["self"]],["result"]]],[11,"retain","","Retains only the elements specified by the predicate.",4,[[["self"],["f"]]]],[11,"dedup","","Removes consecutive duplicate elements.",4,[[["self"]]]],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,[[["self"],["f"]]]],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,[[["self"],["f"]]]],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,N],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,N],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,N],[11,"resize","","Resizes the vector so that its length is equal to `len`.",4,N],[11,"from_elem","","Creates a `SmallVec` with `n` copies of `elem`. ``` use smallvec::SmallVec;",4,N],[11,"deref","","",4,N],[11,"deref_mut","","",4,N],[11,"as_ref","","",4,N],[11,"as_mut","","",4,N],[11,"borrow","","",4,N],[11,"borrow_mut","","",4,N],[11,"write","","",4,N],[11,"write_all","","",4,N],[11,"flush","","",4,[[["self"]],["result"]]],[11,"from","","",4,N],[11,"from","","",4,[[["vec"]],["smallvec"]]],[11,"from","","",4,[[["a"]],["smallvec"]]],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"index","","",4,N],[11,"index_mut","","",4,N],[11,"extend_from_slice","","",4,N],[11,"push","","",4,N],[11,"from_iter","","",4,[[["i"]],["smallvec"]]],[11,"extend","","",4,[[["self"],["i"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"default","","",4,[[],["smallvec"]]],[11,"drop","","",4,[[["self"]]]],[11,"clone","","",4,[[["self"]],["smallvec"]]],[11,"eq","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"ne","","",4,[[["self"],["smallvec"]],["bool"]]],[11,"partial_cmp","","",4,[[["self"],["smallvec"]],["option",["ordering"]]]],[11,"cmp","","",4,[[["self"],["smallvec"]],["ordering"]]],[11,"hash","","",4,[[["self"],["h"]]]],[11,"drop","","",5,[[["self"]]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"into_iter","","",4,N],[14,"smallvec","","Creates a [`SmallVec`] containing the arguments.",N,N]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["stable_deref_trait"]={"doc":"This module defines an unsafe marker trait, StableDeref, for container types that deref to a fixed address which is valid even when the containing type is moved. For example, Box, Vec, Rc, Arc and String implement this trait. Additionally, it defines CloneStableDeref for types like Rc where clones deref to the same address.","items":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable address, even when moved. For example, this is implemented by Box, Vec, Rc, Arc and String, among others. Even when a Box is moved, the underlying storage remains at a fixed location.",N,N],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the same address. This has all the requirements of StableDeref, and additionally requires that after calling clone(), both the old and new value deref to the same address. For example, Rc and Arc implement CloneStableDeref, but Box and Vec do not.",N,N]],"paths":[]};
searchIndex["strsim"]={"doc":"This library implements string similarity metrics.","items":[[4,"StrSimError","strsim","",N,N],[13,"DifferentLengthArgs","","",0,N],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",N,[[["str"],["str"]],["hammingresult"]]],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",N,[[["str"],["str"]],["f64"]]],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",N,[[["str"],["str"]],["f64"]]],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",N,[[["str"],["str"]],["usize"]]],[5,"osa_distance","","Like Levenshtein but allows for adjacent transpositions. Each substring can only be edited once.",N,[[["str"],["str"]],["usize"]]],[5,"damerau_levenshtein","","Like optimal string alignment, but substrings can be edited an unlimited number of times, and the triangle inequality holds.",N,[[["str"],["str"]],["usize"]]],[6,"HammingResult","","",N,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["strsimerror"]],["bool"]]]],"paths":[[4,"StrSimError"]]};
searchIndex["textwrap"]={"doc":"`textwrap` provides functions for word wrapping and filling text.","items":[[3,"NoHyphenation","textwrap","Use this as a [`Wrapper.splitter`] to avoid any kind of hyphenation:",N,N],[3,"HyphenSplitter","","Simple and default way to split words: splitting on existing hyphens only.",N,N],[3,"Wrapper","","A Wrapper holds settings for wrapping and filling text. Use it when the convenience [`wrap_iter`], [`wrap`] and [`fill`] functions are not flexible enough.",N,N],[12,"width","","The width in columns at which the text will be wrapped.",0,N],[12,"initial_indent","","Indentation used for the first line of output.",0,N],[12,"subsequent_indent","","Indentation used for subsequent lines of output.",0,N],[12,"break_words","","Allow long words to be broken if they cannot fit on a line. When set to `false`, some lines may be longer than `self.width`.",0,N],[12,"splitter","","The method for splitting words. If the `hyphenation` feature is enabled, you can use a `hyphenation::language::Corpus` here to get language-aware hyphenation.",0,N],[3,"IntoWrapIter","","An iterator over the lines of the input string which owns a `Wrapper`. An instance of `IntoWrapIter` is typically obtained through either [`wrap_iter`] or [`Wrapper::into_wrap_iter`].",N,N],[3,"WrapIter","","An iterator over the lines of the input string which borrows a `Wrapper`. An instance of `WrapIter` is typically obtained through the [`Wrapper::wrap_iter`] method.",N,N],[5,"fill","","Fill a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["string"]]],[5,"wrap","","Wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["vec",["cow"]]]],[5,"wrap_iter","","Lazily wrap a line of text at `width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",N,[[["str"],["usize"]],["intowrapiter",["hyphensplitter"]]]],[5,"indent","","Add prefix to each non-empty line.",N,[[["str"],["str"]],["string"]]],[5,"dedent","","Removes common leading whitespace from each line.",N,[[["str"]],["string"]]],[8,"WordSplitter","","An interface for splitting words.",N,N],[10,"split","","Return all possible splits of word. Each split is a triple with a head, a hyphen, and a tail where `head + &hyphen + &tail == word`. The hyphen can be empty if there is already a hyphen in the head.",1,[[["self"],["str"]],["vec"]]],[11,"clone","","",2,[[["self"]],["nohyphenation"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"split","","",2,[[["self"],["str"]],["vec"]]],[11,"clone","","",3,[[["self"]],["hyphensplitter"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"split","","",3,[[["self"],["str"]],["vec"]]],[11,"clone","","",0,[[["self"]],["wrapper"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken. A [`HyphenSplitter`] will be used by default for splitting words. See the [`WordSplitter`] trait for other options.",0,[[["usize"]],["wrapper",["hyphensplitter"]]]],[11,"with_splitter","","Use the given [`WordSplitter`] to create a new Wrapper for wrapping at the specified width. By default, we allow words longer than `width` to be broken.",0,[[["usize"],["s"]],["wrapper"]]],[11,"initial_indent","","Change [`self.initial_indent`]. The initial indentation is used on the very first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"subsequent_indent","","Change [`self.subsequent_indent`]. The subsequent indentation is used on lines following the first line of output.",0,[[["self"],["str"]],["wrapper"]]],[11,"break_words","","Change [`self.break_words`]. This controls if words longer than `self.width` can be broken, or if they will be left sticking out into the right margin.",0,[[["self"],["bool"]],["wrapper"]]],[11,"fill","","Fill a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["string"]]],[11,"wrap","","Wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["vec",["cow"]]]],[11,"wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["wrapiter"]]],[11,"into_wrap_iter","","Lazily wrap a line of text at `self.width` characters. Strings are wrapped based on their displayed width, not their size in bytes.",0,[[["self"],["str"]],["intowrapiter"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","",4,[[["self"]],["option",["cow"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"next","","",5,[[["self"]],["option",["cow"]]]]],"paths":[[3,"Wrapper"],[8,"WordSplitter"],[3,"NoHyphenation"],[3,"HyphenSplitter"],[3,"IntoWrapIter"],[3,"WrapIter"]]};
searchIndex["thread_id"]={"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",N,[[],["usize"]]]],"paths":[]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",N,N],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",N,N],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",N,N],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"default","","",0,[[],["threadlocal"]]],[11,"drop","","",0,[[["self"]]]],[11,"new","","Creates a new empty `ThreadLocal`.",0,[[],["threadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",0,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",0,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",0,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,[[["self"]],["itermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",0,[[["self"]]]],[11,"into_iter","","",0,[[["self"]],["intoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",0,[[["self"]],["t"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"next","","",1,[[["self"]],["option",["box"]]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option",["box"]]]],[11,"size_hint","","",2,N],[11,"default","","",3,[[],["cachedthreadlocal"]]],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,[[],["cachedthreadlocal"]]],[11,"get","","Returns the element for the current thread, if it exists.",3,[[["self"]],["option"]]],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn't exist.",3,[[["self"],["f"]],["t"]]],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn't exist. If `create` fails, that error is returned and no element is added.",3,[[["self"],["f"]],["result"]]],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,[[["self"]],["cacheditermut"]]],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively reseting it to its original state.",3,[[["self"]]]],[11,"into_iter","","",3,[[["self"]],["cachedintoiter"]]],[11,"get_default","","Returns the element for the current thread, or creates a default one if it doesn't exist.",3,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["tokio_executor"]={"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",N,N],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",N,N],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",N,N],[3,"SpawnError","","Errors returned by `Executor::spawn`.",N,N],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",N,[[],["result",["enter","entererror"]]]],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",N,[[["t"]]]],[5,"with_default","","Set the default executor for the duration of the closure",N,[[["t"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,[[["self"],["f"]]]],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,[[["self"]]]],[11,"block_on","","Blocks the thread on the specified future, returning the value with which that future completes.",1,[[["self"],["f"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["defaultexecutor"]]],[11,"current","","Returns a handle to the default executor for the current context.",2,[[],["defaultexecutor"]]],[11,"spawn","","",2,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","",2,[[["self"]],["result",["spawnerror"]]]],[11,"execute","","",2,[[["self"],["t"]],["result",["executeerror"]]]],[0,"park","","Abstraction over blocking and unblocking the current thread.",N,N],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",N,N],[3,"ParkError","","Error returned by [`ParkThread`]",N,N],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",N,N],[8,"Park","","Block the current thread.",N,N],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,N],[16,"Error","","Error returned by `park`",3,N],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,N],[10,"park","","Block the current thread unless or until the token is available.",3,[[["self"]],["result"]]],[10,"park_timeout","","Park the current thread for at most `duration`.",3,[[["self"],["duration"]],["result"]]],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",N,N],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"clone","","",7,[[["self"]],["unparkthread"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,[[],["parkthread"]]],[11,"unpark","","",5,N],[11,"park","","",5,[[["self"]],["result"]]],[11,"park_timeout","","",5,[[["self"],["duration"]],["result"]]],[11,"unpark","","",7,[[["self"]]]],[8,"Executor","tokio_executor","A value that executes futures.",N,N],[10,"spawn","","Spawns a future object to run on this executor.",8,[[["self"],["box",["future"]]],["result",["spawnerror"]]]],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,[[["self"]],["result",["spawnerror"]]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,[[],["self"]]],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,[[],["self"]]],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,[[["self"]],["bool"]]],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,[[["self"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"description","","",9,[[["self"]],["str"]]]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_io"]={"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",N,N],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",N,N],[3,"Copy","","A future which will copy all data from a reader into a writer.",N,N],[3,"Flush","","A future used to fully flush an I/O object.",N,N],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",N,N],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",N,N],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",N,N],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",N,N],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",N,N],[3,"Shutdown","","A future used to fully shutdown an I/O object.",N,N],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",N,N],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",N,N],[3,"Window","","A owned window around an underlying buffer.",N,N],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",N,N],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",N,[[["r"],["w"]],["copy"]]],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",N,[[["a"]],["flush"]]],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",N,[[["a"]],["lines"]]],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",N,[[["r"],["t"]],["read"]]],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",N,[[["a"],["t"]],["readexact"]]],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",N,[[["a"],["vec",["u8"]]],["readtoend"]]],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",N,[[["a"],["u8"],["vec",["u8"]]],["readuntil"]]],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",N,[[["a"]],["shutdown"]]],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",N,[[["a"],["t"]],["writeall"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"poll","","",0,[[["self"]],["poll",["error"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"poll","","",1,[[["self"]],["poll",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","","",3,[[["self"]],["poll",["error"]]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","","",4,[[["self"]],["poll",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["self"]],["poll",["error"]]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"poll","","",6,[[["self"]],["poll",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"poll","","",7,[[["self"]],["poll",["error"]]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["allowstdio"]]],[11,"eq","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ne","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"cmp","","",8,[[["self"],["allowstdio"]],["ordering"]]],[11,"partial_cmp","","",8,[[["self"],["allowstdio"]],["option",["ordering"]]]],[11,"lt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"le","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"gt","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"ge","","",8,[[["self"],["allowstdio"]],["bool"]]],[11,"hash","","",8,N],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,[[["t"]],["self"]]],[11,"get_ref","","Returns a reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,[[["self"]],["t"]]],[11,"into_inner","","Consumes self and returns the contained IO object.",8,[[["self"]],["t"]]],[11,"write","","",8,N],[11,"flush","","",8,[[["self"]],["result"]]],[11,"write_all","","",8,N],[11,"write_fmt","","",8,[[["self"],["arguments"]],["result"]]],[11,"shutdown","","",8,[[["self"]],["poll",["error"]]]],[11,"read","","",8,N],[11,"read_to_end","","",8,[[["self"],["vec"]],["result",["usize"]]]],[11,"read_to_string","","",8,[[["self"],["string"]],["result",["usize"]]]],[11,"read_exact","","",8,N],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"into_inner","","Returns the underlying I/O object.",9,[[["self"]],["a"]]],[11,"poll","","",9,[[["self"]],["poll",["option","error"]]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"read","","",10,N],[11,"read_buf","","",10,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"write","","",11,N],[11,"flush","","",11,[[["self"]],["result"]]],[11,"shutdown","","",11,[[["self"]],["poll",["error"]]]],[11,"write_buf","","",11,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",12,[[["t"]],["window"]]],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",12,[[["self"]],["t"]]],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",12,[[["self"]],["t"]]],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",12,[[["self"]],["usize"]]],[11,"set_start","","Changes the starting index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"set_end","","Changes the end index of this window to the index specified.",12,[[["self"],["usize"]],["window"]]],[11,"as_ref","","",12,N],[11,"as_mut","","",12,N],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",N,N],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",N,N],[8,"AsyncRead","","Read bytes asynchronously.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[8,"AsyncWrite","","Writes bytes asynchronously.",N,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",N,N],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,N],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,N],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,[[["self"],["b"]],["poll",["usize","error"]]]],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,[[["self"],["t"]],["framed"]]],[11,"split","","Helper method for splitting this read/write object into two halves.",13,N],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,N],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,[[["self"]],["poll",["error"]]]],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,[[["self"],["b"]],["poll",["usize","error"]]]]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"]={"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",N,N],[3,"Shutdown","","Future that resolves when the reactor thread has shutdown.",N,N],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",N,N],[3,"PollEvented","","Associates an I/O resource that implements the [`std::io::Read`] and/or [`std::io::Write`] traits with the reactor that drives it.",N,N],[3,"Reactor","","The core reactor, or event loop.",N,N],[3,"Handle","","A reference to a reactor.",N,N],[3,"Turn","","Return value from the `turn` method on `Reactor`.",N,N],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",N,N],[5,"with_default","","Set the default reactor for the duration of the closure",N,[[["handle"],["enter"],["f"]],["r"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"handle","","Returns a reference to the reactor handle.",0,[[["self"]],["handle"]]],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,[[["self"]],["shutdown"]]],[11,"shutdown_now","","Shutdown the reactor immediately",0,[[["self"]],["shutdown"]]],[11,"forget","","Run the reactor on its thread until the process terminates.",0,[[["self"]]]],[11,"drop","","",0,[[["self"]]]],[11,"poll","","",1,[[["self"]],["poll"]]],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",2,[[["e"]],["pollevented"]]],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",2,[[["e"],["handle"]],["result"]]],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",2,[[["self"]],["e"]]],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",2,[[["self"]],["e"]]],[11,"into_inner","","Consumes self, returning the inner I/O object",2,[[["self"]],["result"]]],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",2,[[["self"],["ready"]],["poll",["ready","error"]]]],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",2,[[["self"],["ready"]],["result"]]],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",2,[[["self"]],["poll",["ready","error"]]]],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",2,[[["self"]],["result"]]],[11,"read","","",2,N],[11,"write","","",2,N],[11,"flush","","",2,[[["self"]],["result"]]],[11,"shutdown","","",2,[[["self"]],["poll",["error"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"drop","","",2,[[["self"]]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new `Registration`.",3,[[],["registration"]]],[11,"register","","Register the I/O resource with the default reactor.",3,[[["self"],["t"]],["result",["bool"]]]],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",3,[[["self"],["t"]],["result"]]],[11,"register_with","","Register the I/O resource with the specified reactor.",3,[[["self"],["t"],["handle"]],["result",["bool"]]]],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",3,[[["self"]],["poll",["ready","error"]]]],[11,"take_read_ready","","Consume any pending read readiness event.",3,[[["self"]],["result",["option"]]]],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",3,[[["self"]],["poll",["ready","error"]]]],[11,"take_write_ready","","Consume any pending write readiness event.",3,[[["self"]],["result",["option"]]]],[11,"clone","","",4,[[["self"]],["handle"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["setfallbackerror"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",7,[[],["result",["reactor"]]]],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",7,[[["self"]],["handle"]]],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",7,[[["self"]],["result",["setfallbackerror"]]]],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",7,[[["self"],["option",["duration"]]],["result",["turn"]]]],[11,"is_idle","","Returns true if the reactor is currently idle.",7,[[["self"]],["bool"]]],[11,"background","","Run this reactor on a background thread.",7,[[["self"]],["result",["background"]]]],[11,"unpark","","",7,N],[11,"park","","",7,[[["self"]],["result"]]],[11,"park_timeout","","",7,[[["self"],["duration"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"current","","Returns a handle to the current reactor.",4,[[],["handle"]]],[11,"unpark","","",4,[[["self"]]]],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",4,[[],["handle"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"description","","",6,[[["self"]],["str"]]]],"paths":[[3,"Background"],[3,"Shutdown"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["toml"]={"doc":"A [TOML]-parsing library","items":[[0,"value","toml","Definition of a TOML value",N,N],[3,"Datetime","toml::value","A parsed TOML datetime value",N,N],[3,"DatetimeParseError","","Error returned from parsing a `Datetime` in the `FromStr` implementation.",N,N],[4,"Value","","Representation of a TOML value.",N,N],[13,"String","","Represents a TOML string",0,N],[13,"Integer","","Represents a TOML integer",0,N],[13,"Float","","Represents a TOML float",0,N],[13,"Boolean","","Represents a TOML boolean",0,N],[13,"Datetime","","Represents a TOML datetime",0,N],[13,"Array","","Represents a TOML array",0,N],[13,"Table","","Represents a TOML table",0,N],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",N,N],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",N,N],[8,"Index","","Types that can be used to index a `toml::Value`",N,N],[11,"eq","","",0,[[["self"],["value"]],["bool"]]],[11,"ne","","",0,[[["self"],["value"]],["bool"]]],[11,"clone","","",0,[[["self"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"try_from","","Convert a `T` into `toml::Value` which is an enum that can represent any valid TOML data.",0,[[["t"]],["result",["value","error"]]]],[11,"try_into","","Interpret a `toml::Value` as an instance of type `T`.",0,[[["self"]],["result",["error"]]]],[11,"get","","Index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"get_mut","","Mutably index into a TOML array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,[[["self"],["i"]],["option",["value"]]]],[11,"as_integer","","Extracts the integer value if it is an integer.",0,[[["self"]],["option",["i64"]]]],[11,"is_integer","","Tests whether this value is an integer.",0,[[["self"]],["bool"]]],[11,"as_float","","Extracts the float value if it is a float.",0,[[["self"]],["option",["f64"]]]],[11,"is_float","","Tests whether this value is a float.",0,[[["self"]],["bool"]]],[11,"as_bool","","Extracts the boolean value if it is a boolean.",0,[[["self"]],["option",["bool"]]]],[11,"is_bool","","Tests whether this value is a boolean.",0,[[["self"]],["bool"]]],[11,"as_str","","Extracts the string of this value if it is a string.",0,[[["self"]],["option",["str"]]]],[11,"is_str","","Tests if this value is a string.",0,[[["self"]],["bool"]]],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",0,[[["self"]],["option",["datetime"]]]],[11,"is_datetime","","Tests whether this value is a datetime.",0,[[["self"]],["bool"]]],[11,"as_array","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"as_array_mut","","Extracts the array value if it is an array.",0,[[["self"]],["option",["vec"]]]],[11,"is_array","","Tests whether this value is an array.",0,[[["self"]],["bool"]]],[11,"as_table","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"as_table_mut","","Extracts the table value if it is a table.",0,[[["self"]],["option",["table"]]]],[11,"is_table","","Tests whether this value is a table.",0,[[["self"]],["bool"]]],[11,"same_type","","Tests whether this and another value have the same type.",0,[[["self"],["value"]],["bool"]]],[11,"type_str","","Returns a human-readable representation of the type of this value.",0,[[["self"]],["str"]]],[11,"index","","",0,[[["self"],["i"]],["value"]]],[11,"index_mut","","",0,[[["self"],["i"]],["value"]]],[11,"from","","",0,[[["str"]],["value"]]],[11,"from","","",0,[[["vec"]],["value"]]],[11,"from","","",0,[[["btreemap"]],["value"]]],[11,"from","","",0,[[["hashmap"]],["value"]]],[11,"from","","",0,[[["string"]],["value"]]],[11,"from","","",0,[[["i64"]],["value"]]],[11,"from","","",0,[[["i32"]],["value"]]],[11,"from","","",0,[[["i8"]],["value"]]],[11,"from","","",0,[[["u8"]],["value"]]],[11,"from","","",0,[[["u32"]],["value"]]],[11,"from","","",0,[[["f64"]],["value"]]],[11,"from","","",0,[[["f32"]],["value"]]],[11,"from","","",0,[[["bool"]],["value"]]],[11,"from","","",0,[[["datetime"]],["value"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["value"]]]],[11,"serialize","","",0,[[["self"],["s"]],["result"]]],[11,"deserialize","","",0,[[["d"]],["result",["value"]]]],[11,"deserialize_any","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_enum","","",0,N],[11,"deserialize_option","","",0,[[["self"],["v"]],["result",["error"]]]],[11,"deserialize_newtype_struct","","",0,[[["self"],["str"],["v"]],["result",["error"]]]],[11,"deserialize_bool","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_u64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i8","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i16","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_i64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f32","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_f64","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_char","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_str","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_string","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_seq","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_bytes","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_byte_buf","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_map","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_unit_struct","","",0,[[["self"],["str"],["v"]],["result"]]],[11,"deserialize_tuple_struct","","",0,[[["self"],["str"],["usize"],["v"]],["result"]]],[11,"deserialize_struct","","",0,N],[11,"deserialize_tuple","","",0,[[["self"],["usize"],["v"]],["result"]]],[11,"deserialize_ignored_any","","",0,[[["self"],["v"]],["result"]]],[11,"deserialize_identifier","","",0,[[["self"],["v"]],["result"]]],[11,"into_deserializer","","",0,[[["self"]],["self"]]],[11,"eq","","",1,[[["self"],["datetime"]],["bool"]]],[11,"ne","","",1,[[["self"],["datetime"]],["bool"]]],[11,"clone","","",1,[[["self"]],["datetime"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"clone","","",2,[[["self"]],["datetimeparseerror"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",1,[[["str"]],["result",["datetime","datetimeparseerror"]]]],[11,"serialize","","",1,[[["self"],["s"]],["result"]]],[11,"deserialize","","",1,[[["d"]],["result",["datetime"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","",2,[[["self"]],["str"]]],[0,"ser","toml","Serializing Rust structures into TOML.",N,N],[3,"Serializer","toml::ser","Serialization implementation for TOML.",N,N],[4,"Error","","Errors that can occur when serializing a type.",N,N],[13,"UnsupportedType","","Indicates that a Rust type was requested to be serialized but it was not supported.",3,N],[13,"KeyNotString","","The key of all TOML maps must be strings, but serialization was attempted where the key of a map was not a string.",3,N],[13,"ArrayMixedType","","Arrays in TOML must have a homogenous type, but a heterogeneous array was emitted.",3,N],[13,"ValueAfterTable","","All values in a TOML table must be emitted before further tables are emitted. If a value is emitted after a table then this error is generated.",3,N],[13,"DateInvalid","","A serialized date was invalid.",3,N],[13,"NumberInvalid","","A serialized number was invalid.",3,N],[13,"UnsupportedNone","","None was attempted to be serialized, but it's not supported.",3,N],[13,"Custom","","A custom error which could be generated when serializing a particular type.",3,N],[5,"to_vec","","Serialize the given data structure as a TOML byte vector.",N,[[["t"]],["result",["vec","error"]]]],[5,"to_string","","Serialize the given data structure as a String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"to_string_pretty","","Serialize the given data structure as a \"pretty\" String of TOML.",N,[[["t"]],["result",["string","error"]]]],[5,"tables_last","","Convenience function to serialize items in a map in an order valid with TOML.",N,[[["i"],["s"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["error"]],["bool"]]],[11,"ne","","",3,[[["self"],["error"]],["bool"]]],[11,"clone","","",3,[[["self"]],["error"]]],[11,"new","","Creates a new serializer which will emit TOML into the buffer provided.",4,[[["string"]],["serializer"]]],[11,"pretty","","Instantiate a \"pretty\" formatter",4,[[["string"]],["serializer"]]],[11,"pretty_string","","Enable or Disable pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_string_literal","","Enable or Disable Literal strings for pretty strings",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array","","Enable or Disable pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"pretty_array_indent","","Set the indent for pretty arrays",4,[[["self"],["usize"]],["self"]]],[11,"pretty_array_trailing_comma","","Specify whether to use a trailing comma when serializing pretty arrays",4,[[["self"],["bool"]],["self"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"description","","",3,[[["self"]],["str"]]],[11,"custom","","",3,[[["t"]],["error"]]],[0,"de","toml","Deserializing TOML into Rust structures.",N,N],[3,"Error","toml::de","Errors that can occur when deserializing a type.",N,N],[3,"Deserializer","","Deserialization implementation for TOML.",N,N],[5,"from_slice","","Deserializes a byte slice into a type.",N,N],[5,"from_str","","Deserializes a string into a type.",N,[[["str"]],["result",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["error"]]],[11,"new","","Creates a new deserializer which will be deserializing the string provided.",6,[[["str"]],["deserializer"]]],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.  This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace/comments.",6,[[["self"]],["result",["error"]]]],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a table definition, but the TOML spec requires a newline after a table definition header.",6,[[["self"],["bool"]]]],[11,"line_col","","Produces a (line, column) pair of the position of the error if available",5,[[["self"]],["option"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"custom","","",5,[[["t"]],["error"]]],[14,"toml","toml","Construct a [`toml::Value`] from TOML syntax.",N,N]],"paths":[[4,"Value"],[3,"Datetime"],[3,"DatetimeParseError"],[4,"Error"],[3,"Serializer"],[3,"Error"],[3,"Deserializer"]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility functions that implement various algorithms specified by Unicode. There is no specific goal for exhaustiveness. Instead, implementations should be added on an as-needed basis.","items":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"hangul_full_canonical_decomposition","","Return the full canonical decomposition of the given precomposed Hangul codepoint.",N,[[["u32"]],["option"]]],[5,"ideograph_name","","Return the character name of the given ideograph codepoint.",N,[[["u32"]],["option",["string"]]]],[5,"character_name_normalize","","Normalize the given character name in place according to UAX44-LM2.",N,[[["string"]]]],[5,"symbolic_name_normalize","","Normalize the given symbolic name in place according to UAX44-LM3.",N,[[["string"]]]],[5,"canonical_property_name","","Find the canonical property name for the given normalized property name.",N,[[["propertytable"],["str"]],["option",["str"]]]],[5,"property_values","","Find the set of possible property values for a given property.",N,[[["propertyvaluetable"],["str"]],["option",["propertyvalues"]]]],[5,"canonical_property_value","","Find the canonical property value for the given normalized property value.",N,[[["propertyvalues"],["str"]],["option",["str"]]]],[6,"PropertyTable","","The type of a property name table.",N,N],[6,"PropertyValueTable","","Type of a property value table.",N,N],[6,"PropertyValues","","A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE","","A set of ranges that corresponds to the set of all Hangul syllable codepoints.",N,N],[17,"RANGE_IDEOGRAPH","","A set of ranges that corresponds to the set of all ideograph codepoints.",N,N]],"paths":[]};
searchIndex["unicode_width"]={"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",N,N],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",N,N],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,[[["self"]],["option",["usize"]]]],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",N,N],[10,"width","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]],[10,"width_cjk","","Returns the string's displayed width in columns.",1,[[["self"]],["usize"]]]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["unreachable"]={"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",N,N],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,[[["self"]],["t"]]],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,[[["self"]]]],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",N,N],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,[[["self"]],["t"]]],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,[[["self"]],["e"]]]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent ranges of UTF-8 bytes. This is useful for constructing byte based automatons that need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start","","Start of byte range (inclusive).",0,N],[12,"end","","End of byte range (inclusive).",0,N],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One","","One byte range.",1,N],[13,"Two","","Two successive byte ranges.",1,N],[13,"Three","","Three successive byte ranges.",1,N],[13,"Four","","Four successive byte ranges.",1,N],[11,"clone","","",1,[[["self"]],["utf8sequence"]]],[11,"eq","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"ne","","",1,[[["self"],["utf8sequence"]],["bool"]]],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,N],[11,"len","","Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence of byte ranges.",1,N],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["utf8range"]]],[11,"eq","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"ne","","",0,[[["self"],["utf8range"]],["bool"]]],[11,"matches","","Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range given.",2,[[["char"],["char"]],["self"]]],[11,"next","","",2,[[["self"]],["option"]]]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["vec_map"]={"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",N,N],[3,"VacantEntry","","A vacant Entry.",N,N],[3,"OccupiedEntry","","An occupied Entry.",N,N],[3,"Iter","","An iterator over the key-value pairs of a map.",N,N],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",N,N],[3,"Keys","","An iterator over the keys of a map.",N,N],[3,"Values","","An iterator over the values of a map.",N,N],[3,"ValuesMut","","An iterator over the values of a map.",N,N],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",N,N],[3,"Drain","","A draining iterator over the key-value pairs of a map.",N,N],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",N,N],[13,"Vacant","","A vacant Entry",0,N],[13,"Occupied","","An occupied Entry",0,N],[11,"default","","",1,[[],["self"]]],[11,"hash","","",1,[[["self"],["h"]]]],[11,"new","","Creates an empty `VecMap`.",1,[[],["self"]]],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,[[["usize"]],["self"]]],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,[[["self"]],["usize"]]],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Trims the `VecMap` of any excess capacity.",1,[[["self"]]]],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,[[["self"]],["keys"]]],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,[[["self"]],["values"]]],[11,"values_mut","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r mut V`.",1,[[["self"]],["valuesmut"]]],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["iter"]]],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,[[["self"]],["itermut"]]],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,[[["self"],["self"]]]],[11,"split_off","","Splits the collection into two at the given key.",1,[[["self"],["usize"]],["self"]]],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,[[["self"]],["drain"]]],[11,"len","","Returns the number of elements in the map.",1,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the map contains no elements.",1,[[["self"]],["bool"]]],[11,"clear","","Clears the map, removing all key-value pairs.",1,[[["self"]]]],[11,"get","","Returns a reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,[[["self"],["usize"]],["bool"]]],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,[[["self"],["usize"]],["option"]]],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,[[["self"],["usize"],["v"]],["option"]]],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,[[["self"],["usize"]],["option"]]],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,[[["self"],["usize"]],["entry"]]],[11,"retain","","Retains only the elements specified by the predicate.",1,[[["self"],["f"]]]],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["v"]],["v"]]],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,[[["self"],["f"]],["v"]]],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,[[["self"],["v"]],["v"]]],[11,"get","","Gets a reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,[[["self"]],["v"]]],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,[[["self"]],["v"]]],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,[[["self"],["v"]],["v"]]],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,[[["self"]],["v"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"clone_from","","",1,[[["self"],["self"]]]],[11,"eq","","",1,[[["self"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["self"]],["option",["ordering"]]]],[11,"cmp","","",1,[[["self"],["self"]],["ordering"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_iter","","",1,[[["i"]],["self"]]],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,[[["self"]],["intoiter"]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"extend","","",1,[[["self"],["i"]]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"index_mut","","",1,[[["self"],["usize"]],["v"]]],[11,"clone","","",4,[[["self"]],["iter"]]],[11,"next","","",4,[[["self"]],["option"]]],[11,"size_hint","","",4,N],[11,"next_back","","",4,[[["self"]],["option"]]],[11,"next","","",5,[[["self"]],["option"]]],[11,"size_hint","","",5,N],[11,"next_back","","",5,[[["self"]],["option"]]],[11,"clone","","",6,[[["self"]],["keys"]]],[11,"clone","","",7,[[["self"]],["values"]]],[11,"next","","",8,[[["self"]],["option"]]],[11,"size_hint","","",8,N],[11,"next_back","","",8,[[["self"]],["option"]]],[11,"next","","",6,[[["self"]],["option",["usize"]]]],[11,"size_hint","","",6,N],[11,"next_back","","",6,[[["self"]],["option",["usize"]]]],[11,"next","","",7,[[["self"]],["option"]]],[11,"size_hint","","",7,N],[11,"next_back","","",7,[[["self"]],["option"]]],[11,"next","","",9,[[["self"]],["option"]]],[11,"size_hint","","",9,N],[11,"next_back","","",9,[[["self"]],["option"]]],[11,"next","","",10,[[["self"]],["option"]]],[11,"size_hint","","",10,N],[11,"next_back","","",10,[[["self"]],["option"]]]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"ValuesMut"],[3,"IntoIter"]]};
searchIndex["void"]={"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",N,N],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",N,N],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",N,N],[10,"void_unwrap","","Get the value out of a wrapper.",0,[[["self"]],["t"]]],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",N,N],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,[[["self"]],["e"]]],[11,"clone","","",2,[[["self"]],["void"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"eq","","",2,[[["self"],["t"]],["bool"]]],[11,"partial_cmp","","",2,[[["self"],["t"]],["option",["ordering"]]]]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["walkdir"]={"doc":"Crate `walkdir` provides an efficient and cross platform implementation of recursive directory traversal. Several options are exposed to control iteration, such as whether to follow symbolic links (default off), limit the maximum number of simultaneous open file descriptors and the ability to efficiently skip descending into directories.","items":[[3,"WalkDir","walkdir","A builder to create an iterator for recursively walking a directory.",N,N],[3,"IntoIter","","An iterator for recursively descending into a directory.",N,N],[3,"DirEntry","","A directory entry.",N,N],[3,"FilterEntry","","A recursive directory iterator that skips entries.",N,N],[3,"Error","","An error produced by recursively walking a directory.",N,N],[11,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",0,[[["self"]],["u64"]]],[6,"Result","","A result type for walkdir operations.",N,N],[8,"DirEntryExt","","Unix-specific extension methods for `walkdir::DirEntry`",N,N],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent` structure.",1,[[["self"]],["u64"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Create a builder for a recursive directory iterator starting at the file path `root`. If `root` is a directory, then it is the first item yielded by the iterator. If `root` is a file, then it is the first and only item yielded by the iterator. If `root` is a symlink, then it is always followed.",2,[[["p"]],["self"]]],[11,"min_depth","","Set the minimum depth of entries yielded by the iterator.",2,[[["self"],["usize"]],["self"]]],[11,"max_depth","","Set the maximum depth of entries yield by the iterator.",2,[[["self"],["usize"]],["self"]]],[11,"follow_links","","Follow symbolic links. By default, this is disabled.",2,[[["self"],["bool"]],["self"]]],[11,"max_open","","Set the maximum number of simultaneously open file descriptors used by the iterator.",2,[[["self"],["usize"]],["self"]]],[11,"sort_by","","Set a function for sorting directory entries.",2,[[["self"],["f"]],["self"]]],[11,"contents_first","","Yield a directory's contents before the directory itself. By default, this is disabled.",2,[[["self"],["bool"]],["self"]]],[11,"same_file_system","","Do not cross file system boundaries.",2,[[["self"],["bool"]],["self"]]],[11,"into_iter","","",2,[[["self"]],["intoiter"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"next","","Advances the iterator and returns the next value.",3,[[["self"]],["option",["result"]]]],[11,"skip_current_dir","","Skips the current directory.",3,[[["self"]]]],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",3,[[["self"],["p"]],["filterentry"]]],[11,"path","","The full path that this entry represents.",0,[[["self"]],["path"]]],[11,"into_path","","The full path that this entry represents.",0,[[["self"]],["pathbuf"]]],[11,"path_is_symlink","","Returns `true` if and only if this entry was created from a symbolic link. This is unaffected by the [`follow_links`] setting.",0,[[["self"]],["bool"]]],[11,"metadata","","Return the metadata for the file that this entry points to.",0,[[["self"]],["result",["metadata"]]]],[11,"file_type","","Return the file type for the file that this entry points to.",0,[[["self"]],["filetype"]]],[11,"file_name","","Return the file name of this entry.",0,[[["self"]],["osstr"]]],[11,"depth","","Returns the depth at which this entry was created relative to the root.",0,[[["self"]],["usize"]]],[11,"clone","","",0,[[["self"]],["direntry"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"next","","Advances the iterator and returns the next value.",4,[[["self"]],["option",["result"]]]],[11,"filter_entry","","Yields only entries which satisfy the given predicate and skips descending into directories that do not satisfy the given predicate.",4,[[["self"],["p"]],["filterentry"]]],[11,"skip_current_dir","","Skips the current directory.",4,[[["self"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"path","","Returns the path associated with this error if one exists.",5,[[["self"]],["option",["path"]]]],[11,"loop_ancestor","","Returns the path at which a cycle was detected.",5,[[["self"]],["option",["path"]]]],[11,"depth","","Returns the depth at which this error occurred relative to the root.",5,[[["self"]],["usize"]]],[11,"io_error","","Inspect the original [`io::Error`] if there is one.",5,[[["self"]],["option",["error"]]]],[11,"into_io_error","","Similar to [`io_error`] except consumes self to convert to the original [`io::Error`] if one exists.",5,[[["self"]],["option",["error"]]]],[11,"description","","",5,[[["self"]],["str"]]],[11,"cause","","",5,[[["self"]],["option",["error"]]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"DirEntry"],[8,"DirEntryExt"],[3,"WalkDir"],[3,"IntoIter"],[3,"FilterEntry"],[3,"Error"]]};
searchIndex["winapi"]={"doc":"","items":[],"paths":[]};
searchIndex["yaml_rust"]={"doc":"YAML 1.2 implementation in pure Rust.","items":[[0,"emitter","yaml_rust","",N,N],[3,"YamlEmitter","yaml_rust::emitter","",N,N],[4,"EmitError","","",N,N],[13,"FmtError","","",0,N],[13,"BadHashmapKey","","",0,N],[6,"EmitResult","","",N,N],[11,"clone","","",0,[[["self"]],["emiterror"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"description","","",0,[[["self"]],["str"]]],[11,"cause","","",0,[[["self"]],["option",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"from","","",0,[[["error"]],["self"]]],[11,"new","","",1,[[["write"]],["yamlemitter"]]],[11,"compact","","Set 'compact inline notation' on or off, as described for block sequences and mappings.",1,[[["self"],["bool"]]]],[11,"is_compact","","Determine if this emitter is using 'compact inline notation'.",1,[[["self"]],["bool"]]],[11,"dump","","",1,[[["self"],["yaml"]],["emitresult"]]],[0,"parser","yaml_rust","",N,N],[3,"Parser","yaml_rust::parser","",N,N],[4,"Event","","`Event` is used with the low-level event base parsing API, see `EventReceiver` trait.",N,N],[13,"Nothing","","Reserved for internal use",2,N],[13,"StreamStart","","",2,N],[13,"StreamEnd","","",2,N],[13,"DocumentStart","","",2,N],[13,"DocumentEnd","","",2,N],[13,"Alias","","Refer to an anchor ID",2,N],[13,"Scalar","","Value, style, anchor_id, tag",2,N],[13,"SequenceStart","","Anchor ID",2,N],[13,"SequenceEnd","","",2,N],[13,"MappingStart","","Anchor ID",2,N],[13,"MappingEnd","","",2,N],[6,"ParseResult","","",N,N],[8,"EventReceiver","","",N,N],[10,"on_event","","",3,[[["self"],["event"]]]],[8,"MarkedEventReceiver","","",N,N],[10,"on_event","","",4,[[["self"],["event"],["marker"]]]],[11,"clone","","",2,[[["self"]],["event"]]],[11,"eq","","",2,[[["self"],["event"]],["bool"]]],[11,"ne","","",2,[[["self"],["event"]],["bool"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"new","","",5,[[["t"]],["parser"]]],[11,"peek","","",5,[[["self"]],["result",["scanerror"]]]],[11,"next","","",5,[[["self"]],["parseresult"]]],[11,"load","","",5,[[["self"],["r"],["bool"]],["result",["scanerror"]]]],[0,"scanner","yaml_rust","",N,N],[3,"Marker","yaml_rust::scanner","",N,N],[3,"ScanError","","",N,N],[3,"Token","","",N,N],[12,"0","","",6,N],[12,"1","","",6,N],[3,"Scanner","","",N,N],[4,"TEncoding","","",N,N],[13,"Utf8","","",7,N],[4,"TScalarStyle","","",N,N],[13,"Any","","",8,N],[13,"Plain","","",8,N],[13,"SingleQuoted","","",8,N],[13,"DoubleQuoted","","",8,N],[13,"Literal","","",8,N],[13,"Foled","","",8,N],[4,"TokenType","","",N,N],[13,"NoToken","","",9,N],[13,"StreamStart","","",9,N],[13,"StreamEnd","","",9,N],[13,"VersionDirective","","major, minor",9,N],[13,"TagDirective","","handle, prefix",9,N],[13,"DocumentStart","","",9,N],[13,"DocumentEnd","","",9,N],[13,"BlockSequenceStart","","",9,N],[13,"BlockMappingStart","","",9,N],[13,"BlockEnd","","",9,N],[13,"FlowSequenceStart","","",9,N],[13,"FlowSequenceEnd","","",9,N],[13,"FlowMappingStart","","",9,N],[13,"FlowMappingEnd","","",9,N],[13,"BlockEntry","","",9,N],[13,"FlowEntry","","",9,N],[13,"Key","","",9,N],[13,"Value","","",9,N],[13,"Alias","","",9,N],[13,"Anchor","","",9,N],[13,"Tag","","handle, suffix",9,N],[13,"Scalar","","",9,N],[6,"ScanResult","","",N,N],[11,"clone","","",7,[[["self"]],["tencoding"]]],[11,"eq","","",7,[[["self"],["tencoding"]],["bool"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"clone","","",8,[[["self"]],["tscalarstyle"]]],[11,"eq","","",8,[[["self"],["tscalarstyle"]],["bool"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"clone","","",10,[[["self"]],["marker"]]],[11,"eq","","",10,[[["self"],["marker"]],["bool"]]],[11,"ne","","",10,[[["self"],["marker"]],["bool"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"index","","",10,[[["self"]],["usize"]]],[11,"line","","",10,[[["self"]],["usize"]]],[11,"col","","",10,[[["self"]],["usize"]]],[11,"clone","","",11,[[["self"]],["scanerror"]]],[11,"eq","","",11,[[["self"],["scanerror"]],["bool"]]],[11,"ne","","",11,[[["self"],["scanerror"]],["bool"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"new","","",11,[[["marker"],["str"]],["scanerror"]]],[11,"marker","","",11,[[["self"]],["marker"]]],[11,"description","","",11,[[["self"]],["str"]]],[11,"cause","","",11,[[["self"]],["option",["error"]]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"clone","","",9,[[["self"]],["tokentype"]]],[11,"eq","","",9,[[["self"],["tokentype"]],["bool"]]],[11,"ne","","",9,[[["self"],["tokentype"]],["bool"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"clone","","",6,[[["self"]],["token"]]],[11,"eq","","",6,[[["self"],["token"]],["bool"]]],[11,"ne","","",6,[[["self"],["token"]],["bool"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"next","","",12,[[["self"]],["option",["token"]]]],[11,"new","","Creates the YAML tokenizer.",12,[[["t"]],["scanner"]]],[11,"get_error","","",12,[[["self"]],["option",["scanerror"]]]],[11,"stream_started","","",12,[[["self"]],["bool"]]],[11,"stream_ended","","",12,[[["self"]],["bool"]]],[11,"mark","","",12,[[["self"]],["marker"]]],[11,"fetch_next_token","","",12,[[["self"]],["scanresult"]]],[11,"next_token","","",12,[[["self"]],["result",["option","scanerror"]]]],[11,"fetch_more_tokens","","",12,[[["self"]],["scanresult"]]],[0,"yaml","yaml_rust","",N,N],[3,"YamlLoader","yaml_rust::yaml","",N,N],[3,"YamlIter","","",N,N],[4,"Yaml","","A YAML node is stored as this `Yaml` enumeration, which provides an easy way to access your YAML document.",N,N],[13,"Real","","Float types are stored as String and parsed on demand. Note that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap.",13,N],[13,"Integer","","YAML int is stored as i64.",13,N],[13,"String","","YAML scalar.",13,N],[13,"Boolean","","YAML bool, e.g. `true` or `false`.",13,N],[13,"Array","","YAML array, can be accessed as a `Vec`.",13,N],[13,"Hash","","YAML hash, can be accessed as a `LinkedHashMap`.",13,N],[13,"Alias","","Alias, not fully supported yet.",13,N],[13,"Null","","YAML null, e.g. `null` or `~`.",13,N],[13,"BadValue","","Accessing a nonexistent node via the Index trait returns `BadValue`. This simplifies error handling in the calling code. Invalid type conversion also returns `BadValue`.",13,N],[6,"Array","","",N,N],[6,"Hash","","",N,N],[11,"clone","","",13,[[["self"]],["yaml"]]],[11,"eq","","",13,[[["self"],["yaml"]],["bool"]]],[11,"ne","","",13,[[["self"],["yaml"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["yaml"]],["option",["ordering"]]]],[11,"lt","","",13,[[["self"],["yaml"]],["bool"]]],[11,"le","","",13,[[["self"],["yaml"]],["bool"]]],[11,"gt","","",13,[[["self"],["yaml"]],["bool"]]],[11,"ge","","",13,[[["self"],["yaml"]],["bool"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"cmp","","",13,[[["self"],["yaml"]],["ordering"]]],[11,"hash","","",13,N],[11,"on_event","","",14,[[["self"],["event"],["marker"]]]],[11,"load_from_str","","",14,[[["str"]],["result",["vec","scanerror"]]]],[11,"as_bool","","",13,[[["self"]],["option",["bool"]]]],[11,"as_i64","","",13,[[["self"]],["option",["i64"]]]],[11,"as_str","","",13,[[["self"]],["option",["str"]]]],[11,"as_hash","","",13,[[["self"]],["option",["hash"]]]],[11,"as_vec","","",13,[[["self"]],["option",["array"]]]],[11,"into_bool","","",13,[[["self"]],["option",["bool"]]]],[11,"into_i64","","",13,[[["self"]],["option",["i64"]]]],[11,"into_string","","",13,[[["self"]],["option",["string"]]]],[11,"into_hash","","",13,[[["self"]],["option",["hash"]]]],[11,"into_vec","","",13,[[["self"]],["option",["array"]]]],[11,"is_null","","",13,[[["self"]],["bool"]]],[11,"is_badvalue","","",13,[[["self"]],["bool"]]],[11,"is_array","","",13,[[["self"]],["bool"]]],[11,"as_f64","","",13,[[["self"]],["option",["f64"]]]],[11,"into_f64","","",13,[[["self"]],["option",["f64"]]]],[11,"from_str","","",13,[[["str"]],["yaml"]]],[11,"index","","",13,[[["self"],["str"]],["yaml"]]],[11,"index","","",13,[[["self"],["usize"]],["yaml"]]],[11,"into_iter","","",13,N],[11,"next","","",15,[[["self"]],["option",["yaml"]]]]],"paths":[[4,"EmitError"],[3,"YamlEmitter"],[4,"Event"],[8,"EventReceiver"],[8,"MarkedEventReceiver"],[3,"Parser"],[3,"Token"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Scanner"],[4,"Yaml"],[3,"YamlLoader"],[3,"YamlIter"]]};
initSearch(searchIndex);
